!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATTRIB_N_UNIFORM_SETTERS	Program.cpp	/^#define ATTRIB_N_UNIFORM_SETTERS(/;"	d	file:
AllocFree	main.cpp	/^void AllocFree()$/;"	f
AllocInit	main.cpp	/^void AllocInit()$/;"	f
AppMain	main.cpp	/^void AppMain()$/;"	f
AverageRGB	Bitmap.cpp	/^inline unsigned char AverageRGB(unsigned char rgb[3]) {$/;"	f
Big	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s	struct:nk_alignof
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap
Bitmap	Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
CASE	stb_image.h	/^         #define CASE(/;"	d
CASE	stb_image.h	/^         #undef CASE$/;"	d
CASE	stb_image.h	/^      #define CASE(/;"	d
CASE	stb_image.h	/^      #undef CASE$/;"	d
CEZ	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v
CEZLX	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v
CEZLY	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v
CEZX	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CEZXL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CEZY	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CEZYL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CHXLY	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v
CHXY	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CHXYL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CHYLX	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v
CHYX	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
CHYXL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v
COMBO	stb_image.h	/^      #define COMBO(/;"	d
CalcFPS	main.cpp	/^float CalcFPS(GLFWwindow *gWindow, float theTimeInterval, std::string theWindowTitle)$/;"	f
Camera	Camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera
Camera	Camera.h	/^    class Camera {$/;"	c	namespace:tdogl
CameraInit	main.cpp	/^void CameraInit()$/;"	f
CheckOpenGLError	main.cpp	/^void CheckOpenGLError(void)$/;"	f
Compare	main.cpp	/^float Compare(float x, float a, float b)$/;"	f
ConverterFuncForFormats	Bitmap.cpp	/^static FormatConverterFunc ConverterFuncForFormats(Bitmap::Format srcFormat, Bitmap::Format destFormat){$/;"	f	file:
CreateTexture	main.cpp	/^void CreateTexture(int index, GLuint *tex)$/;"	f
DeleteTexture	main.cpp	/^void DeleteTexture(int index, GLuint *tex)$/;"	f
DrawRact	main.cpp	/^void DrawRact(float r)$/;"	f
DrawRactColor	main.cpp	/^void DrawRactColor(float r)$/;"	f
DrawWall	main.cpp	/^void DrawWall()$/;"	f
DrawWallColor	main.cpp	/^void DrawWallColor()$/;"	f
ECX	main.cpp	/^float *ECX, *ECY;$/;"	v
ECY	main.cpp	/^float *ECX, *ECY;$/;"	v
EZX	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v
EZY	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v
E_Max	main.cpp	/^double E_Max, E_Min;$/;"	v
E_Min	main.cpp	/^double E_Max, E_Min;$/;"	v
Ez	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
Ez_green	main.cpp	/^float Ez_green;$/;"	v
Ez_lightblue	main.cpp	/^float Ez_lightblue;$/;"	v
Ez_max	main.cpp	/^float Ez_max = 2.060459378159e-03f;$/;"	v
Ez_min	main.cpp	/^float Ez_min = -7.196258220476e-04f;$/;"	v
Ez_range	main.cpp	/^float Ez_range;$/;"	v
Ez_yellow	main.cpp	/^float Ez_yellow;$/;"	v
FAST_BITS	stb_image.h	/^#define FAST_BITS /;"	d
FDTD2dTM	main.cpp	/^void FDTD2dTM()$/;"	f
FDTDInit	main.cpp	/^void FDTDInit()$/;"	f
Format	Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap
FormatConverterFunc	Bitmap.cpp	/^typedef void(*FormatConverterFunc)(unsigned char*, unsigned char*);$/;"	t	file:
Format_Grayscale	Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_GrayscaleAlpha	Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGB	Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGBA	Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
GLFW_GLEWInit	main.cpp	/^void GLFW_GLEWInit()$/;"	f
GLframe	main.cpp	/^int GLframe = 0;$/;"	v
GLtimebase	main.cpp	/^int GLtimebase = 0;$/;"	v
GLtimenow	main.cpp	/^int GLtimenow = 0;$/;"	v
GUIRender	main.cpp	/^void GUIRender(struct nk_context *ctx)$/;"	f
GetPixelOffset	Bitmap.cpp	/^inline unsigned GetPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Bitmap::Format format) {$/;"	f
Grayscale2GrayscaleAlpha	Bitmap.cpp	/^static void Grayscale2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:
Grayscale2RGB	Bitmap.cpp	/^static void Grayscale2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:
Grayscale2RGBA	Bitmap.cpp	/^static void Grayscale2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:
GrayscaleAlpha2Grayscale	Bitmap.cpp	/^static void GrayscaleAlpha2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:
GrayscaleAlpha2RGB	Bitmap.cpp	/^static void GrayscaleAlpha2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:
GrayscaleAlpha2RGBA	Bitmap.cpp	/^static void GrayscaleAlpha2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:
HXY	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v
HYX	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v
Hx	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
Hy	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
L	main.cpp	/^int L = 12;$/;"	v
LEN	nuklear/backup.c	/^#define LEN(/;"	d	file:
LEN	nuklear/main.c	/^#define LEN(/;"	d	file:
LaunchCPUKernel	main.cpp	/^void LaunchCPUKernel()$/;"	f
LoadShaders	main.cpp	/^void LoadShaders()$/;"	f
LoadTexture	main.cpp	/^void LoadTexture()$/;"	f
LoadTriangle	main.cpp	/^void LoadTriangle()$/;"	f
M	main.cpp	/^int M = 4;$/;"	v
MAX	nuklear/backup.c	/^#define MAX(/;"	d	file:
MAX	nuklear/main.c	/^#define MAX(/;"	d	file:
MAX_ELEMENT_BUFFER	main.cpp	/^#define MAX_ELEMENT_BUFFER /;"	d	file:
MAX_ELEMENT_BUFFER	nuklear/backup.c	/^#define MAX_ELEMENT_BUFFER /;"	d	file:
MAX_ELEMENT_BUFFER	nuklear/main.c	/^#define MAX_ELEMENT_BUFFER /;"	d	file:
MAX_VERTEX_BUFFER	main.cpp	/^#define MAX_VERTEX_BUFFER /;"	d	file:
MAX_VERTEX_BUFFER	nuklear/backup.c	/^#define MAX_VERTEX_BUFFER /;"	d	file:
MAX_VERTEX_BUFFER	nuklear/main.c	/^#define MAX_VERTEX_BUFFER /;"	d	file:
MIN	nuklear/backup.c	/^#define MIN(/;"	d	file:
MIN	nuklear/main.c	/^#define MIN(/;"	d	file:
MaxVerticalAngle	Camera.cpp	/^static const float MaxVerticalAngle = 85.0f; \/\/must be less than 90 to avoid gimbal lock$/;"	v	file:
MouseInit	main.cpp	/^void MouseInit(void)$/;"	f
NK_ABS	nuklear/nuklear.h	/^#define NK_ABS(/;"	d
NK_ADJACENCY_BONUS	nuklear/nuklear.h	/^    #define NK_ADJACENCY_BONUS /;"	d
NK_ALIGNOF	nuklear/nuklear.h	/^#define NK_ALIGNOF(/;"	d
NK_ALIGN_PTR	nuklear/nuklear.h	/^#define NK_ALIGN_PTR(/;"	d
NK_ALIGN_PTR_BACK	nuklear/nuklear.h	/^#define NK_ALIGN_PTR_BACK(/;"	d
NK_ANTI_ALIASING_OFF	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_ANTI_ALIASING_ON	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_API	nuklear/nuklear.h	/^#define NK_API /;"	d
NK_ASSERT	nuklear/nuklear.h	/^#define NK_ASSERT(/;"	d
NK_BETWEEN	nuklear/nuklear.h	/^#define NK_BETWEEN(/;"	d
NK_BUFFER_BACK	nuklear/nuklear.h	/^    NK_BUFFER_BACK,$/;"	e	enum:nk_buffer_allocation_type
NK_BUFFER_DEFAULT_INITIAL_SIZE	nuklear/nuklear.h	/^#define NK_BUFFER_DEFAULT_INITIAL_SIZE /;"	d
NK_BUFFER_DYNAMIC	nuklear/nuklear.h	/^    NK_BUFFER_DYNAMIC$/;"	e	enum:nk_allocation_type
NK_BUFFER_FIXED	nuklear/nuklear.h	/^    NK_BUFFER_FIXED,$/;"	e	enum:nk_allocation_type
NK_BUFFER_FRONT	nuklear/nuklear.h	/^    NK_BUFFER_FRONT,$/;"	e	enum:nk_buffer_allocation_type
NK_BUFFER_MAX	nuklear/nuklear.h	/^    NK_BUFFER_MAX$/;"	e	enum:nk_buffer_allocation_type
NK_BUTTON_DEFAULT	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
NK_BUTTON_LEFT	nuklear/nuklear.h	/^    NK_BUTTON_LEFT,$/;"	e	enum:nk_buttons
NK_BUTTON_MAX	nuklear/nuklear.h	/^    NK_BUTTON_MAX$/;"	e	enum:nk_buttons
NK_BUTTON_MIDDLE	nuklear/nuklear.h	/^    NK_BUTTON_MIDDLE,$/;"	e	enum:nk_buttons
NK_BUTTON_REPEATER	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
NK_BUTTON_RIGHT	nuklear/nuklear.h	/^    NK_BUTTON_RIGHT,$/;"	e	enum:nk_buttons
NK_CAMEL_BONUS	nuklear/nuklear.h	/^    #define NK_CAMEL_BONUS /;"	d
NK_CHART_CLICKED	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_COLUMN	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_HOVERING	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_LINES	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX_SLOT	nuklear/nuklear.h	/^#define NK_CHART_MAX_SLOT /;"	d
NK_CLAMP	nuklear/nuklear.h	/^#define NK_CLAMP(/;"	d
NK_CLIPPING_OFF	nuklear/nuklear.h	/^    NK_CLIPPING_OFF = nk_false,$/;"	e	enum:nk_command_clipping
NK_CLIPPING_ON	nuklear/nuklear.h	/^    NK_CLIPPING_ON = nk_true$/;"	e	enum:nk_command_clipping
NK_COLOR	nuklear/nuklear.h	/^#define NK_COLOR(/;"	d
NK_COLOR	nuklear/nuklear.h	/^#undef NK_COLOR$/;"	d
NK_COLOR_BORDER	nuklear/nuklear.h	/^    NK_COLOR_BORDER,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON	nuklear/nuklear.h	/^    NK_COLOR_BUTTON,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_BUTTON_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_HOVER	nuklear/nuklear.h	/^    NK_COLOR_BUTTON_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART	nuklear/nuklear.h	/^    NK_COLOR_CHART,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR	nuklear/nuklear.h	/^    NK_COLOR_CHART_COLOR,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR_HIGHLIGHT	nuklear/nuklear.h	/^    NK_COLOR_CHART_COLOR_HIGHLIGHT,$/;"	e	enum:nk_style_colors
NK_COLOR_COMBO	nuklear/nuklear.h	/^    NK_COLOR_COMBO,$/;"	e	enum:nk_style_colors
NK_COLOR_COUNT	nuklear/nuklear.h	/^    NK_COLOR_COUNT$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT	nuklear/nuklear.h	/^    NK_COLOR_EDIT,$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_EDIT_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_HEADER	nuklear/nuklear.h	/^    NK_COLOR_HEADER,$/;"	e	enum:nk_style_colors
NK_COLOR_MAP	nuklear/nuklear.h	/^#define NK_COLOR_MAP(/;"	d
NK_COLOR_PROPERTY	nuklear/nuklear.h	/^    NK_COLOR_PROPERTY,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_HOVER	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT	nuklear/nuklear.h	/^    NK_COLOR_SELECT,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SELECT_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER	nuklear/nuklear.h	/^    NK_COLOR_SLIDER,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_HOVER	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_TAB_HEADER	nuklear/nuklear.h	/^    NK_COLOR_TAB_HEADER,$/;"	e	enum:nk_style_colors
NK_COLOR_TEXT	nuklear/nuklear.h	/^    NK_COLOR_TEXT,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_HOVER	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_WINDOW	nuklear/nuklear.h	/^    NK_COLOR_WINDOW,$/;"	e	enum:nk_style_colors
NK_COMMAND_ARC	nuklear/nuklear.h	/^    NK_COMMAND_ARC,$/;"	e	enum:nk_command_type
NK_COMMAND_ARC_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_ARC_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_CIRCLE	nuklear/nuklear.h	/^    NK_COMMAND_CIRCLE,$/;"	e	enum:nk_command_type
NK_COMMAND_CIRCLE_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_CIRCLE_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_CURVE	nuklear/nuklear.h	/^    NK_COMMAND_CURVE,$/;"	e	enum:nk_command_type
NK_COMMAND_IMAGE	nuklear/nuklear.h	/^    NK_COMMAND_IMAGE$/;"	e	enum:nk_command_type
NK_COMMAND_LINE	nuklear/nuklear.h	/^    NK_COMMAND_LINE,$/;"	e	enum:nk_command_type
NK_COMMAND_NOP	nuklear/nuklear.h	/^    NK_COMMAND_NOP,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYGON	nuklear/nuklear.h	/^    NK_COMMAND_POLYGON,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYGON_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_POLYGON_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYLINE	nuklear/nuklear.h	/^    NK_COMMAND_POLYLINE,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT	nuklear/nuklear.h	/^    NK_COMMAND_RECT,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_RECT_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT_MULTI_COLOR	nuklear/nuklear.h	/^    NK_COMMAND_RECT_MULTI_COLOR,$/;"	e	enum:nk_command_type
NK_COMMAND_SCISSOR	nuklear/nuklear.h	/^    NK_COMMAND_SCISSOR,$/;"	e	enum:nk_command_type
NK_COMMAND_TEXT	nuklear/nuklear.h	/^    NK_COMMAND_TEXT,$/;"	e	enum:nk_command_type
NK_COMMAND_TRIANGLE	nuklear/nuklear.h	/^    NK_COMMAND_TRIANGLE,$/;"	e	enum:nk_command_type
NK_COMMAND_TRIANGLE_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_TRIANGLE_FILLED,$/;"	e	enum:nk_command_type
NK_CONTAINER_OF	nuklear/nuklear.h	/^#define NK_CONTAINER_OF(/;"	d
NK_CONTAINS	nuklear/nuklear.h	/^#define NK_CONTAINS(/;"	d
NK_COORD_PIXEL	nuklear/nuklear.h	/^    NK_COORD_PIXEL$/;"	e	enum:nk_font_coord_type
NK_COORD_UV	nuklear/nuklear.h	/^    NK_COORD_UV,$/;"	e	enum:nk_font_coord_type
NK_COS	nuklear/nuklear.h	/^#define NK_COS /;"	d
NK_CURSOR_ARROW	nuklear/nuklear.h	/^    NK_CURSOR_ARROW,$/;"	e	enum:nk_style_cursor
NK_CURSOR_COUNT	nuklear/nuklear.h	/^    NK_CURSOR_COUNT$/;"	e	enum:nk_style_cursor
NK_CURSOR_DATA_H	nuklear/nuklear.h	/^#define NK_CURSOR_DATA_H /;"	d
NK_CURSOR_DATA_W	nuklear/nuklear.h	/^#define NK_CURSOR_DATA_W /;"	d
NK_CURSOR_MOVE	nuklear/nuklear.h	/^    NK_CURSOR_MOVE,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_HORIZONTAL	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_HORIZONTAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_VERTICAL	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_VERTICAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_TEXT	nuklear/nuklear.h	/^    NK_CURSOR_TEXT,$/;"	e	enum:nk_style_cursor
NK_DEFAULT_COMMAND_BUFFER_SIZE	nuklear/nuklear.h	/^#define NK_DEFAULT_COMMAND_BUFFER_SIZE /;"	d
NK_DOWN	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_DO_NOT_STOP_ON_NEW_LINE	nuklear/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon6
NK_DYNAMIC	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_EDIT_ACTIVATED	nuklear/nuklear.h	/^    NK_EDIT_ACTIVATED   = NK_FLAG(2), \/* edit widget went from state inactive to state active *\/$/;"	e	enum:nk_edit_events
NK_EDIT_ACTIVE	nuklear/nuklear.h	/^    NK_EDIT_ACTIVE      = NK_FLAG(0), \/* edit widget is currently being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_ALLOW_TAB	nuklear/nuklear.h	/^    NK_EDIT_ALLOW_TAB               = NK_FLAG(3),$/;"	e	enum:nk_edit_flags
NK_EDIT_ALWAYS_INSERT_MODE	nuklear/nuklear.h	/^    NK_EDIT_ALWAYS_INSERT_MODE      = NK_FLAG(9),$/;"	e	enum:nk_edit_flags
NK_EDIT_AUTO_SELECT	nuklear/nuklear.h	/^    NK_EDIT_AUTO_SELECT             = NK_FLAG(1),$/;"	e	enum:nk_edit_flags
NK_EDIT_BOX	nuklear/nuklear.h	/^    NK_EDIT_BOX     = NK_EDIT_ALWAYS_INSERT_MODE| NK_EDIT_SELECTABLE|$/;"	e	enum:nk_edit_types
NK_EDIT_CLIPBOARD	nuklear/nuklear.h	/^    NK_EDIT_CLIPBOARD               = NK_FLAG(6),$/;"	e	enum:nk_edit_flags
NK_EDIT_COMMITED	nuklear/nuklear.h	/^    NK_EDIT_COMMITED    = NK_FLAG(4) \/* edit widget has received an enter and lost focus *\/$/;"	e	enum:nk_edit_events
NK_EDIT_CTRL_ENTER_NEWLINE	nuklear/nuklear.h	/^    NK_EDIT_CTRL_ENTER_NEWLINE      = NK_FLAG(7),$/;"	e	enum:nk_edit_flags
NK_EDIT_DEACTIVATED	nuklear/nuklear.h	/^    NK_EDIT_DEACTIVATED = NK_FLAG(3), \/* edit widget went from state active to state inactive *\/$/;"	e	enum:nk_edit_events
NK_EDIT_DEFAULT	nuklear/nuklear.h	/^    NK_EDIT_DEFAULT                 = 0,$/;"	e	enum:nk_edit_flags
NK_EDIT_EDITOR	nuklear/nuklear.h	/^    NK_EDIT_EDITOR  = NK_EDIT_SELECTABLE|NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB|$/;"	e	enum:nk_edit_types
NK_EDIT_FIELD	nuklear/nuklear.h	/^    NK_EDIT_FIELD   = NK_EDIT_SIMPLE|NK_EDIT_SELECTABLE,$/;"	e	enum:nk_edit_types
NK_EDIT_INACTIVE	nuklear/nuklear.h	/^    NK_EDIT_INACTIVE    = NK_FLAG(1), \/* edit widget is not active and is not being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_MULTILINE	nuklear/nuklear.h	/^    NK_EDIT_MULTILINE               = NK_FLAG(11)$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_CURSOR	nuklear/nuklear.h	/^    NK_EDIT_NO_CURSOR               = NK_FLAG(4),$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_HORIZONTAL_SCROLL	nuklear/nuklear.h	/^    NK_EDIT_NO_HORIZONTAL_SCROLL    = NK_FLAG(8),$/;"	e	enum:nk_edit_flags
NK_EDIT_READ_ONLY	nuklear/nuklear.h	/^    NK_EDIT_READ_ONLY               = NK_FLAG(0),$/;"	e	enum:nk_edit_flags
NK_EDIT_SELECTABLE	nuklear/nuklear.h	/^    NK_EDIT_SELECTABLE              = NK_FLAG(5),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIG_ENTER	nuklear/nuklear.h	/^    NK_EDIT_SIG_ENTER               = NK_FLAG(2),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIMPLE	nuklear/nuklear.h	/^    NK_EDIT_SIMPLE  = NK_EDIT_ALWAYS_INSERT_MODE,$/;"	e	enum:nk_edit_types
NK_FILE_LINE	nuklear/nuklear.h	/^#define NK_FILE_LINE /;"	d
NK_FILTER_FLOAT	nuklear/nuklear.h	/^    NK_FILTER_FLOAT$/;"	e	enum:nk_property_filter
NK_FILTER_INT	nuklear/nuklear.h	/^    NK_FILTER_INT,$/;"	e	enum:nk_property_filter
NK_FIXED	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	e	enum:nk_modify
NK_FLAG	nuklear/nuklear.h	/^#define NK_FLAG(/;"	d
NK_FLOAT_PRECISION	nuklear/nuklear.h	/^NK_GLOBAL const float NK_FLOAT_PRECISION = 0.00000000000001f;$/;"	v
NK_FONT_ATLAS_ALPHA8	nuklear/nuklear.h	/^    NK_FONT_ATLAS_ALPHA8,$/;"	e	enum:nk_font_atlas_format
NK_FONT_ATLAS_RGBA32	nuklear/nuklear.h	/^    NK_FONT_ATLAS_RGBA32$/;"	e	enum:nk_font_atlas_format
NK_GLFW3_DEFAULT	nuklear/nuklear_glfw_gl3.h	/^    NK_GLFW3_DEFAULT=0,$/;"	e	enum:nk_glfw_init_state
NK_GLFW3_INSTALL_CALLBACKS	nuklear/nuklear_glfw_gl3.h	/^    NK_GLFW3_INSTALL_CALLBACKS$/;"	e	enum:nk_glfw_init_state
NK_GLFW_GL3_H_	nuklear/nuklear_glfw_gl3.h	/^#define NK_GLFW_GL3_H_$/;"	d
NK_GLFW_GL3_IMPLEMENTATION	main.cpp	/^#define NK_GLFW_GL3_IMPLEMENTATION$/;"	d	file:
NK_GLFW_GL3_IMPLEMENTATION	nuklear/backup.c	/^#define NK_GLFW_GL3_IMPLEMENTATION$/;"	d	file:
NK_GLFW_GL3_IMPLEMENTATION	nuklear/main.c	/^#define NK_GLFW_GL3_IMPLEMENTATION$/;"	d	file:
NK_GLFW_TEXT_MAX	nuklear/nuklear_glfw_gl3.h	/^#define NK_GLFW_TEXT_MAX /;"	d
NK_GLOBAL	nuklear/nuklear.h	/^#define NK_GLOBAL /;"	d
NK_HEADER_LEFT	nuklear/nuklear.h	/^    NK_HEADER_LEFT,$/;"	e	enum:nk_style_header_align
NK_HEADER_RIGHT	nuklear/nuklear.h	/^    NK_HEADER_RIGHT$/;"	e	enum:nk_style_header_align
NK_HIDDEN	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	e	enum:nk_show_states
NK_HORIZONTAL	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
NK_IMPLEMENTATION	main.cpp	/^#define NK_IMPLEMENTATION$/;"	d	file:
NK_IMPLEMENTATION	nuklear/backup.c	/^#define NK_IMPLEMENTATION$/;"	d	file:
NK_IMPLEMENTATION	nuklear/main.c	/^#define NK_IMPLEMENTATION$/;"	d	file:
NK_INBOX	nuklear/nuklear.h	/^#define NK_INBOX(/;"	d
NK_INCLUDE_DEFAULT_ALLOCATOR	main.cpp	/^#define NK_INCLUDE_DEFAULT_ALLOCATOR$/;"	d	file:
NK_INCLUDE_DEFAULT_ALLOCATOR	nuklear/backup.c	/^#define NK_INCLUDE_DEFAULT_ALLOCATOR$/;"	d	file:
NK_INCLUDE_DEFAULT_ALLOCATOR	nuklear/main.c	/^#define NK_INCLUDE_DEFAULT_ALLOCATOR$/;"	d	file:
NK_INCLUDE_DEFAULT_FONT	main.cpp	/^#define NK_INCLUDE_DEFAULT_FONT$/;"	d	file:
NK_INCLUDE_DEFAULT_FONT	nuklear/backup.c	/^#define NK_INCLUDE_DEFAULT_FONT$/;"	d	file:
NK_INCLUDE_DEFAULT_FONT	nuklear/main.c	/^#define NK_INCLUDE_DEFAULT_FONT$/;"	d	file:
NK_INCLUDE_FIXED_TYPES	main.cpp	/^#define NK_INCLUDE_FIXED_TYPES$/;"	d	file:
NK_INCLUDE_FIXED_TYPES	nuklear/backup.c	/^#define NK_INCLUDE_FIXED_TYPES$/;"	d	file:
NK_INCLUDE_FIXED_TYPES	nuklear/main.c	/^#define NK_INCLUDE_FIXED_TYPES$/;"	d	file:
NK_INCLUDE_FONT_BAKING	main.cpp	/^#define NK_INCLUDE_FONT_BAKING$/;"	d	file:
NK_INCLUDE_FONT_BAKING	nuklear/backup.c	/^#define NK_INCLUDE_FONT_BAKING$/;"	d	file:
NK_INCLUDE_FONT_BAKING	nuklear/main.c	/^#define NK_INCLUDE_FONT_BAKING$/;"	d	file:
NK_INCLUDE_STANDARD_IO	main.cpp	/^#define NK_INCLUDE_STANDARD_IO$/;"	d	file:
NK_INCLUDE_STANDARD_IO	nuklear/backup.c	/^#define NK_INCLUDE_STANDARD_IO$/;"	d	file:
NK_INCLUDE_STANDARD_IO	nuklear/main.c	/^#define NK_INCLUDE_STANDARD_IO$/;"	d	file:
NK_INCLUDE_VERTEX_BUFFER_OUTPUT	main.cpp	/^#define NK_INCLUDE_VERTEX_BUFFER_OUTPUT$/;"	d	file:
NK_INCLUDE_VERTEX_BUFFER_OUTPUT	nuklear/backup.c	/^#define NK_INCLUDE_VERTEX_BUFFER_OUTPUT$/;"	d	file:
NK_INCLUDE_VERTEX_BUFFER_OUTPUT	nuklear/main.c	/^#define NK_INCLUDE_VERTEX_BUFFER_OUTPUT$/;"	d	file:
NK_INPUT_MAX	nuklear/nuklear.h	/^#define NK_INPUT_MAX /;"	d
NK_INTERN	nuklear/nuklear.h	/^#define NK_INTERN /;"	d
NK_INTERSECT	nuklear/nuklear.h	/^#define NK_INTERSECT(/;"	d
NK_KEY_BACKSPACE	nuklear/nuklear.h	/^    NK_KEY_BACKSPACE,$/;"	e	enum:nk_keys
NK_KEY_COPY	nuklear/nuklear.h	/^    NK_KEY_COPY,$/;"	e	enum:nk_keys
NK_KEY_CTRL	nuklear/nuklear.h	/^    NK_KEY_CTRL,$/;"	e	enum:nk_keys
NK_KEY_CUT	nuklear/nuklear.h	/^    NK_KEY_CUT,$/;"	e	enum:nk_keys
NK_KEY_DEL	nuklear/nuklear.h	/^    NK_KEY_DEL,$/;"	e	enum:nk_keys
NK_KEY_DOWN	nuklear/nuklear.h	/^    NK_KEY_DOWN,$/;"	e	enum:nk_keys
NK_KEY_ENTER	nuklear/nuklear.h	/^    NK_KEY_ENTER,$/;"	e	enum:nk_keys
NK_KEY_LEFT	nuklear/nuklear.h	/^    NK_KEY_LEFT,$/;"	e	enum:nk_keys
NK_KEY_MAX	nuklear/nuklear.h	/^    NK_KEY_MAX$/;"	e	enum:nk_keys
NK_KEY_NONE	nuklear/nuklear.h	/^    NK_KEY_NONE,$/;"	e	enum:nk_keys
NK_KEY_PASTE	nuklear/nuklear.h	/^    NK_KEY_PASTE,$/;"	e	enum:nk_keys
NK_KEY_RIGHT	nuklear/nuklear.h	/^    NK_KEY_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_DOWN	nuklear/nuklear.h	/^    NK_KEY_SCROLL_DOWN,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_END	nuklear/nuklear.h	/^    NK_KEY_SCROLL_END,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_START	nuklear/nuklear.h	/^    NK_KEY_SCROLL_START,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_UP	nuklear/nuklear.h	/^    NK_KEY_SCROLL_UP,$/;"	e	enum:nk_keys
NK_KEY_SHIFT	nuklear/nuklear.h	/^    NK_KEY_SHIFT,$/;"	e	enum:nk_keys
NK_KEY_TAB	nuklear/nuklear.h	/^    NK_KEY_TAB,$/;"	e	enum:nk_keys
NK_KEY_TEXT_END	nuklear/nuklear.h	/^    NK_KEY_TEXT_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_INSERT_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_INSERT_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_END	nuklear/nuklear.h	/^    NK_KEY_TEXT_LINE_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_START	nuklear/nuklear.h	/^    NK_KEY_TEXT_LINE_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REDO	nuklear/nuklear.h	/^    NK_KEY_TEXT_REDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REPLACE_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_REPLACE_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_RESET_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_RESET_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_START	nuklear/nuklear.h	/^    NK_KEY_TEXT_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_UNDO	nuklear/nuklear.h	/^    NK_KEY_TEXT_UNDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_LEFT	nuklear/nuklear.h	/^    NK_KEY_TEXT_WORD_LEFT,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_RIGHT	nuklear/nuklear.h	/^    NK_KEY_TEXT_WORD_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_UP	nuklear/nuklear.h	/^    NK_KEY_UP,$/;"	e	enum:nk_keys
NK_LAYOUT_DYNAMIC	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC /;"	d
NK_LAYOUT_DYNAMIC_FIXED	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_FIXED /;"	d
NK_LAYOUT_DYNAMIC_FREE	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_FREE /;"	d
NK_LAYOUT_DYNAMIC_ROW	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_ROW /;"	d
NK_LAYOUT_STATIC	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC /;"	d
NK_LAYOUT_STATIC_FIXED	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_FIXED /;"	d
NK_LAYOUT_STATIC_FREE	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_FREE /;"	d
NK_LAYOUT_STATIC_ROW	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_ROW /;"	d
NK_LEADING_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_LEADING_LETTER_PENALTY /;"	d
NK_LEFT	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_LEN	nuklear/nuklear.h	/^#define NK_LEN(/;"	d
NK_LINE_STR	nuklear/nuklear.h	/^#define NK_LINE_STR(/;"	d
NK_MAX	nuklear/nuklear.h	/^#define NK_MAX(/;"	d
NK_MAXIMIZED	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MAX_FLOAT_PRECISION	nuklear/nuklear.h	/^#define NK_MAX_FLOAT_PRECISION /;"	d
NK_MAX_LEADING_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_MAX_LEADING_LETTER_PENALTY /;"	d
NK_MAX_NUMBER_BUFFER	nuklear/nuklear.h	/^#define NK_MAX_NUMBER_BUFFER /;"	d
NK_MAX_SORT_STACK	nuklear/nuklear.h	/^    #define NK_MAX_SORT_STACK /;"	d
NK_MAX_SORT_STACK	nuklear/nuklear.h	/^    #undef NK_MAX_SORT_STACK$/;"	d
NK_MEMCPY	nuklear/nuklear.h	/^#define NK_MEMCPY /;"	d
NK_MEMSET	nuklear/nuklear.h	/^#define NK_MEMSET /;"	d
NK_MIN	nuklear/nuklear.h	/^#define NK_MIN(/;"	d
NK_MINIMIZED	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MODIFIABLE	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	e	enum:nk_modify
NK_NUKLEAR_H_	nuklear/nuklear.h	/^#define NK_NUKLEAR_H_$/;"	d
NK_OFFSETOF	nuklear/nuklear.h	/^#define NK_OFFSETOF(/;"	d
NK_PI	nuklear/nuklear.h	/^#define NK_PI /;"	d
NK_POOL_DEFAULT_CAPACITY	nuklear/nuklear.h	/^#define NK_POOL_DEFAULT_CAPACITY /;"	d
NK_POPUP_DYNAMIC	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
NK_POPUP_STATIC	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
NK_PROPERTY_DEFAULT	nuklear/nuklear.h	/^    NK_PROPERTY_DEFAULT,$/;"	e	enum:nk_property_status
NK_PROPERTY_DRAG	nuklear/nuklear.h	/^    NK_PROPERTY_DRAG$/;"	e	enum:nk_property_status
NK_PROPERTY_EDIT	nuklear/nuklear.h	/^    NK_PROPERTY_EDIT,$/;"	e	enum:nk_property_status
NK_PTR_TO_UINT	nuklear/nuklear.h	/^# define NK_PTR_TO_UINT(/;"	d
NK_RGB	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
NK_RGBA	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
NK_RIGHT	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_ROTL	nuklear/nuklear.h	/^    #define NK_ROTL(/;"	d
NK_ROTL	nuklear/nuklear.h	/^    #undef NK_ROTL$/;"	d
NK_RP_HEURISTIC	nuklear/nuklear.h	/^enum NK_RP_HEURISTIC {$/;"	g
NK_RP_HEURISTIC_Skyline_BF_sortHeight	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_BL_sortHeight	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BL_sortHeight = NK_RP_HEURISTIC_Skyline_default,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_default	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_default=0,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_INIT_STATE	nuklear/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	g
NK_RP__INIT_skyline	nuklear/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	e	enum:NK_RP_INIT_STATE
NK_RP__MAXVAL	nuklear/nuklear.h	/^#define NK_RP__MAXVAL /;"	d
NK_SATURATE	nuklear/nuklear.h	/^#define NK_SATURATE(/;"	d
NK_SEPARATOR_BONUS	nuklear/nuklear.h	/^    #define NK_SEPARATOR_BONUS /;"	d
NK_SHADER_VERSION	nuklear/nuklear_glfw_gl3.h	/^  #define NK_SHADER_VERSION /;"	d
NK_SHOWN	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	e	enum:nk_show_states
NK_SIN	nuklear/nuklear.h	/^#define NK_SIN /;"	d
NK_SQRT	nuklear/nuklear.h	/^#define NK_SQRT /;"	d
NK_STATIC	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_STOP_ON_NEW_LINE	nuklear/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon6
NK_STORAGE	nuklear/nuklear.h	/^#define NK_STORAGE /;"	d
NK_STRINGIFY	nuklear/nuklear.h	/^#define NK_STRINGIFY(/;"	d
NK_STROKE_CLOSED	nuklear/nuklear.h	/^    NK_STROKE_CLOSED = nk_true$/;"	e	enum:nk_draw_list_stroke
NK_STROKE_OPEN	nuklear/nuklear.h	/^    NK_STROKE_OPEN = nk_false,$/;"	e	enum:nk_draw_list_stroke
NK_STYLE_ITEM_COLOR	nuklear/nuklear.h	/^    NK_STYLE_ITEM_COLOR,$/;"	e	enum:nk_style_item_type
NK_STYLE_ITEM_IMAGE	nuklear/nuklear.h	/^    NK_STYLE_ITEM_IMAGE$/;"	e	enum:nk_style_item_type
NK_SYMBOL_CIRCLE	nuklear/nuklear.h	/^    NK_SYMBOL_CIRCLE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_CIRCLE_FILLED	nuklear/nuklear.h	/^    NK_SYMBOL_CIRCLE_FILLED,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MAX	nuklear/nuklear.h	/^    NK_SYMBOL_MAX$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MINUS	nuklear/nuklear.h	/^    NK_SYMBOL_MINUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_NONE	nuklear/nuklear.h	/^    NK_SYMBOL_NONE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_PLUS	nuklear/nuklear.h	/^    NK_SYMBOL_PLUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT	nuklear/nuklear.h	/^    NK_SYMBOL_RECT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT_FILLED	nuklear/nuklear.h	/^    NK_SYMBOL_RECT_FILLED,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_DOWN	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_DOWN,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_LEFT	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_LEFT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_RIGHT	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_RIGHT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_UP	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_UP,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_UNDERSCORE	nuklear/nuklear.h	/^    NK_SYMBOL_UNDERSCORE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_X	nuklear/nuklear.h	/^    NK_SYMBOL_X,$/;"	e	enum:nk_symbol_type
NK_TEXTEDIT_UNDOCHARCOUNT	nuklear/nuklear.h	/^#define NK_TEXTEDIT_UNDOCHARCOUNT /;"	d
NK_TEXTEDIT_UNDOSTATECOUNT	nuklear/nuklear.h	/^#define NK_TEXTEDIT_UNDOSTATECOUNT /;"	d
NK_TEXT_ALIGN_BOTTOM	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_BOTTOM      = 0x20$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_CENTERED	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_CENTERED    = 0x02,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_LEFT	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_LEFT        = 0x01,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_MIDDLE	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_MIDDLE      = 0x10,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_RIGHT	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_RIGHT       = 0x04,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_TOP	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_TOP         = 0x08,$/;"	e	enum:nk_text_align
NK_TEXT_CENTERED	nuklear/nuklear.h	/^    NK_TEXT_CENTERED    = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_CENTERED,$/;"	e	enum:nk_text_alignment
NK_TEXT_EDIT_MODE_INSERT	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_INSERT,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_REPLACE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_REPLACE$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_VIEW	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_VIEW,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MULTI_LINE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MULTI_LINE$/;"	e	enum:nk_text_edit_type
NK_TEXT_EDIT_SINGLE_LINE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_SINGLE_LINE,$/;"	e	enum:nk_text_edit_type
NK_TEXT_HAS_SELECTION	nuklear/nuklear.h	/^#define NK_TEXT_HAS_SELECTION(/;"	d
NK_TEXT_LEFT	nuklear/nuklear.h	/^    NK_TEXT_LEFT        = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_LEFT,$/;"	e	enum:nk_text_alignment
NK_TEXT_RIGHT	nuklear/nuklear.h	/^    NK_TEXT_RIGHT       = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_RIGHT$/;"	e	enum:nk_text_alignment
NK_TLOOP	nuklear/nuklear.h	/^    #define NK_TLOOP(/;"	d
NK_TLOOP	nuklear/nuklear.h	/^    #undef NK_TLOOP$/;"	d
NK_TLOOP1	nuklear/nuklear.h	/^    #define NK_TLOOP1(/;"	d
NK_TLOOP1	nuklear/nuklear.h	/^    #undef NK_TLOOP1$/;"	d
NK_TOGGLE_CHECK	nuklear/nuklear.h	/^    NK_TOGGLE_CHECK,$/;"	e	enum:nk_toggle_type
NK_TOGGLE_OPTION	nuklear/nuklear.h	/^    NK_TOGGLE_OPTION$/;"	e	enum:nk_toggle_type
NK_TO_HEX	nuklear/nuklear.h	/^    #define NK_TO_HEX(/;"	d
NK_TO_HEX	nuklear/nuklear.h	/^    #undef NK_TO_HEX$/;"	d
NK_TREE_NODE	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
NK_TREE_TAB	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
NK_TT_MACSTYLE_BOLD	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_BOLD /;"	d
NK_TT_MACSTYLE_DONTCARE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_DONTCARE /;"	d
NK_TT_MACSTYLE_ITALIC	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_ITALIC /;"	d
NK_TT_MACSTYLE_NONE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_NONE /;"	d
NK_TT_MACSTYLE_UNDERSCORE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_UNDERSCORE /;"	d
NK_TT_MAC_EID_ARABIC	nuklear/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon11
NK_TT_MAC_EID_CHINESE_TRAD	nuklear/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon11
NK_TT_MAC_EID_GREEK	nuklear/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon11
NK_TT_MAC_EID_HEBREW	nuklear/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon11
NK_TT_MAC_EID_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon11
NK_TT_MAC_EID_KOREAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon11
NK_TT_MAC_EID_ROMAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon11
NK_TT_MAC_EID_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon11
NK_TT_MAC_LANG_ARABIC	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_CHINESE_SIMPLIFIED	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_CHINESE_TRAD	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon13
NK_TT_MAC_LANG_DUTCH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_ENGLISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_FRENCH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_GERMAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_HEBREW	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_ITALIAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon13
NK_TT_MAC_LANG_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_KOREAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_SPANISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_SWEDISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon13
NK_TT_MAX_OVERSAMPLE	nuklear/nuklear.h	/^#define NK_TT_MAX_OVERSAMPLE /;"	d
NK_TT_MS_EID_SHIFTJIS	nuklear/nuklear.h	/^   NK_TT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon10
NK_TT_MS_EID_SYMBOL	nuklear/nuklear.h	/^   NK_TT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon10
NK_TT_MS_EID_UNICODE_BMP	nuklear/nuklear.h	/^   NK_TT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon10
NK_TT_MS_EID_UNICODE_FULL	nuklear/nuklear.h	/^   NK_TT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon10
NK_TT_MS_LANG_CHINESE	nuklear/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon12
NK_TT_MS_LANG_DUTCH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon12
NK_TT_MS_LANG_ENGLISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon12
NK_TT_MS_LANG_FRENCH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon12
NK_TT_MS_LANG_GERMAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon12
NK_TT_MS_LANG_HEBREW	nuklear/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon12
NK_TT_MS_LANG_ITALIAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon12
NK_TT_MS_LANG_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon12
NK_TT_MS_LANG_KOREAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon12
NK_TT_MS_LANG_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon12
NK_TT_MS_LANG_SPANISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon12
NK_TT_MS_LANG_SWEDISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon12
NK_TT_PLATFORM_ID_ISO	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_MAC	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_MICROSOFT	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_UNICODE	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon8
NK_TT_UNICODE_EID_ISO_10646	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_1_0	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_1_1	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_2_0_BMP	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_2_0_FULL	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon9
NK_TT__COMPARE	nuklear/nuklear.h	/^#define NK_TT__COMPARE(/;"	d
NK_TT__OVER_MASK	nuklear/nuklear.h	/^#define NK_TT__OVER_MASK /;"	d
NK_TT_vcurve	nuklear/nuklear.h	/^  NK_TT_vcurve$/;"	e	enum:__anon7
NK_TT_vline	nuklear/nuklear.h	/^  NK_TT_vline,$/;"	e	enum:__anon7
NK_TT_vmove	nuklear/nuklear.h	/^  NK_TT_vmove=1,$/;"	e	enum:__anon7
NK_UINT_TO_PTR	nuklear/nuklear.h	/^# define NK_UINT_TO_PTR(/;"	d
NK_UNDEFINED	nuklear/nuklear.h	/^#define NK_UNDEFINED /;"	d
NK_UNMATCHED_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_UNMATCHED_LETTER_PENALTY /;"	d
NK_UNUSED	nuklear/nuklear.h	/^#define NK_UNUSED(/;"	d
NK_UP	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_UTF_INVALID	nuklear/nuklear.h	/^#define NK_UTF_INVALID /;"	d
NK_UTF_SIZE	nuklear/nuklear.h	/^#define NK_UTF_SIZE /;"	d
NK_VALUE_PAGE_CAPACITY	nuklear/nuklear.h	/^#define NK_VALUE_PAGE_CAPACITY /;"	d
NK_VERTICAL	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
NK_WIDGET_INVALID	nuklear/nuklear.h	/^    NK_WIDGET_INVALID, \/* The widget cannot be seen and is completely out of view *\/$/;"	e	enum:nk_widget_layout_states
NK_WIDGET_ROM	nuklear/nuklear.h	/^    NK_WIDGET_ROM \/* The widget is partially visible and cannot be updated *\/$/;"	e	enum:nk_widget_layout_states
NK_WIDGET_STATE_ACTIVE	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ACTIVE      = NK_WIDGET_STATE_ACTIVED|NK_WIDGET_STATE_MODIFIED \/* widget is currently activated *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ACTIVED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ACTIVED     = NK_FLAG(5),\/* widget is currently activated *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ENTERED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ENTERED     = NK_FLAG(3), \/* widget has been hovered on the current frame *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVER	nuklear/nuklear.h	/^    NK_WIDGET_STATE_HOVER       = NK_FLAG(4), \/* widget is being hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVERED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_HOVERED     = NK_WIDGET_STATE_HOVER|NK_WIDGET_STATE_MODIFIED, \/* widget is being hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_INACTIVE	nuklear/nuklear.h	/^    NK_WIDGET_STATE_INACTIVE    = NK_FLAG(2), \/* widget is neither active nor hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_LEFT	nuklear/nuklear.h	/^    NK_WIDGET_STATE_LEFT        = NK_FLAG(6), \/* widget is from this frame on not hovered anymore *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_MODIFIED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_MODIFIED    = NK_FLAG(1),$/;"	e	enum:nk_widget_states
NK_WIDGET_VALID	nuklear/nuklear.h	/^    NK_WIDGET_VALID, \/* The widget is completely inside the window and can be updated and drawn *\/$/;"	e	enum:nk_widget_layout_states
NK_WINDOW_BORDER	nuklear/nuklear.h	/^    NK_WINDOW_BORDER        = NK_FLAG(0), \/* Draws a border around the window to visually separate the window * from the background *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_BORDER_HEADER	nuklear/nuklear.h	/^    NK_WINDOW_BORDER_HEADER = NK_FLAG(1), \/* Draws a border between window header and body *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_CLOSABLE	nuklear/nuklear.h	/^    NK_WINDOW_CLOSABLE      = NK_FLAG(4), \/* adds a closable icon into the header *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_COMBO	nuklear/nuklear.h	/^    NK_WINDOW_COMBO         = NK_FLAG(18),$/;"	e	enum:nk_window_flags
NK_WINDOW_CONTEXTUAL	nuklear/nuklear.h	/^    NK_WINDOW_CONTEXTUAL    = NK_FLAG(17),$/;"	e	enum:nk_window_flags
NK_WINDOW_DYNAMIC	nuklear/nuklear.h	/^    NK_WINDOW_DYNAMIC       = NK_FLAG(6), \/* special window type growing up in height while being filled to a * certain maximum height *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_GROUP	nuklear/nuklear.h	/^    NK_WINDOW_GROUP         = NK_FLAG(14),$/;"	e	enum:nk_window_flags
NK_WINDOW_HIDDEN	nuklear/nuklear.h	/^    NK_WINDOW_HIDDEN        = NK_FLAG(11),$/;"	e	enum:nk_window_flags
NK_WINDOW_MENU	nuklear/nuklear.h	/^    NK_WINDOW_MENU          = NK_FLAG(19),$/;"	e	enum:nk_window_flags
NK_WINDOW_MINIMIZABLE	nuklear/nuklear.h	/^    NK_WINDOW_MINIMIZABLE   = NK_FLAG(5), \/* adds a minimize icon into the header *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_MINIMIZED	nuklear/nuklear.h	/^    NK_WINDOW_MINIMIZED     = NK_FLAG(12),$/;"	e	enum:nk_window_flags
NK_WINDOW_MOVABLE	nuklear/nuklear.h	/^    NK_WINDOW_MOVABLE       = NK_FLAG(2), \/* The movable flag indicates that a window can be moved by user input or * by dragging the window header *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_NONBLOCK	nuklear/nuklear.h	/^    NK_WINDOW_NONBLOCK      = NK_FLAG(16),$/;"	e	enum:nk_window_flags
NK_WINDOW_NO_SCROLLBAR	nuklear/nuklear.h	/^    NK_WINDOW_NO_SCROLLBAR  = NK_FLAG(7), \/* Removes the scrollbar from the window *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_POPUP	nuklear/nuklear.h	/^    NK_WINDOW_POPUP         = NK_FLAG(15),$/;"	e	enum:nk_window_flags
NK_WINDOW_PRIVATE	nuklear/nuklear.h	/^    NK_WINDOW_PRIVATE       = NK_FLAG(9),$/;"	e	enum:nk_window_flags
NK_WINDOW_REMOVE_ROM	nuklear/nuklear.h	/^    NK_WINDOW_REMOVE_ROM    = NK_FLAG(21)$/;"	e	enum:nk_window_flags
NK_WINDOW_ROM	nuklear/nuklear.h	/^    NK_WINDOW_ROM           = NK_FLAG(10),$/;"	e	enum:nk_window_flags
NK_WINDOW_SCALABLE	nuklear/nuklear.h	/^    NK_WINDOW_SCALABLE      = NK_FLAG(3), \/* The scalable flag indicates that a window can be scaled by user input * by dragging a scaler icon at the button of the window *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_SUB	nuklear/nuklear.h	/^    NK_WINDOW_SUB           = NK_FLAG(13),$/;"	e	enum:nk_window_flags
NK_WINDOW_TITLE	nuklear/nuklear.h	/^    NK_WINDOW_TITLE         = NK_FLAG(8) \/* Forces a header at the top at the window showing the title *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_TOOLTIP	nuklear/nuklear.h	/^    NK_WINDOW_TOOLTIP       = NK_FLAG(20),$/;"	e	enum:nk_window_flags
OnClick	main.cpp	/^void OnClick(GLFWwindow *window, int button, int action, int mods)$/;"	f
OnError	main.cpp	/^void OnError(int errorCode, const char *msg)$/;"	f
OnScroll	main.cpp	/^void OnScroll(GLFWwindow *window, double deltaX, double deltaY)$/;"	f
PEC	main.cpp	/^void PEC()$/;"	f
PMLInit	main.cpp	/^void PMLInit()$/;"	f
PNG_TYPE	stb_image.h	/^#define PNG_TYPE(/;"	d
ParamInit	main.cpp	/^void ParamInit()$/;"	f
PrintInfo	main.cpp	/^void PrintInfo()$/;"	f
Program	Program.cpp	/^Program::Program(const std::vector<Shader>& shaders) :$/;"	f	class:Program
Program	Program.h	/^    class Program { $/;"	c	namespace:tdogl
RGB2Grayscale	Bitmap.cpp	/^static void RGB2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:
RGB2GrayscaleAlpha	Bitmap.cpp	/^static void RGB2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:
RGB2RGBA	Bitmap.cpp	/^static void RGB2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:
RGBA2Grayscale	Bitmap.cpp	/^static void RGBA2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:
RGBA2GrayscaleAlpha	Bitmap.cpp	/^static void RGBA2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:
RGBA2RGB	Bitmap.cpp	/^static void RGBA2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:
RectsOverlap	Bitmap.cpp	/^inline bool RectsOverlap(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height){$/;"	f
Render	main.cpp	/^void Render()$/;"	f
RunCPUKernel	main.cpp	/^void RunCPUKernel()$/;"	f
SCAN_header	stb_image.h	/^   SCAN_header$/;"	e	enum:__anon17
SCAN_load	stb_image.h	/^   SCAN_load=0,$/;"	e	enum:__anon17
SCAN_type	stb_image.h	/^   SCAN_type,$/;"	e	enum:__anon17
STBIDEF	stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	stb_image.h	/^#define STBI_ASSERT(/;"	d
STBI_FAILURE_USERMSG	Bitmap.cpp	/^#define STBI_FAILURE_USERMSG$/;"	d	file:
STBI_HAS_LROTL	stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
STBI_NOTUSED	stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_VERSION	stb_image.h	/^#define STBI_VERSION /;"	d
STBI__BYTECAST	stb_image.h	/^#define STBI__BYTECAST(/;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon26
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon26
STBI__F_none	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon26
STBI__F_paeth	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon26
STBI__F_paeth_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon26
STBI__F_sub	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon26
STBI__F_up	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon26
STBI__HDR_BUFLEN	stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
STBI__IDCT_1D	stb_image.h	/^#define STBI__IDCT_1D(/;"	d
STBI__MARKER_none	stb_image.h	/^#define STBI__MARKER_none /;"	d
STBI__RESTART	stb_image.h	/^#define STBI__RESTART(/;"	d
STBI__ZFAST_BITS	stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon14
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon14
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon14
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon14
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon14
STB_IMAGE_IMPLEMENTATION	Bitmap.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
Shader	Shader.cpp	/^Shader::Shader(const Shader& other) :$/;"	f	class:Shader
Shader	Shader.cpp	/^Shader::Shader(const std::string& shaderCode, GLenum shaderType) :$/;"	f	class:Shader
Shader	Shader.h	/^    class Shader { $/;"	c	namespace:tdogl
T	main.cpp	/^float T = 0.0;$/;"	v
THEME_BLACK	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	e	enum:theme	file:
THEME_BLUE	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	e	enum:theme	file:
THEME_DARK	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	e	enum:theme	file:
THEME_RED	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	e	enum:theme	file:
THEME_WHITE	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	e	enum:theme	file:
Texture	Texture.cpp	/^Texture::Texture(const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture
Texture	Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
TextureFormatForBitmapFormat	Texture.cpp	/^static GLenum TextureFormatForBitmapFormat(Bitmap::Format format)$/;"	f	file:
TextureInit	main.cpp	/^void TextureInit()$/;"	f
UNUSED	nuklear/backup.c	/^#define UNUSED(/;"	d	file:
UNUSED	nuklear/main.c	/^#define UNUSED(/;"	d	file:
Update	main.cpp	/^void Update(float secondsElapsed)$/;"	f
WINDOW_HEIGHT	nuklear/backup.c	/^#define WINDOW_HEIGHT /;"	d	file:
WINDOW_HEIGHT	nuklear/main.c	/^#define WINDOW_HEIGHT /;"	d	file:
WINDOW_WIDTH	nuklear/backup.c	/^#define WINDOW_WIDTH /;"	d	file:
WINDOW_WIDTH	nuklear/main.c	/^#define WINDOW_WIDTH /;"	d	file:
_TDOGL_PROGRAM_ATTRIB_N_UNIFORM_SETTERS	Program.h	/^#define _TDOGL_PROGRAM_ATTRIB_N_UNIFORM_SETTERS(/;"	d
_USE_MATH_DEFINES	Camera.cpp	/^#define _USE_MATH_DEFINES$/;"	d	file:
_farPlane	Camera.h	/^        float _farPlane;$/;"	m	class:tdogl::Camera
_fieldOfView	Camera.h	/^        float _fieldOfView;$/;"	m	class:tdogl::Camera
_format	Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap
_height	Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap
_horizontalAngle	Camera.h	/^        float _horizontalAngle;$/;"	m	class:tdogl::Camera
_nearPlane	Camera.h	/^        float _nearPlane;$/;"	m	class:tdogl::Camera
_object	Program.h	/^        GLuint _object;$/;"	m	class:tdogl::Program
_object	Shader.h	/^        GLuint _object;$/;"	m	class:tdogl::Shader
_object	Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture
_originalHeight	Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture
_originalWidth	Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture
_pixels	Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap
_position	Camera.h	/^        glm::vec3 _position;$/;"	m	class:tdogl::Camera
_refCount	Shader.h	/^        unsigned* _refCount;$/;"	m	class:tdogl::Shader
_release	Shader.cpp	/^void Shader::_release() {$/;"	f	class:Shader
_retain	Shader.cpp	/^void Shader::_retain() {$/;"	f	class:Shader
_set	Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap
_verticalAngle	Camera.h	/^        float _verticalAngle;$/;"	m	class:tdogl::Camera
_viewportAspectRatio	Camera.h	/^        float _viewportAspectRatio;$/;"	m	class:tdogl::Camera
_width	Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap
a	nuklear/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc
a	nuklear/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc_filled
a	nuklear/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
a	nuklear/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
a	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
active	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state
active	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_buffer_marker
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_buffer
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_state
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
active	nuklear/nuklear.h	/^    struct nk_window *active;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
active	nuklear/nuklear.h	/^    unsigned char active;$/;"	m	struct:nk_text_edit
active_con	nuklear/nuklear.h	/^    unsigned active_con;$/;"	m	struct:nk_popup_state
active_head	nuklear/nuklear.h	/^    struct nk_rp_node *active_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
align	nuklear/nuklear.h	/^    enum nk_style_header_align align;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_style_header_align
align	nuklear/nuklear.h	/^    int align;$/;"	m	struct:nk_rp_context
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_allocator
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_allocator
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_tt__hheap::nk_allocator
alloc	nuklear/nuklear.h	/^    void*(*alloc)(nk_handle, void *old, nk_size);$/;"	m	struct:nk_allocator
allocated	nuklear/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_buffer
allocated	nuklear/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_memory_status
alpha	main.cpp	/^float alpha = 0.5;$/;"	v
anim_dt	main.cpp	/^float anim_dt;$/;"	v
anim_time	main.cpp	/^float anim_time = 0.0f;$/;"	v
arc_segment_count	nuklear/nuklear.h	/^    unsigned int arc_segment_count; \/* number of segments used for arcs: default to 22 *\/$/;"	m	struct:nk_convert_config
array_of_unicode_codepoints	nuklear/nuklear.h	/^    int *array_of_unicode_codepoints;$/;"	m	struct:nk_tt_pack_range
ascent	nuklear/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font
at_x	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
at_y	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
atlas	nuklear/nuklear_glfw_gl3.h	/^    struct nk_font_atlas atlas;$/;"	m	struct:nk_glfw	typeref:struct:nk_glfw::nk_font_atlas
attrib	Program.cpp	/^GLint Program::attrib(const GLchar* attribName) const {$/;"	f	class:Program
attrib_col	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_col;$/;"	m	struct:nk_glfw_device
attrib_pos	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_pos;$/;"	m	struct:nk_glfw_device
attrib_uv	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_uv;$/;"	m	struct:nk_glfw_device
b	nuklear/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
b	nuklear/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
b	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_color
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_color
background	nuklear/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_style_item
background	nuklear/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_item
bar_active	nuklear/nuklear.h	/^    struct nk_color bar_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_filled	nuklear/nuklear.h	/^    struct nk_color bar_filled;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_height	nuklear/nuklear.h	/^    float bar_height;$/;"	m	struct:nk_style_slider
bar_hover	nuklear/nuklear.h	/^    struct nk_color bar_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_normal	nuklear/nuklear.h	/^    struct nk_color bar_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
base	nuklear/nuklear.h	/^    struct nk_buffer *base;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_command_buffer::nk_buffer
baseline_y_delta	nuklear/nuklear.h	/^   float baseline_y_delta;$/;"	m	struct:nk_text_edit_row
begin	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
begin	nuklear/nuklear.h	/^    nk_size begin;$/;"	m	struct:nk_popup_buffer
begin	nuklear/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
begin	nuklear/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_vec2i
begin	nuklear/nuklear.h	/^    struct nk_window *begin;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon29
bitmapFromFile	Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {    $/;"	f	class:Bitmap
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_panel
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_button
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_chart
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_combo
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_edit
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_progress
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_property
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_scrollbar
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_slider
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_tab
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_toggle
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_window
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
border_cursor	nuklear/nuklear.h	/^    float border_cursor;$/;"	m	struct:nk_style_scrollbar
bottom	nuklear/nuklear.h	/^    struct nk_color bottom;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
bounds	nuklear/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_rect
bounds	nuklear/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_rect
buffer	nuklear/nuklear.h	/^    char buffer[NK_MAX_NUMBER_BUFFER];$/;"	m	struct:nk_property_state
buffer	nuklear/nuklear.h	/^    struct nk_buffer *buffer;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
buffer	nuklear/nuklear.h	/^    struct nk_buffer buffer;$/;"	m	struct:nk_str	typeref:struct:nk_str::nk_buffer
buffer	nuklear/nuklear.h	/^    struct nk_command_buffer *buffer;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_command_buffer
buffer	nuklear/nuklear.h	/^    struct nk_command_buffer buffer;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_command_buffer
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon16
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon16
build	nuklear/nuklear.h	/^    int build;$/;"	m	struct:nk_context
build	nuklear/nuklear.h	/^    struct nk_font_bake_data *build;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_font_bake_data
button	nuklear/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
button	nuklear/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_button
button_behavior	nuklear/nuklear.h	/^    enum nk_button_behavior button_behavior;$/;"	m	struct:nk_context	typeref:enum:nk_context::nk_button_behavior
button_padding	nuklear/nuklear.h	/^    struct nk_vec2 button_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
buttons	nuklear/nuklear.h	/^    struct nk_mouse_button buttons[NK_BUTTON_MAX];$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_mouse_button
c	main.cpp	/^float c = 2.99792458e8;$/;"	v
c	nuklear/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
c	nuklear/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
c	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big
calls	nuklear/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_buffer
calls	nuklear/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_memory_status
cap	nuklear/nuklear.h	/^    nk_size cap;$/;"	m	struct:nk_pool
capacity	nuklear/nuklear.h	/^    unsigned capacity;$/;"	m	struct:nk_pool
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon27
char_storage	nuklear/nuklear.h	/^   short char_storage;$/;"	m	struct:nk_text_undo_record
chardata_for_range	nuklear/nuklear.h	/^    struct nk_tt_packedchar *chardata_for_range; \/* output *\/$/;"	m	struct:nk_tt_pack_range	typeref:struct:nk_tt_pack_range::nk_tt_packedchar
chart	nuklear/nuklear.h	/^    struct nk_chart chart;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_chart
chart	nuklear/nuklear.h	/^    struct nk_style_chart chart;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_chart
checkbox	nuklear/nuklear.h	/^    struct nk_style_toggle checkbox;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_toggle
circle_segment_count	nuklear/nuklear.h	/^    unsigned int circle_segment_count; \/* number of segments used for circles: default to 22 *\/$/;"	m	struct:nk_convert_config
circle_vtx	nuklear/nuklear.h	/^    struct nk_vec2 circle_vtx[12];$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_vec2
clicked	nuklear/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_key
clicked	nuklear/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_mouse_button
clicked_pos	nuklear/nuklear.h	/^    struct nk_vec2 clicked_pos;$/;"	m	struct:nk_mouse_button	typeref:struct:nk_mouse_button::nk_vec2
clip	nuklear/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_clipboard
clip	nuklear/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_clipboard
clip	nuklear/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_command_buffer::nk_rect
clip	nuklear/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_rect
clip_rect	nuklear/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_command	typeref:struct:nk_draw_command::nk_rect
clip_rect	nuklear/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_rect
close_button	nuklear/nuklear.h	/^    struct nk_style_button close_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_button
close_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type close_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
cmd_count	nuklear/nuklear.h	/^    unsigned int cmd_count;$/;"	m	struct:nk_draw_list
cmd_offset	nuklear/nuklear.h	/^    nk_size cmd_offset;$/;"	m	struct:nk_draw_list
cmds	nuklear/nuklear_glfw_gl3.h	/^    struct nk_buffer cmds;$/;"	m	struct:nk_glfw_device	typeref:struct:nk_glfw_device::nk_buffer
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon18
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon19
code_buffer	stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon19
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon23
codepoint	nuklear/nuklear.h	/^    nk_rune codepoint;$/;"	m	struct:nk_font_glyph
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon29
col	nuklear/nuklear.h	/^    nk_draw_vertex_color col;$/;"	m	struct:nk_draw_vertex
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc	typeref:struct:nk_command_arc::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_command_arc_filled::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle	typeref:struct:nk_command_circle::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_command_circle_filled::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect	typeref:struct:nk_command_rect::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_command_rect_filled::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_text	typeref:struct:nk_style_text::nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	union:nk_style_item_data	typeref:struct:nk_style_item_data::nk_color
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon29
columns	nuklear/nuklear.h	/^    int columns;$/;"	m	struct:nk_row_layout
combo	nuklear/nuklear.h	/^    struct nk_style_combo combo;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_combo
combo_border	nuklear/nuklear.h	/^    float combo_border;$/;"	m	struct:nk_style_window
combo_border_color	nuklear/nuklear.h	/^    struct nk_color combo_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
combo_count	nuklear/nuklear.h	/^    unsigned combo_count;$/;"	m	struct:nk_popup_state
con_count	nuklear/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state
con_old	nuklear/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state
config	nuklear/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_config
config	nuklear/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font_config
content_padding	nuklear/nuklear.h	/^    struct nk_vec2 content_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
contextual_border	nuklear/nuklear.h	/^    float contextual_border;$/;"	m	struct:nk_style_window
contextual_border_color	nuklear/nuklear.h	/^    struct nk_color contextual_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
contextual_button	nuklear/nuklear.h	/^    struct nk_style_button contextual_button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
coord_type	nuklear/nuklear.h	/^    enum nk_font_coord_type coord_type;$/;"	m	struct:nk_font_config	typeref:enum:nk_font_config::nk_font_coord_type
copy	nuklear/nuklear.h	/^    nk_copy_f copy;$/;"	m	struct:nk_clipboard
copyRectFromBitmap	Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap
count	nuklear/nuklear.h	/^    int count;$/;"	m	struct:nk_chart_slot
count	nuklear/nuklear.h	/^    unsigned int count;$/;"	m	struct:nk_context
ctrl	nuklear/nuklear.h	/^    struct nk_vec2i ctrl[2];$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
ctx	main.cpp	/^struct nk_context *ctx;$/;"	v	typeref:struct:nk_context
ctx	nuklear/nuklear_glfw_gl3.h	/^    struct nk_context ctx;$/;"	m	struct:nk_glfw	typeref:struct:nk_glfw::nk_context
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon29
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon29
current	nuklear/nuklear.h	/^    struct nk_window *current;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_edit_state
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_property_state
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_text_edit
cursor_active	nuklear/nuklear.h	/^    const struct nk_cursor *cursor_active;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_at_end_of_line	nuklear/nuklear.h	/^    unsigned char cursor_at_end_of_line;$/;"	m	struct:nk_text_edit
cursor_border	nuklear/nuklear.h	/^    float cursor_border;$/;"	m	struct:nk_style_progress
cursor_border_color	nuklear/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_color
cursor_border_color	nuklear/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_color
cursor_hover	nuklear/nuklear.h	/^    struct nk_color cursor_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
cursor_last	nuklear/nuklear.h	/^    struct nk_cursor *cursor_last;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursor_normal	nuklear/nuklear.h	/^    struct nk_color cursor_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
cursor_rounding	nuklear/nuklear.h	/^    float cursor_rounding;$/;"	m	struct:nk_style_progress
cursor_size	nuklear/nuklear.h	/^    float cursor_size;$/;"	m	struct:nk_style_edit
cursor_size	nuklear/nuklear.h	/^    struct nk_vec2 cursor_size;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
cursor_text_hover	nuklear/nuklear.h	/^    struct nk_color cursor_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_text_normal	nuklear/nuklear.h	/^    struct nk_color cursor_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursors	nuklear/nuklear.h	/^    const struct nk_cursor *cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursors	nuklear/nuklear.h	/^    struct nk_cursor cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_cursor
curve_segment_count	nuklear/nuklear.h	/^    unsigned int curve_segment_count; \/* number of segments used for curves: default to 22 *\/$/;"	m	struct:nk_convert_config
custom	nuklear/nuklear.h	/^    struct nk_recti custom;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_recti
cx	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc
cx	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled
cx	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
cy	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc
cy	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled
cy	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
data	nuklear/nuklear.h	/^    const unsigned char* data; \/* pointer to .ttf file *\/$/;"	m	struct:nk_tt_fontinfo
data	nuklear/nuklear.h	/^    union nk_page_data data;$/;"	m	struct:nk_page_element	typeref:union:nk_page_element::nk_page_data
data	nuklear/nuklear.h	/^    union nk_style_item_data data;$/;"	m	struct:nk_style_item	typeref:union:nk_style_item::nk_style_item_data
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon19::__anon20
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon19::__anon20
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_button
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_button
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_button
dec_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_style_scrollbar::nk_symbol_type
dec_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_style_slider::nk_symbol_type
decode_jpeg_header	stb_image.h	/^static int decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
decode_jpeg_image	stb_image.h	/^static int decode_jpeg_image(stbi__jpeg *j)$/;"	f
default_font	nuklear/nuklear.h	/^    struct nk_font *default_font;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font
delete_length	nuklear/nuklear.h	/^   short delete_length;$/;"	m	struct:nk_text_undo_record
delta	nuklear/nuklear.h	/^    struct nk_vec2 delta;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon18
delta_t	main.cpp	/^float delta_t;$/;"	v
delta_x	main.cpp	/^float delta_x;$/;"	v
delta_y	main.cpp	/^float delta_y;$/;"	v
dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon19
dequant2	stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon19
descent	nuklear/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font
diff	nuklear/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon5
direction	nuklear/nuklear.h	/^    float direction;$/;"	m	struct:nk_tt__active_edge
display_height	nuklear/nuklear_glfw_gl3.h	/^    int display_width, display_height;$/;"	m	struct:nk_glfw
display_width	nuklear/nuklear_glfw_gl3.h	/^    int display_width, display_height;$/;"	m	struct:nk_glfw
down	nuklear/nuklear.h	/^    int down;$/;"	m	struct:nk_key
down	nuklear/nuklear.h	/^    int down;$/;"	m	struct:nk_mouse_button
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle
draw_list	nuklear/nuklear.h	/^    struct nk_draw_list draw_list;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_draw_list
ebo	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device
ecmax	main.cpp	/^float ecmax;$/;"	v
edit	nuklear/nuklear.h	/^    struct nk_edit_state edit;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_edit_state
edit	nuklear/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_edit
edit	nuklear/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_edit
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon29
elem_count	nuklear/nuklear.h	/^    unsigned int elem_count;$/;"	m	struct:nk_draw_command
element_count	nuklear/nuklear.h	/^    unsigned int element_count;$/;"	m	struct:nk_draw_list
elements	nuklear/nuklear.h	/^    struct nk_buffer *elements;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
end	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
end	nuklear/nuklear.h	/^    nk_size end;$/;"	m	struct:nk_popup_buffer
end	nuklear/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
end	nuklear/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_vec2i
end	nuklear/nuklear.h	/^    struct nk_window *end;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon15
epsilon0	main.cpp	/^float epsilon0 = 8.854187e-12f;$/;"	v
epsilonMax	main.cpp	/^float epsilonMax;$/;"	v
epsilon_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
error_callback	nuklear/backup.c	/^static void error_callback(int e, const char *d)$/;"	f	file:
error_callback	nuklear/main.c	/^static void error_callback(int e, const char *d)$/;"	f	file:
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon25
extra	nuklear/nuklear.h	/^    struct nk_rp_node extra[2];$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
ey	nuklear/nuklear.h	/^    float ey;$/;"	m	struct:nk_tt__active_edge
fallback	nuklear/nuklear.h	/^    const struct nk_font_glyph *fallback;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_glyph
fallback_codepoint	nuklear/nuklear.h	/^    nk_rune fallback_codepoint;$/;"	m	struct:nk_font
fallback_glyph	nuklear/nuklear.h	/^    nk_rune fallback_glyph;$/;"	m	struct:nk_font_config
farPlane	Camera.cpp	/^float Camera::farPlane() const {$/;"	f	class:Camera
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon22
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon18
fb_scale	nuklear/nuklear_glfw_gl3.h	/^    struct nk_vec2 fb_scale;$/;"	m	struct:nk_glfw	typeref:struct:nk_glfw::nk_vec2
fdx	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
fdy	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
fieldOfView	Camera.cpp	/^float Camera::fieldOfView() const {$/;"	f	class:Camera
filled	nuklear/nuklear.h	/^    float filled;$/;"	m	struct:nk_row_layout
filter	nuklear/nuklear.h	/^    nk_filter filter;$/;"	m	struct:nk_text_edit
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon28
first_char	nuklear/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find
first_free	nuklear/nuklear.h	/^    void   *first_free;$/;"	m	struct:nk_tt__hheap
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
first_unicode_codepoint_in_range	nuklear/nuklear.h	/^    int first_unicode_codepoint_in_range;$/;"	m	struct:nk_tt_pack_range
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon22
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon22
fixed_background	nuklear/nuklear.h	/^    struct nk_style_item fixed_background;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_item
flag	main.cpp	/^bool flag = true;$/;"	v
flags	nuklear/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_panel
flags	nuklear/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_window
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon29
flipVertically	Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap
float2fixed	stb_image.h	/^#define float2fixed(/;"	d
font	nuklear/nuklear.h	/^    const struct nk_user_font *font;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_user_font
font	nuklear/nuklear.h	/^    struct nk_baked_font *font;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_baked_font
font	nuklear/nuklear.h	/^    struct nk_user_font font;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_user_font
font_num	nuklear/nuklear.h	/^    int font_num;$/;"	m	struct:nk_font_atlas
font_size	nuklear/nuklear.h	/^    float font_size;$/;"	m	struct:nk_tt_pack_range
font_tex	nuklear/nuklear_glfw_gl3.h	/^    GLuint font_tex;$/;"	m	struct:nk_glfw_device
fonts	nuklear/nuklear.h	/^    struct nk_font *fonts;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font
fontstart	nuklear/nuklear.h	/^    int fontstart;\/* offset of start of font *\/$/;"	m	struct:nk_tt_fontinfo
footer_h	nuklear/nuklear.h	/^    float footer_h;$/;"	m	struct:nk_panel
footer_padding	nuklear/nuklear.h	/^    struct nk_vec2 footer_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
foreground	nuklear/nuklear.h	/^    struct nk_color foreground;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_color
format	Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap
forward	Camera.cpp	/^glm::vec3 Camera::forward() const {$/;"	f	class:Camera
frag_shdr	nuklear/nuklear_glfw_gl3.h	/^    GLuint frag_shdr;$/;"	m	struct:nk_glfw_device
free	nuklear/nuklear.h	/^    void(*free)(nk_handle, void*);$/;"	m	struct:nk_allocator
free_head	nuklear/nuklear.h	/^    struct nk_rp_node *free_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
freelist	nuklear/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_page_element
freelist	nuklear/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_page_element
freq	main.cpp	/^float freq = 1.0e9;$/;"	v
ftoi	main.cpp	/^unsigned ftoi(double d)$/;"	f
fx	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
g	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
gCamera	main.cpp	/^tdogl::Camera gCamera;$/;"	v
gProgram	main.cpp	/^tdogl::Program *gProgram = NULL;$/;"	v
gScrollY	main.cpp	/^float gScrollY = 0.0;$/;"	v
gTexture	main.cpp	/^tdogl::Texture *gTexture = NULL;$/;"	v
gVAO	main.cpp	/^GLuint gVAO = 0;$/;"	v
gVBO	main.cpp	/^GLuint gVBO = 0;$/;"	v
gWindow	main.cpp	/^GLFWwindow *gWindow = NULL;$/;"	v
getPixel	Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap
glfw	nuklear/nuklear_glfw_gl3.h	/^} glfw;$/;"	v	typeref:struct:nk_glfw
global_alpha	nuklear/nuklear.h	/^    float global_alpha; \/* global alpha value *\/$/;"	m	struct:nk_convert_config
global_alpha	nuklear/nuklear.h	/^    float global_alpha;$/;"	m	struct:nk_draw_list
glyf	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
glyph_count	nuklear/nuklear.h	/^    int glyph_count;$/;"	m	struct:nk_font_atlas
glyph_count	nuklear/nuklear.h	/^    nk_rune glyph_count;$/;"	m	struct:nk_baked_font
glyph_offset	nuklear/nuklear.h	/^    nk_rune glyph_offset;$/;"	m	struct:nk_baked_font
glyphs	nuklear/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_glyph
glyphs	nuklear/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font_glyph
grab	nuklear/nuklear.h	/^    unsigned char grab;$/;"	m	struct:nk_mouse
grabbed	nuklear/nuklear.h	/^    unsigned char grabbed;$/;"	m	struct:nk_mouse
group_border	nuklear/nuklear.h	/^    float group_border;$/;"	m	struct:nk_style_window
group_border_color	nuklear/nuklear.h	/^    struct nk_color group_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
grow_factor	nuklear/nuklear.h	/^    float grow_factor;$/;"	m	struct:nk_buffer
h	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
h	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
h	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
h	nuklear/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text
h	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
h	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
h	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
h	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon19::__anon20
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon29
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon19::__anon20
h_g_data	main.cpp	/^GLubyte *h_g_data;$/;"	v
h_oversample	nuklear/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range
h_oversample	nuklear/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon19::__anon20
handle	nuklear/nuklear.h	/^    struct nk_user_font handle;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_user_font
handle	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
has_preferred_x	nuklear/nuklear.h	/^    unsigned char has_preferred_x;$/;"	m	struct:nk_text_edit
has_scrolling	nuklear/nuklear.h	/^    unsigned int has_scrolling;$/;"	m	struct:nk_panel
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon19::__anon20
head	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
head	nuklear/nuklear.h	/^    struct nk_tt__hheap_chunk *head;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_tt__hheap::nk_tt__hheap_chunk
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc	typeref:struct:nk_command_arc::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_command_arc_filled::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle	typeref:struct:nk_command_circle::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_command_circle_filled::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_image	typeref:struct:nk_command_image::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect	typeref:struct:nk_command_rect::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_command_rect_filled::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_scissor	typeref:struct:nk_command_scissor::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_command
header	nuklear/nuklear.h	/^    struct nk_style_window_header header;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_window_header
header_h	nuklear/nuklear.h	/^    float header_h;$/;"	m	struct:nk_panel
height	Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_baked_font
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_command_text
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_row_layout
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_user_font
height	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_panel
height	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph
height	nuklear/nuklear.h	/^    int   height;$/;"	m	struct:nk_tt_pack_context
height	nuklear/nuklear.h	/^    int height;$/;"	m	struct:nk_rp_context
height	nuklear/nuklear.h	/^   float height; \/* height of line *\/$/;"	m	struct:nk_text_find
height	nuklear/nuklear_glfw_gl3.h	/^    int width, height;$/;"	m	struct:nk_glfw
heuristic	nuklear/nuklear.h	/^    int heuristic;$/;"	m	struct:nk_rp_context
hhea	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
highlight	nuklear/nuklear.h	/^    struct nk_color highlight;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_color
hmtx	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
hover_active	nuklear/nuklear.h	/^    struct nk_style_item hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon21
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon19
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon19
i	main.cpp	/^int i, j;$/;"	v
id	nuklear/nuklear.h	/^    int id;$/;"	m	struct:nk_rp_rect
id	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon2
id	stb_image.h	/^      int id;$/;"	m	struct:__anon19::__anon20
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon25
image	nuklear/nuklear.h	/^    struct nk_image image;$/;"	m	union:nk_style_item_data	typeref:struct:nk_style_item_data::nk_image
image_padding	nuklear/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
image_padding	nuklear/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
img	nuklear/nuklear.h	/^    struct nk_image img;$/;"	m	struct:nk_command_image	typeref:struct:nk_command_image::nk_image
img	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::nk_image
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon16
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon16
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon16
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon19	typeref:struct:__anon19::__anon20
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon19
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon19
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon19
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon19
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon19
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon16
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon16
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon19
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon16
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon16
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_button
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_button
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_button
inc_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_style_scrollbar::nk_symbol_type
inc_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_style_slider::nk_symbol_type
incrt	main.cpp	/^unsigned int incrt = 1;$/;"	v
indent	nuklear/nuklear.h	/^    float indent;$/;"	m	struct:nk_style_tab
index	nuklear/nuklear.h	/^    int index;$/;"	m	struct:nk_chart_slot
index	nuklear/nuklear.h	/^    int index;$/;"	m	struct:nk_row_layout
indexToLocFormat	nuklear/nuklear.h	/^    int indexToLocFormat; \/* format needed to map from glyph index to glyph *\/$/;"	m	struct:nk_tt_fontinfo
index_map	nuklear/nuklear.h	/^    int index_map; \/* a cmap mapping for our chosen character encoding *\/$/;"	m	struct:nk_tt_fontinfo
info	nuklear/nuklear.h	/^    struct nk_baked_font info;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_baked_font
info	nuklear/nuklear.h	/^    struct nk_tt_fontinfo info;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_tt_fontinfo
init_mode	nuklear/nuklear.h	/^    int init_mode;$/;"	m	struct:nk_rp_context
initialized	nuklear/nuklear.h	/^    unsigned char initialized;$/;"	m	struct:nk_text_edit
input	nuklear/nuklear.h	/^    struct nk_input input;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_input
insert_length	nuklear/nuklear.h	/^   short insert_length;$/;"	m	struct:nk_text_undo_record
invert	nuklear/nuklear.h	/^    int invert;$/;"	m	struct:nk_tt__edge
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon16
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon16
isInUse	Program.cpp	/^bool Program::isInUse() const {$/;"	f	class:Program
item	nuklear/nuklear.h	/^    struct nk_rect item;$/;"	m	struct:nk_row_layout	typeref:struct:nk_row_layout::nk_rect
item_height	nuklear/nuklear.h	/^    float item_width, item_height;$/;"	m	struct:nk_row_layout
item_offset	nuklear/nuklear.h	/^    float item_offset;$/;"	m	struct:nk_row_layout
item_width	nuklear/nuklear.h	/^    float item_width, item_height;$/;"	m	struct:nk_row_layout
j	main.cpp	/^int i, j;$/;"	v
kern	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
keyboard	nuklear/nuklear.h	/^    struct nk_keyboard keyboard;$/;"	m	struct:nk_input	typeref:struct:nk_input::nk_keyboard
keys	nuklear/nuklear.h	/^    nk_hash keys[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table
keys	nuklear/nuklear.h	/^    struct nk_key keys[NK_KEY_MAX];$/;"	m	struct:nk_keyboard	typeref:struct:nk_keyboard::nk_key
kt	main.cpp	/^unsigned int kt = 1;$/;"	v
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_padding	nuklear/nuklear.h	/^    struct nk_vec2 label_padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
lambda	main.cpp	/^float lambda;$/;"	v
last	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
last	nuklear/nuklear.h	/^    nk_size last;$/;"	m	struct:nk_popup_buffer
last	nuklear/nuklear.h	/^    struct nk_vec2 last;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_vec2
last_widget_state	nuklear/nuklear.h	/^    nk_flags last_widget_state;$/;"	m	struct:nk_context
layout	nuklear/nuklear.h	/^    struct nk_panel *layout;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_panel
left	nuklear/nuklear.h	/^    struct nk_color left;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
len	nuklear/nuklear.h	/^    int len; \/* in codepoints\/runes\/glyphs *\/$/;"	m	struct:nk_str
length	nuklear/nuklear.h	/^    int length;$/;"	m	struct:nk_command_text
length	nuklear/nuklear.h	/^    int length;$/;"	m	struct:nk_property_state
length	nuklear/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon24
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon29
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon21
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon21
line_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing line_AA; \/* line anti-aliasing flag can be turned off if you are tight on memory *\/$/;"	m	struct:nk_convert_config	typeref:enum:nk_convert_config::nk_anti_aliasing
line_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing line_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_draw_list::nk_anti_aliasing
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon29
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_arc
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_circle
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_curve
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_line
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polygon
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polyline
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_rect
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_triangle
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon19::__anon20
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
loca	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
lookAt	Camera.cpp	/^void Camera::lookAt(glm::vec3 position) {$/;"	f	class:Camera
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon29
main	main.cpp	/^int main(int argc, char const* argv[])$/;"	f
main	nuklear/backup.c	/^int main(void)$/;"	f
main	nuklear/main.c	/^int main(void)$/;"	f
mapping	main.cpp	/^double mapping(double value, double istart, double istop, double ostart, double ostop)$/;"	f
marker	nuklear/nuklear.h	/^    struct nk_buffer_marker marker[NK_BUFFER_MAX];$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_buffer_marker
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon19
matrix	Camera.cpp	/^glm::mat4 Camera::matrix() const {$/;"	f	class:Camera
max	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
max_x	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon29
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon29
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon22
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon18
maximize_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type maximize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
memory	nuklear/nuklear.h	/^    struct nk_buffer memory;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_buffer
memory	nuklear/nuklear.h	/^    struct nk_memory memory;$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_memory
memory	nuklear/nuklear.h	/^    void *memory;$/;"	m	struct:nk_memory_status
menu	nuklear/nuklear.h	/^    struct nk_menu_state menu;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_menu_state
menu_border	nuklear/nuklear.h	/^    float menu_border;$/;"	m	struct:nk_style_window
menu_border_color	nuklear/nuklear.h	/^    struct nk_color menu_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
menu_button	nuklear/nuklear.h	/^    struct nk_style_button menu_button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
merge_mode	nuklear/nuklear.h	/^    unsigned char merge_mode;$/;"	m	struct:nk_font_config
min	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
min_size	nuklear/nuklear.h	/^    struct nk_vec2 min_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
minimize_button	nuklear/nuklear.h	/^    struct nk_style_button minimize_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_button
minimize_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type minimize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
mode	nuklear/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_edit_state
mode	nuklear/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_text_edit
mouse	nuklear/nuklear.h	/^    struct nk_mouse mouse;$/;"	m	struct:nk_input	typeref:struct:nk_input::nk_mouse
mu0	main.cpp	/^float mu0;$/;"	v
mu_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_edit_state
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_popup_state
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_property_state
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_window
nearPlane	Camera.cpp	/^float Camera::nearPlane() const {$/;"	f	class:Camera
needed	nuklear/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_buffer
needed	nuklear/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_memory_status
next	nuklear/nuklear.h	/^    nk_size next;$/;"	m	struct:nk_command
next	nuklear/nuklear.h	/^    struct nk_font *next;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font
next	nuklear/nuklear.h	/^    struct nk_font_config *next;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_font_config
next	nuklear/nuklear.h	/^    struct nk_page *next;$/;"	m	struct:nk_page	typeref:struct:nk_page::nk_page
next	nuklear/nuklear.h	/^    struct nk_page_element *next;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element::nk_page_element
next	nuklear/nuklear.h	/^    struct nk_rp_node  *next;$/;"	m	struct:nk_rp_node	typeref:struct:nk_rp_node::nk_rp_node
next	nuklear/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table::nk_table
next	nuklear/nuklear.h	/^    struct nk_tt__active_edge *next;$/;"	m	struct:nk_tt__active_edge	typeref:struct:nk_tt__active_edge::nk_tt__active_edge
next	nuklear/nuklear.h	/^    struct nk_tt__hheap_chunk *next;$/;"	m	struct:nk_tt__hheap_chunk	typeref:struct:nk_tt__hheap_chunk::nk_tt__hheap_chunk
next	nuklear/nuklear.h	/^    struct nk_window *next;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
nk__barrier	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier;$/;"	v
nk__barrier2	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier2;$/;"	v
nk__barrier3	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier3;$/;"	v
nk__barrier4	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier4;$/;"	v
nk__begin	nuklear/nuklear.h	/^nk__begin(struct nk_context *ctx)$/;"	f
nk__check_byte	nuklear/nuklear.h	/^typedef int nk__check_byte[(sizeof(nk_byte) == 1) ? 1 : -1];$/;"	t
nk__check_flags	nuklear/nuklear.h	/^typedef int nk__check_flags[(sizeof(nk_flags) >= 4) ? 1 : -1];$/;"	t
nk__check_int	nuklear/nuklear.h	/^typedef int nk__check_int[(sizeof(nk_int) == 4) ? 1 : -1];$/;"	t
nk__check_ptr	nuklear/nuklear.h	/^typedef int nk__check_ptr[(sizeof(nk_ptr) == sizeof(void*)) ? 1 : -1];$/;"	t
nk__check_rune	nuklear/nuklear.h	/^typedef int nk__check_rune[(sizeof(nk_rune) >= 4) ? 1 : -1];$/;"	t
nk__check_short	nuklear/nuklear.h	/^typedef int nk__check_short[(sizeof(nk_short) == 2) ? 1 : -1];$/;"	t
nk__check_size	nuklear/nuklear.h	/^typedef int nk__check_size[(sizeof(nk_size) >= sizeof(void*)) ? 1 : -1];$/;"	t
nk__check_uint	nuklear/nuklear.h	/^typedef int nk__check_uint[(sizeof(nk_uint) == 4) ? 1 : -1];$/;"	t
nk__check_ushort	nuklear/nuklear.h	/^typedef int nk__check_ushort[(sizeof(nk_ushort) == 2) ? 1 : -1];$/;"	t
nk__dout	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__dout;$/;"	v
nk__draw_begin	nuklear/nuklear.h	/^nk__draw_begin(const struct nk_context *ctx,$/;"	f
nk__draw_list_begin	nuklear/nuklear.h	/^nk__draw_list_begin(const struct nk_draw_list *canvas, const struct nk_buffer *buffer)$/;"	f
nk__draw_list_next	nuklear/nuklear.h	/^nk__draw_list_next(const struct nk_draw_command *cmd,$/;"	f
nk__draw_next	nuklear/nuklear.h	/^nk__draw_next(const struct nk_draw_command *cmd,$/;"	f
nk__in2	nuklear/nuklear.h	/^#define nk__in2(/;"	d
nk__in3	nuklear/nuklear.h	/^#define nk__in3(/;"	d
nk__in4	nuklear/nuklear.h	/^#define nk__in4(/;"	d
nk__lit	nuklear/nuklear.h	/^nk__lit(unsigned char *data, unsigned int length)$/;"	f
nk__match	nuklear/nuklear.h	/^nk__match(unsigned char *data, unsigned int length)$/;"	f
nk__next	nuklear/nuklear.h	/^nk__next(struct nk_context *ctx, const struct nk_command *cmd)$/;"	f
nk_add_value	nuklear/nuklear.h	/^nk_add_value(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_adler32	nuklear/nuklear.h	/^nk_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen)$/;"	f
nk_alignof	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s
nk_allocation_type	nuklear/nuklear.h	/^enum nk_allocation_type {$/;"	g
nk_allocator	nuklear/nuklear.h	/^struct nk_allocator {$/;"	s
nk_anti_aliasing	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	g
nk_baked_font	nuklear/nuklear.h	/^struct nk_baked_font {$/;"	s
nk_baker_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_baker_align = NK_ALIGNOF(struct nk_font_baker);$/;"	v
nk_begin	nuklear/nuklear.h	/^nk_begin(struct nk_context *ctx, struct nk_panel *layout, const char *title,$/;"	f
nk_buffer	nuklear/nuklear.h	/^struct nk_buffer {$/;"	s
nk_buffer_align	nuklear/nuklear.h	/^nk_buffer_align(void *unaligned, nk_size align, nk_size *alignment,$/;"	f
nk_buffer_alloc	nuklear/nuklear.h	/^nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f
nk_buffer_allocation_type	nuklear/nuklear.h	/^enum nk_buffer_allocation_type {$/;"	g
nk_buffer_clear	nuklear/nuklear.h	/^nk_buffer_clear(struct nk_buffer *b)$/;"	f
nk_buffer_free	nuklear/nuklear.h	/^nk_buffer_free(struct nk_buffer *b)$/;"	f
nk_buffer_info	nuklear/nuklear.h	/^nk_buffer_info(struct nk_memory_status *s, struct nk_buffer *b)$/;"	f
nk_buffer_init	nuklear/nuklear.h	/^nk_buffer_init(struct nk_buffer *b, const struct nk_allocator *a,$/;"	f
nk_buffer_init_default	nuklear/nuklear.h	/^nk_buffer_init_default(struct nk_buffer *buffer)$/;"	f
nk_buffer_init_fixed	nuklear/nuklear.h	/^nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)$/;"	f
nk_buffer_mark	nuklear/nuklear.h	/^nk_buffer_mark(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f
nk_buffer_marker	nuklear/nuklear.h	/^struct nk_buffer_marker {$/;"	s
nk_buffer_memory	nuklear/nuklear.h	/^nk_buffer_memory(struct nk_buffer *buffer)$/;"	f
nk_buffer_memory_const	nuklear/nuklear.h	/^nk_buffer_memory_const(const struct nk_buffer *buffer)$/;"	f
nk_buffer_push	nuklear/nuklear.h	/^nk_buffer_push(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f
nk_buffer_realloc	nuklear/nuklear.h	/^nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)$/;"	f
nk_buffer_reset	nuklear/nuklear.h	/^nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f
nk_buffer_total	nuklear/nuklear.h	/^nk_buffer_total(struct nk_buffer *buffer)$/;"	f
nk_build	nuklear/nuklear.h	/^nk_build(struct nk_context *ctx)$/;"	f
nk_build_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_build_align = NK_ALIGNOF(struct nk_font_bake_data);$/;"	v
nk_button_behavior	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	g
nk_button_behavior	nuklear/nuklear.h	/^nk_button_behavior(nk_flags *state, struct nk_rect r,$/;"	f
nk_button_color	nuklear/nuklear.h	/^nk_button_color(struct nk_context *ctx, struct nk_color color)$/;"	f
nk_button_image	nuklear/nuklear.h	/^nk_button_image(struct nk_context *ctx, struct nk_image img)$/;"	f
nk_button_image_label	nuklear/nuklear.h	/^NK_API int nk_button_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_button_image_text	nuklear/nuklear.h	/^nk_button_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_button_label	nuklear/nuklear.h	/^NK_API int nk_button_label(struct nk_context *ctx, const char *title)$/;"	f
nk_button_set_behavior	nuklear/nuklear.h	/^nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)$/;"	f
nk_button_symbol	nuklear/nuklear.h	/^nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)$/;"	f
nk_button_symbol_label	nuklear/nuklear.h	/^NK_API int nk_button_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_button_symbol_text	nuklear/nuklear.h	/^nk_button_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_button_text	nuklear/nuklear.h	/^nk_button_text(struct nk_context *ctx, const char *title, int len)$/;"	f
nk_buttons	nuklear/nuklear.h	/^enum nk_buttons {$/;"	g
nk_byte	nuklear/nuklear.h	/^typedef NK_BYTE nk_byte;$/;"	t
nk_byte	nuklear/nuklear.h	/^typedef uint8_t nk_byte;$/;"	t
nk_byte	nuklear/nuklear.h	/^typedef unsigned char nk_byte;$/;"	t
nk_char_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_char_align = NK_ALIGNOF(struct nk_tt_packedchar);$/;"	v
nk_chart	nuklear/nuklear.h	/^struct nk_chart {$/;"	s
nk_chart_add_slot	nuklear/nuklear.h	/^nk_chart_add_slot(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_add_slot_colored	nuklear/nuklear.h	/^nk_chart_add_slot_colored(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_begin	nuklear/nuklear.h	/^nk_chart_begin(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_begin_colored	nuklear/nuklear.h	/^nk_chart_begin_colored(struct nk_context *ctx, enum nk_chart_type type,$/;"	f
nk_chart_end	nuklear/nuklear.h	/^nk_chart_end(struct nk_context *ctx)$/;"	f
nk_chart_event	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	g
nk_chart_push	nuklear/nuklear.h	/^nk_chart_push(struct nk_context *ctx, float value)$/;"	f
nk_chart_push_column	nuklear/nuklear.h	/^nk_chart_push_column(const struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_chart_push_line	nuklear/nuklear.h	/^nk_chart_push_line(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_chart_push_slot	nuklear/nuklear.h	/^nk_chart_push_slot(struct nk_context *ctx, float value, int slot)$/;"	f
nk_chart_slot	nuklear/nuklear.h	/^struct nk_chart_slot {$/;"	s
nk_chart_type	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	g
nk_check_flags_label	nuklear/nuklear.h	/^NK_API unsigned int nk_check_flags_label(struct nk_context *ctx, const char *label,$/;"	f
nk_check_flags_text	nuklear/nuklear.h	/^nk_check_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_check_label	nuklear/nuklear.h	/^NK_API int nk_check_label(struct nk_context *ctx, const char *label, int active)$/;"	f
nk_check_text	nuklear/nuklear.h	/^nk_check_text(struct nk_context *ctx, const char *text, int len, int active)$/;"	f
nk_checkbox_flags_label	nuklear/nuklear.h	/^NK_API int nk_checkbox_flags_label(struct nk_context *ctx, const char *label,$/;"	f
nk_checkbox_flags_text	nuklear/nuklear.h	/^nk_checkbox_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_checkbox_label	nuklear/nuklear.h	/^NK_API int nk_checkbox_label(struct nk_context *ctx, const char *label, int *active)$/;"	f
nk_checkbox_text	nuklear/nuklear.h	/^nk_checkbox_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f
nk_clear	nuklear/nuklear.h	/^nk_clear(struct nk_context *ctx)$/;"	f
nk_clipboard	nuklear/nuklear.h	/^struct nk_clipboard {$/;"	s
nk_collapse_states	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	g
nk_color	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	s
nk_color_f	nuklear/nuklear.h	/^nk_color_f(float *r, float *g, float *b, float *a, struct nk_color in)$/;"	f
nk_color_format	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	g
nk_color_fv	nuklear/nuklear.h	/^nk_color_fv(float *c, struct nk_color in)$/;"	f
nk_color_hex_rgb	nuklear/nuklear.h	/^nk_color_hex_rgb(char *output, struct nk_color col)$/;"	f
nk_color_hex_rgba	nuklear/nuklear.h	/^nk_color_hex_rgba(char *output, struct nk_color col)$/;"	f
nk_color_hsv_b	nuklear/nuklear.h	/^nk_color_hsv_b(nk_byte *out_h, nk_byte *out_s, nk_byte *out_v, struct nk_color in)$/;"	f
nk_color_hsv_bv	nuklear/nuklear.h	/^nk_color_hsv_bv(nk_byte *out, struct nk_color in)$/;"	f
nk_color_hsv_f	nuklear/nuklear.h	/^nk_color_hsv_f(float *out_h, float *out_s, float *out_v, struct nk_color in)$/;"	f
nk_color_hsv_fv	nuklear/nuklear.h	/^nk_color_hsv_fv(float *out, struct nk_color in)$/;"	f
nk_color_hsv_i	nuklear/nuklear.h	/^nk_color_hsv_i(int *out_h, int *out_s, int *out_v, struct nk_color in)$/;"	f
nk_color_hsv_iv	nuklear/nuklear.h	/^nk_color_hsv_iv(int *out, struct nk_color in)$/;"	f
nk_color_hsva_b	nuklear/nuklear.h	/^nk_color_hsva_b(nk_byte *h, nk_byte *s, nk_byte *v, nk_byte *a, struct nk_color in)$/;"	f
nk_color_hsva_bv	nuklear/nuklear.h	/^nk_color_hsva_bv(nk_byte *out, struct nk_color in)$/;"	f
nk_color_hsva_f	nuklear/nuklear.h	/^nk_color_hsva_f(float *out_h, float *out_s,$/;"	f
nk_color_hsva_fv	nuklear/nuklear.h	/^nk_color_hsva_fv(float *out, struct nk_color in)$/;"	f
nk_color_hsva_i	nuklear/nuklear.h	/^nk_color_hsva_i(int *out_h, int *out_s, int *out_v,$/;"	f
nk_color_hsva_iv	nuklear/nuklear.h	/^nk_color_hsva_iv(int *out, struct nk_color in)$/;"	f
nk_color_names	nuklear/nuklear.h	/^NK_GLOBAL const char *nk_color_names[NK_COLOR_COUNT] = {$/;"	v
nk_color_pick	nuklear/nuklear.h	/^nk_color_pick(struct nk_context * ctx, struct nk_color *color,$/;"	f
nk_color_picker	nuklear/nuklear.h	/^nk_color_picker(struct nk_context *ctx, struct nk_color color,$/;"	f
nk_color_picker_behavior	nuklear/nuklear.h	/^nk_color_picker_behavior(nk_flags *state,$/;"	f
nk_color_u32	nuklear/nuklear.h	/^nk_color_u32(struct nk_color in)$/;"	f
nk_combo	nuklear/nuklear.h	/^nk_combo(struct nk_context *ctx, const char **items, int count,$/;"	f
nk_combo_begin	nuklear/nuklear.h	/^nk_combo_begin(struct nk_panel *layout, struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_combo_begin_color	nuklear/nuklear.h	/^nk_combo_begin_color(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_image	nuklear/nuklear.h	/^nk_combo_begin_image(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_image_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_image_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_image_text	nuklear/nuklear.h	/^nk_combo_begin_image_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_symbol	nuklear/nuklear.h	/^nk_combo_begin_symbol(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_symbol_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_symbol_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_symbol_text	nuklear/nuklear.h	/^nk_combo_begin_symbol_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_begin_text	nuklear/nuklear.h	/^nk_combo_begin_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_combo_callback	nuklear/nuklear.h	/^nk_combo_callback(struct nk_context *ctx, void(*item_getter)(void*, int, const char**),$/;"	f
nk_combo_close	nuklear/nuklear.h	/^NK_API void nk_combo_close(struct nk_context *ctx)$/;"	f
nk_combo_end	nuklear/nuklear.h	/^NK_API void nk_combo_end(struct nk_context *ctx)$/;"	f
nk_combo_item_image_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_combo_item_image_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_image_text(struct nk_context *ctx, struct nk_image img, const char *text,$/;"	f
nk_combo_item_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_combo_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_combo_item_symbol_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_combo_item_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_text(struct nk_context *ctx, const char *text, int len,nk_flags align)$/;"	f
nk_combo_separator	nuklear/nuklear.h	/^nk_combo_separator(struct nk_context *ctx, const char *items_separated_by_separator,$/;"	f
nk_combo_string	nuklear/nuklear.h	/^nk_combo_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f
nk_combobox	nuklear/nuklear.h	/^NK_API void nk_combobox(struct nk_context *ctx, const char **items, int count,$/;"	f
nk_combobox_callback	nuklear/nuklear.h	/^NK_API void nk_combobox_callback(struct nk_context *ctx,$/;"	f
nk_combobox_separator	nuklear/nuklear.h	/^NK_API void nk_combobox_separator(struct nk_context *ctx, const char *items_separated_by_separator,$/;"	f
nk_combobox_string	nuklear/nuklear.h	/^NK_API void nk_combobox_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f
nk_command	nuklear/nuklear.h	/^struct nk_command {$/;"	s
nk_command_arc	nuklear/nuklear.h	/^struct nk_command_arc {$/;"	s
nk_command_arc_filled	nuklear/nuklear.h	/^struct nk_command_arc_filled {$/;"	s
nk_command_buffer	nuklear/nuklear.h	/^struct nk_command_buffer {$/;"	s
nk_command_buffer_init	nuklear/nuklear.h	/^nk_command_buffer_init(struct nk_command_buffer *cmdbuf,$/;"	f
nk_command_buffer_push	nuklear/nuklear.h	/^nk_command_buffer_push(struct nk_command_buffer* b,$/;"	f
nk_command_buffer_reset	nuklear/nuklear.h	/^nk_command_buffer_reset(struct nk_command_buffer *buffer)$/;"	f
nk_command_circle	nuklear/nuklear.h	/^struct nk_command_circle {$/;"	s
nk_command_circle_filled	nuklear/nuklear.h	/^struct nk_command_circle_filled {$/;"	s
nk_command_clipping	nuklear/nuklear.h	/^enum nk_command_clipping {$/;"	g
nk_command_curve	nuklear/nuklear.h	/^struct nk_command_curve {$/;"	s
nk_command_image	nuklear/nuklear.h	/^struct nk_command_image {$/;"	s
nk_command_line	nuklear/nuklear.h	/^struct nk_command_line {$/;"	s
nk_command_polygon	nuklear/nuklear.h	/^struct nk_command_polygon {$/;"	s
nk_command_polygon_filled	nuklear/nuklear.h	/^struct nk_command_polygon_filled {$/;"	s
nk_command_polyline	nuklear/nuklear.h	/^struct nk_command_polyline {$/;"	s
nk_command_rect	nuklear/nuklear.h	/^struct nk_command_rect {$/;"	s
nk_command_rect_filled	nuklear/nuklear.h	/^struct nk_command_rect_filled {$/;"	s
nk_command_rect_multi_color	nuklear/nuklear.h	/^struct nk_command_rect_multi_color {$/;"	s
nk_command_scissor	nuklear/nuklear.h	/^struct nk_command_scissor {$/;"	s
nk_command_text	nuklear/nuklear.h	/^struct nk_command_text {$/;"	s
nk_command_triangle	nuklear/nuklear.h	/^struct nk_command_triangle {$/;"	s
nk_command_triangle_filled	nuklear/nuklear.h	/^struct nk_command_triangle_filled {$/;"	s
nk_command_type	nuklear/nuklear.h	/^enum nk_command_type {$/;"	g
nk_context	nuklear/nuklear.h	/^struct nk_context {$/;"	s
nk_contextual_begin	nuklear/nuklear.h	/^nk_contextual_begin(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_contextual_close	nuklear/nuklear.h	/^nk_contextual_close(struct nk_context *ctx)$/;"	f
nk_contextual_end	nuklear/nuklear.h	/^nk_contextual_end(struct nk_context *ctx)$/;"	f
nk_contextual_item_image_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_contextual_item_image_text	nuklear/nuklear.h	/^nk_contextual_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_contextual_item_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_contextual_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_contextual_item_symbol_text	nuklear/nuklear.h	/^nk_contextual_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_contextual_item_text	nuklear/nuklear.h	/^nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_convert	nuklear/nuklear.h	/^nk_convert(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f
nk_convert_config	nuklear/nuklear.h	/^struct nk_convert_config {$/;"	s
nk_copy_f	nuklear/nuklear.h	/^typedef void(*nk_copy_f)(nk_handle, const char*, int len);$/;"	t
nk_cos	nuklear/nuklear.h	/^nk_cos(float x)$/;"	f
nk_create_page_element	nuklear/nuklear.h	/^nk_create_page_element(struct nk_context *ctx)$/;"	f
nk_create_table	nuklear/nuklear.h	/^nk_create_table(struct nk_context *ctx)$/;"	f
nk_create_window	nuklear/nuklear.h	/^nk_create_window(struct nk_context *ctx)$/;"	f
nk_cursor	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	s
nk_custom_cursor_data	nuklear/nuklear.h	/^nk_custom_cursor_data[NK_CURSOR_DATA_W * NK_CURSOR_DATA_H + 1] =$/;"	v
nk_decode_85	nuklear/nuklear.h	/^nk_decode_85(unsigned char* dst, const unsigned char* src)$/;"	f
nk_decode_85_byte	nuklear/nuklear.h	/^nk_decode_85_byte(char c)$/;"	f
nk_decompress	nuklear/nuklear.h	/^nk_decompress(unsigned char *output, unsigned char *i, unsigned int length)$/;"	f
nk_decompress_length	nuklear/nuklear.h	/^nk_decompress_length(unsigned char *input)$/;"	f
nk_decompress_token	nuklear/nuklear.h	/^nk_decompress_token(unsigned char *i)$/;"	f
nk_default_color_style	nuklear/nuklear.h	/^nk_default_color_style[NK_COLOR_COUNT] = {$/;"	v	typeref:struct:nk_color
nk_do_button	nuklear/nuklear.h	/^nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,$/;"	f
nk_do_button_image	nuklear/nuklear.h	/^nk_do_button_image(nk_flags *state,$/;"	f
nk_do_button_symbol	nuklear/nuklear.h	/^nk_do_button_symbol(nk_flags *state,$/;"	f
nk_do_button_text	nuklear/nuklear.h	/^nk_do_button_text(nk_flags *state,$/;"	f
nk_do_button_text_image	nuklear/nuklear.h	/^nk_do_button_text_image(nk_flags *state,$/;"	f
nk_do_button_text_symbol	nuklear/nuklear.h	/^nk_do_button_text_symbol(nk_flags *state,$/;"	f
nk_do_color_picker	nuklear/nuklear.h	/^nk_do_color_picker(nk_flags *state,$/;"	f
nk_do_edit	nuklear/nuklear.h	/^nk_do_edit(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_progress	nuklear/nuklear.h	/^nk_do_progress(nk_flags *state,$/;"	f
nk_do_property	nuklear/nuklear.h	/^nk_do_property(nk_flags *ws,$/;"	f
nk_do_scrollbarh	nuklear/nuklear.h	/^nk_do_scrollbarh(nk_flags *state,$/;"	f
nk_do_scrollbarv	nuklear/nuklear.h	/^nk_do_scrollbarv(nk_flags *state,$/;"	f
nk_do_selectable	nuklear/nuklear.h	/^nk_do_selectable(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_selectable_image	nuklear/nuklear.h	/^nk_do_selectable_image(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_slider	nuklear/nuklear.h	/^nk_do_slider(nk_flags *state,$/;"	f
nk_do_toggle	nuklear/nuklear.h	/^nk_do_toggle(nk_flags *state,$/;"	f
nk_drag_behavior	nuklear/nuklear.h	/^nk_drag_behavior(nk_flags *state, const struct nk_input *in,$/;"	f
nk_draw_button	nuklear/nuklear.h	/^nk_draw_button(struct nk_command_buffer *out,$/;"	f
nk_draw_button_image	nuklear/nuklear.h	/^nk_draw_button_image(struct nk_command_buffer *out,$/;"	f
nk_draw_button_symbol	nuklear/nuklear.h	/^nk_draw_button_symbol(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text	nuklear/nuklear.h	/^nk_draw_button_text(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text_image	nuklear/nuklear.h	/^nk_draw_button_text_image(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text_symbol	nuklear/nuklear.h	/^nk_draw_button_text_symbol(struct nk_command_buffer *out,$/;"	f
nk_draw_checkbox	nuklear/nuklear.h	/^nk_draw_checkbox(struct nk_command_buffer *out,$/;"	f
nk_draw_color_picker	nuklear/nuklear.h	/^nk_draw_color_picker(struct nk_command_buffer *o, const struct nk_rect *matrix,$/;"	f
nk_draw_command	nuklear/nuklear.h	/^struct nk_draw_command {$/;"	s
nk_draw_foreach	nuklear/nuklear.h	/^#define                         nk_draw_foreach(/;"	d
nk_draw_image	nuklear/nuklear.h	/^nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_draw_index	nuklear/nuklear.h	/^typedef unsigned short nk_draw_index;$/;"	t
nk_draw_list	nuklear/nuklear.h	/^struct nk_draw_list {$/;"	s
nk_draw_list_add_clip	nuklear/nuklear.h	/^nk_draw_list_add_clip(struct nk_draw_list *list, struct nk_rect rect)$/;"	f
nk_draw_list_add_image	nuklear/nuklear.h	/^nk_draw_list_add_image(struct nk_draw_list *list, struct nk_image texture,$/;"	f
nk_draw_list_add_text	nuklear/nuklear.h	/^nk_draw_list_add_text(struct nk_draw_list *list, const struct nk_user_font *font,$/;"	f
nk_draw_list_alloc_elements	nuklear/nuklear.h	/^nk_draw_list_alloc_elements(struct nk_draw_list *list, nk_size count)$/;"	f
nk_draw_list_alloc_path	nuklear/nuklear.h	/^nk_draw_list_alloc_path(struct nk_draw_list *list, int count)$/;"	f
nk_draw_list_alloc_vertices	nuklear/nuklear.h	/^nk_draw_list_alloc_vertices(struct nk_draw_list *list, nk_size count)$/;"	f
nk_draw_list_clear	nuklear/nuklear.h	/^nk_draw_list_clear(struct nk_draw_list *list)$/;"	f
nk_draw_list_command_last	nuklear/nuklear.h	/^nk_draw_list_command_last(struct nk_draw_list *list)$/;"	f
nk_draw_list_fill_circle	nuklear/nuklear.h	/^nk_draw_list_fill_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_fill_poly_convex	nuklear/nuklear.h	/^nk_draw_list_fill_poly_convex(struct nk_draw_list *list,$/;"	f
nk_draw_list_fill_rect	nuklear/nuklear.h	/^nk_draw_list_fill_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_fill_rect_multi_color	nuklear/nuklear.h	/^nk_draw_list_fill_rect_multi_color(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_fill_triangle	nuklear/nuklear.h	/^nk_draw_list_fill_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_foreach	nuklear/nuklear.h	/^#define nk_draw_list_foreach(/;"	d
nk_draw_list_init	nuklear/nuklear.h	/^nk_draw_list_init(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_arc_to	nuklear/nuklear.h	/^nk_draw_list_path_arc_to(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_path_arc_to_fast	nuklear/nuklear.h	/^nk_draw_list_path_arc_to_fast(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_path_clear	nuklear/nuklear.h	/^nk_draw_list_path_clear(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_curve_to	nuklear/nuklear.h	/^nk_draw_list_path_curve_to(struct nk_draw_list *list, struct nk_vec2 p2,$/;"	f
nk_draw_list_path_fill	nuklear/nuklear.h	/^nk_draw_list_path_fill(struct nk_draw_list *list, struct nk_color color)$/;"	f
nk_draw_list_path_last	nuklear/nuklear.h	/^nk_draw_list_path_last(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_line_to	nuklear/nuklear.h	/^nk_draw_list_path_line_to(struct nk_draw_list *list, struct nk_vec2 pos)$/;"	f
nk_draw_list_path_rect_to	nuklear/nuklear.h	/^nk_draw_list_path_rect_to(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_path_stroke	nuklear/nuklear.h	/^nk_draw_list_path_stroke(struct nk_draw_list *list, struct nk_color color,$/;"	f
nk_draw_list_push_command	nuklear/nuklear.h	/^nk_draw_list_push_command(struct nk_draw_list *list, struct nk_rect clip,$/;"	f
nk_draw_list_push_image	nuklear/nuklear.h	/^nk_draw_list_push_image(struct nk_draw_list *list, nk_handle texture)$/;"	f
nk_draw_list_push_rect_uv	nuklear/nuklear.h	/^nk_draw_list_push_rect_uv(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_push_userdata	nuklear/nuklear.h	/^nk_draw_list_push_userdata(struct nk_draw_list *list, nk_handle userdata)$/;"	f
nk_draw_list_setup	nuklear/nuklear.h	/^nk_draw_list_setup(struct nk_draw_list *canvas, float global_alpha,$/;"	f
nk_draw_list_stroke	nuklear/nuklear.h	/^enum nk_draw_list_stroke {$/;"	g
nk_draw_list_stroke_circle	nuklear/nuklear.h	/^nk_draw_list_stroke_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_stroke_curve	nuklear/nuklear.h	/^nk_draw_list_stroke_curve(struct nk_draw_list *list, struct nk_vec2 p0,$/;"	f
nk_draw_list_stroke_line	nuklear/nuklear.h	/^nk_draw_list_stroke_line(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_stroke_poly_line	nuklear/nuklear.h	/^nk_draw_list_stroke_poly_line(struct nk_draw_list *list, const struct nk_vec2 *points,$/;"	f
nk_draw_list_stroke_rect	nuklear/nuklear.h	/^nk_draw_list_stroke_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_stroke_triangle	nuklear/nuklear.h	/^nk_draw_list_stroke_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_null_texture	nuklear/nuklear.h	/^struct nk_draw_null_texture {$/;"	s
nk_draw_option	nuklear/nuklear.h	/^nk_draw_option(struct nk_command_buffer *out,$/;"	f
nk_draw_progress	nuklear/nuklear.h	/^nk_draw_progress(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_property	nuklear/nuklear.h	/^nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,$/;"	f
nk_draw_scrollbar	nuklear/nuklear.h	/^nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_selectable	nuklear/nuklear.h	/^nk_draw_selectable(struct nk_command_buffer *out,$/;"	f
nk_draw_slider	nuklear/nuklear.h	/^nk_draw_slider(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_symbol	nuklear/nuklear.h	/^nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,$/;"	f
nk_draw_text	nuklear/nuklear.h	/^nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_draw_vertex	nuklear/nuklear.h	/^nk_draw_vertex(struct nk_vec2 pos, struct nk_vec2 uv, nk_draw_vertex_color col)$/;"	f
nk_draw_vertex	nuklear/nuklear.h	/^struct nk_draw_vertex {$/;"	s
nk_draw_vertex_color	nuklear/nuklear.h	/^typedef nk_uint nk_draw_vertex_color;$/;"	t
nk_edit_buffer	nuklear/nuklear.h	/^nk_edit_buffer(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_edit_draw_text	nuklear/nuklear.h	/^nk_edit_draw_text(struct nk_command_buffer *out,$/;"	f
nk_edit_events	nuklear/nuklear.h	/^enum nk_edit_events {$/;"	g
nk_edit_flags	nuklear/nuklear.h	/^enum nk_edit_flags {$/;"	g
nk_edit_state	nuklear/nuklear.h	/^struct nk_edit_state {$/;"	s
nk_edit_string	nuklear/nuklear.h	/^nk_edit_string(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_edit_types	nuklear/nuklear.h	/^enum nk_edit_types {$/;"	g
nk_end	nuklear/nuklear.h	/^nk_end(struct nk_context *ctx)$/;"	f
nk_false	nuklear/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon1
nk_file_load	nuklear/nuklear.h	/^nk_file_load(const char* path, nk_size* siz, struct nk_allocator *alloc)$/;"	f
nk_fill_arc	nuklear/nuklear.h	/^nk_fill_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f
nk_fill_circle	nuklear/nuklear.h	/^nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)$/;"	f
nk_fill_polygon	nuklear/nuklear.h	/^nk_fill_polygon(struct nk_command_buffer *b, float *points, int point_count,$/;"	f
nk_fill_rect	nuklear/nuklear.h	/^nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_fill_rect_multi_color	nuklear/nuklear.h	/^nk_fill_rect_multi_color(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_fill_triangle	nuklear/nuklear.h	/^nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f
nk_filter	nuklear/nuklear.h	/^typedef int(*nk_filter)(const struct nk_text_edit*, nk_rune unicode);$/;"	t
nk_filter_ascii	nuklear/nuklear.h	/^nk_filter_ascii(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_binary	nuklear/nuklear.h	/^nk_filter_binary(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_decimal	nuklear/nuklear.h	/^nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_default	nuklear/nuklear.h	/^NK_API int nk_filter_default(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_float	nuklear/nuklear.h	/^nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_hex	nuklear/nuklear.h	/^nk_filter_hex(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_oct	nuklear/nuklear.h	/^nk_filter_oct(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_find_value	nuklear/nuklear.h	/^nk_find_value(struct nk_window *win, nk_hash name)$/;"	f
nk_find_window	nuklear/nuklear.h	/^nk_find_window(struct nk_context *ctx, nk_hash hash)$/;"	f
nk_finish	nuklear/nuklear.h	/^nk_finish(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_finish_buffer	nuklear/nuklear.h	/^nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f
nk_finish_popup	nuklear/nuklear.h	/^nk_finish_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_flags	nuklear/nuklear.h	/^typedef uint32_t nk_flags;$/;"	t
nk_flags	nuklear/nuklear.h	/^typedef unsigned int nk_flags;$/;"	t
nk_font	nuklear/nuklear.h	/^struct nk_font {$/;"	s
nk_font_atlas	nuklear/nuklear.h	/^struct nk_font_atlas {$/;"	s
nk_font_atlas_add	nuklear/nuklear.h	/^nk_font_atlas_add(struct nk_font_atlas *atlas, const struct nk_font_config *config)$/;"	f
nk_font_atlas_add_compressed	nuklear/nuklear.h	/^nk_font_atlas_add_compressed(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_compressed_base85	nuklear/nuklear.h	/^nk_font_atlas_add_compressed_base85(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_default	nuklear/nuklear.h	/^nk_font_atlas_add_default(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_from_file	nuklear/nuklear.h	/^nk_font_atlas_add_from_file(struct nk_font_atlas *atlas, const char *file_path,$/;"	f
nk_font_atlas_add_from_memory	nuklear/nuklear.h	/^nk_font_atlas_add_from_memory(struct nk_font_atlas *atlas, void *memory,$/;"	f
nk_font_atlas_bake	nuklear/nuklear.h	/^nk_font_atlas_bake(struct nk_font_atlas *atlas, int *width, int *height,$/;"	f
nk_font_atlas_begin	nuklear/nuklear.h	/^nk_font_atlas_begin(struct nk_font_atlas *atlas)$/;"	f
nk_font_atlas_clear	nuklear/nuklear.h	/^nk_font_atlas_clear(struct nk_font_atlas *atlas)$/;"	f
nk_font_atlas_end	nuklear/nuklear.h	/^nk_font_atlas_end(struct nk_font_atlas *atlas, nk_handle texture,$/;"	f
nk_font_atlas_format	nuklear/nuklear.h	/^enum nk_font_atlas_format {$/;"	g
nk_font_atlas_init	nuklear/nuklear.h	/^nk_font_atlas_init(struct nk_font_atlas *atlas, struct nk_allocator *alloc)$/;"	f
nk_font_atlas_init_custom	nuklear/nuklear.h	/^nk_font_atlas_init_custom(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_init_default	nuklear/nuklear.h	/^nk_font_atlas_init_default(struct nk_font_atlas *atlas)$/;"	f
nk_font_bake	nuklear/nuklear.h	/^nk_font_bake(struct nk_font_baker *baker, void *image_memory, int width, int height,$/;"	f
nk_font_bake_convert	nuklear/nuklear.h	/^nk_font_bake_convert(void *out_memory, int img_width, int img_height,$/;"	f
nk_font_bake_custom_data	nuklear/nuklear.h	/^nk_font_bake_custom_data(void *img_memory, int img_width, int img_height,$/;"	f
nk_font_bake_data	nuklear/nuklear.h	/^struct nk_font_bake_data {$/;"	s
nk_font_bake_pack	nuklear/nuklear.h	/^nk_font_bake_pack(struct nk_font_baker *baker,$/;"	f
nk_font_baker	nuklear/nuklear.h	/^nk_font_baker(void *memory, int glyph_count, int count, struct nk_allocator *alloc)$/;"	f
nk_font_baker	nuklear/nuklear.h	/^struct nk_font_baker {$/;"	s
nk_font_baker_memory	nuklear/nuklear.h	/^nk_font_baker_memory(nk_size *temp, int *glyph_count,$/;"	f
nk_font_chinese_glyph_ranges	nuklear/nuklear.h	/^nk_font_chinese_glyph_ranges(void)$/;"	f
nk_font_config	nuklear/nuklear.h	/^nk_font_config(float pixel_height)$/;"	f
nk_font_config	nuklear/nuklear.h	/^struct nk_font_config {$/;"	s
nk_font_coord_type	nuklear/nuklear.h	/^enum nk_font_coord_type {$/;"	g
nk_font_cyrillic_glyph_ranges	nuklear/nuklear.h	/^nk_font_cyrillic_glyph_ranges(void)$/;"	f
nk_font_default_glyph_ranges	nuklear/nuklear.h	/^nk_font_default_glyph_ranges(void)$/;"	f
nk_font_find_glyph	nuklear/nuklear.h	/^nk_font_find_glyph(struct nk_font *font, nk_rune unicode)$/;"	f
nk_font_glyph	nuklear/nuklear.h	/^struct nk_font_glyph {$/;"	s
nk_font_init	nuklear/nuklear.h	/^nk_font_init(struct nk_font *font, float pixel_height,$/;"	f
nk_font_korean_glyph_ranges	nuklear/nuklear.h	/^nk_font_korean_glyph_ranges(void)$/;"	f
nk_font_query_font_glyph	nuklear/nuklear.h	/^nk_font_query_font_glyph(nk_handle handle, float height,$/;"	f
nk_font_text_width	nuklear/nuklear.h	/^nk_font_text_width(nk_handle handle, float height, const char *text, int len)$/;"	f
nk_foreach	nuklear/nuklear.h	/^#define                         nk_foreach(/;"	d
nk_free	nuklear/nuklear.h	/^nk_free(struct nk_context *ctx)$/;"	f
nk_free_page_element	nuklear/nuklear.h	/^nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)$/;"	f
nk_free_table	nuklear/nuklear.h	/^nk_free_table(struct nk_context *ctx, struct nk_table *tbl)$/;"	f
nk_free_window	nuklear/nuklear.h	/^nk_free_window(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_ftos	nuklear/nuklear.h	/^nk_ftos(char *s, float n)$/;"	f
nk_get_null_rect	nuklear/nuklear.h	/^nk_get_null_rect(void)$/;"	f
nk_gflw3_scroll_callback	nuklear/nuklear_glfw_gl3.h	/^nk_gflw3_scroll_callback(GLFWwindow *win, double xoff, double yoff)$/;"	f
nk_glfw	nuklear/nuklear_glfw_gl3.h	/^static struct nk_glfw {$/;"	s
nk_glfw3_char_callback	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_char_callback(GLFWwindow *win, unsigned int codepoint)$/;"	f
nk_glfw3_clipbard_copy	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_clipbard_copy(nk_handle usr, const char *text, int len)$/;"	f
nk_glfw3_clipbard_paste	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_clipbard_paste(nk_handle usr, struct nk_text_edit *edit)$/;"	f
nk_glfw3_device_create	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_create(void)$/;"	f
nk_glfw3_device_destroy	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_destroy(void)$/;"	f
nk_glfw3_device_upload_atlas	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_upload_atlas(const void *image, int width, int height)$/;"	f
nk_glfw3_font_stash_begin	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_font_stash_begin(struct nk_font_atlas **atlas)$/;"	f
nk_glfw3_font_stash_end	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_font_stash_end(void)$/;"	f
nk_glfw3_init	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_init(GLFWwindow *win, enum nk_glfw_init_state init_state)$/;"	f
nk_glfw3_new_frame	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_new_frame(void)$/;"	f
nk_glfw3_render	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_render(enum nk_anti_aliasing AA, int max_vertex_buffer, int max_element_buffer)$/;"	f
nk_glfw3_shutdown	nuklear/nuklear_glfw_gl3.h	/^void nk_glfw3_shutdown(void)$/;"	f
nk_glfw_device	nuklear/nuklear_glfw_gl3.h	/^struct nk_glfw_device {$/;"	s
nk_glfw_init_state	nuklear/nuklear_glfw_gl3.h	/^enum nk_glfw_init_state{$/;"	g
nk_glyph	nuklear/nuklear.h	/^typedef char nk_glyph[NK_UTF_SIZE];$/;"	t
nk_group_begin	nuklear/nuklear.h	/^nk_group_begin(struct nk_context *ctx, struct nk_panel *layout, const char *title,$/;"	f
nk_group_end	nuklear/nuklear.h	/^nk_group_end(struct nk_context *ctx)$/;"	f
nk_handle	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	t	typeref:union:__anon2
nk_handle_id	nuklear/nuklear.h	/^nk_handle_id(int id)$/;"	f
nk_handle_ptr	nuklear/nuklear.h	/^nk_handle_ptr(void *ptr)$/;"	f
nk_hash	nuklear/nuklear.h	/^typedef NK_UINT32 nk_hash;$/;"	t
nk_hash	nuklear/nuklear.h	/^typedef uint32_t nk_hash;$/;"	t
nk_heading	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	g
nk_helper	nuklear/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	s
nk_helper	nuklear/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	s
nk_hsv	nuklear/nuklear.h	/^nk_hsv(int h, int s, int v)$/;"	f
nk_hsv_bv	nuklear/nuklear.h	/^nk_hsv_bv(const nk_byte *c)$/;"	f
nk_hsv_f	nuklear/nuklear.h	/^nk_hsv_f(float h, float s, float v)$/;"	f
nk_hsv_fv	nuklear/nuklear.h	/^nk_hsv_fv(const float *c)$/;"	f
nk_hsv_iv	nuklear/nuklear.h	/^nk_hsv_iv(const int *c)$/;"	f
nk_hsva	nuklear/nuklear.h	/^nk_hsva(int h, int s, int v, int a)$/;"	f
nk_hsva_bv	nuklear/nuklear.h	/^nk_hsva_bv(const nk_byte *c)$/;"	f
nk_hsva_f	nuklear/nuklear.h	/^nk_hsva_f(float h, float s, float v, float a)$/;"	f
nk_hsva_fv	nuklear/nuklear.h	/^nk_hsva_fv(const float *c)$/;"	f
nk_hsva_iv	nuklear/nuklear.h	/^nk_hsva_iv(const int *c)$/;"	f
nk_iceil	nuklear/nuklear.h	/^nk_iceil(float x)$/;"	f
nk_ifloor	nuklear/nuklear.h	/^nk_ifloor(float x)$/;"	f
nk_image	nuklear/nuklear.h	/^nk_image(struct nk_context *ctx, struct nk_image img)$/;"	f
nk_image	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	s
nk_image_id	nuklear/nuklear.h	/^nk_image_id(int id)$/;"	f
nk_image_is_subimage	nuklear/nuklear.h	/^nk_image_is_subimage(const struct nk_image* img)$/;"	f
nk_image_ptr	nuklear/nuklear.h	/^nk_image_ptr(void *ptr)$/;"	f
nk_init	nuklear/nuklear.h	/^nk_init(struct nk_context *ctx, struct nk_allocator *alloc,$/;"	f
nk_init_custom	nuklear/nuklear.h	/^nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f
nk_init_default	nuklear/nuklear.h	/^nk_init_default(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_init_fixed	nuklear/nuklear.h	/^nk_init_fixed(struct nk_context *ctx, void *memory, nk_size size,$/;"	f
nk_input	nuklear/nuklear.h	/^struct nk_input {$/;"	s
nk_input_any_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_any_mouse_click_in_rect(const struct nk_input *in, struct nk_rect b)$/;"	f
nk_input_begin	nuklear/nuklear.h	/^nk_input_begin(struct nk_context *ctx)$/;"	f
nk_input_button	nuklear/nuklear.h	/^nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, int down)$/;"	f
nk_input_char	nuklear/nuklear.h	/^nk_input_char(struct nk_context *ctx, char c)$/;"	f
nk_input_end	nuklear/nuklear.h	/^nk_input_end(struct nk_context *ctx)$/;"	f
nk_input_glyph	nuklear/nuklear.h	/^nk_input_glyph(struct nk_context *ctx, const nk_glyph glyph)$/;"	f
nk_input_has_mouse_click	nuklear/nuklear.h	/^nk_input_has_mouse_click(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_has_mouse_click_down_in_rect	nuklear/nuklear.h	/^nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_has_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_key_down	nuklear/nuklear.h	/^nk_input_is_key_down(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_key_pressed	nuklear/nuklear.h	/^nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_key_released	nuklear/nuklear.h	/^nk_input_is_key_released(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_mouse_click_down_in_rect	nuklear/nuklear.h	/^nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_is_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_mouse_down	nuklear/nuklear.h	/^nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_is_mouse_hovering_rect	nuklear/nuklear.h	/^nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f
nk_input_is_mouse_pressed	nuklear/nuklear.h	/^nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_is_mouse_prev_hovering_rect	nuklear/nuklear.h	/^nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f
nk_input_is_mouse_released	nuklear/nuklear.h	/^nk_input_is_mouse_released(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_key	nuklear/nuklear.h	/^nk_input_key(struct nk_context *ctx, enum nk_keys key, int down)$/;"	f
nk_input_motion	nuklear/nuklear.h	/^nk_input_motion(struct nk_context *ctx, int x, int y)$/;"	f
nk_input_mouse_clicked	nuklear/nuklear.h	/^nk_input_mouse_clicked(const struct nk_input *i, enum nk_buttons id, struct nk_rect rect)$/;"	f
nk_input_scroll	nuklear/nuklear.h	/^nk_input_scroll(struct nk_context *ctx, float y)$/;"	f
nk_input_unicode	nuklear/nuklear.h	/^nk_input_unicode(struct nk_context *ctx, nk_rune unicode)$/;"	f
nk_insert_window	nuklear/nuklear.h	/^nk_insert_window(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_int	nuklear/nuklear.h	/^typedef NK_INT32 nk_int;$/;"	t
nk_int	nuklear/nuklear.h	/^typedef int nk_int;$/;"	t
nk_int	nuklear/nuklear.h	/^typedef int32_t nk_int;$/;"	t
nk_inv_sqrt	nuklear/nuklear.h	/^nk_inv_sqrt(float number)$/;"	f
nk_is_lower	nuklear/nuklear.h	/^NK_INTERN int nk_is_lower(int c) {return (c >= 'a' && c <= 'z') || (c >= 0xE0 && c <= 0xFF);}$/;"	f
nk_is_upper	nuklear/nuklear.h	/^NK_INTERN int nk_is_upper(int c){return (c >= 'A' && c <= 'Z') || (c >= 0xC0 && c <= 0xDF);}$/;"	f
nk_is_word_boundary	nuklear/nuklear.h	/^nk_is_word_boundary( struct nk_text_edit *state, int idx)$/;"	f
nk_item_is_any_active	nuklear/nuklear.h	/^nk_item_is_any_active(struct nk_context *ctx)$/;"	f
nk_key	nuklear/nuklear.h	/^struct nk_key {$/;"	s
nk_keyboard	nuklear/nuklear.h	/^struct nk_keyboard {$/;"	s
nk_keys	nuklear/nuklear.h	/^enum nk_keys {$/;"	g
nk_label	nuklear/nuklear.h	/^nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)$/;"	f
nk_label_colored	nuklear/nuklear.h	/^nk_label_colored(struct nk_context *ctx, const char *str, nk_flags align,$/;"	f
nk_label_colored_wrap	nuklear/nuklear.h	/^nk_label_colored_wrap(struct nk_context *ctx, const char *str, struct nk_color color)$/;"	f
nk_label_wrap	nuklear/nuklear.h	/^nk_label_wrap(struct nk_context *ctx, const char *str)$/;"	f
nk_labelf	nuklear/nuklear.h	/^nk_labelf(struct nk_context *ctx, nk_flags flags, const char *fmt, ...)$/;"	f
nk_labelf_colored	nuklear/nuklear.h	/^nk_labelf_colored(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_labelf_colored_wrap	nuklear/nuklear.h	/^nk_labelf_colored_wrap(struct nk_context *ctx, struct nk_color color,$/;"	f
nk_labelf_wrap	nuklear/nuklear.h	/^nk_labelf_wrap(struct nk_context *ctx, const char *fmt,...)$/;"	f
nk_layout_format	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	g
nk_layout_peek	nuklear/nuklear.h	/^nk_layout_peek(struct nk_rect *bounds, struct nk_context *ctx)$/;"	f
nk_layout_row	nuklear/nuklear.h	/^nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_row_begin	nuklear/nuklear.h	/^nk_layout_row_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_row_dynamic	nuklear/nuklear.h	/^nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)$/;"	f
nk_layout_row_end	nuklear/nuklear.h	/^nk_layout_row_end(struct nk_context *ctx)$/;"	f
nk_layout_row_push	nuklear/nuklear.h	/^nk_layout_row_push(struct nk_context *ctx, float ratio_or_width)$/;"	f
nk_layout_row_static	nuklear/nuklear.h	/^nk_layout_row_static(struct nk_context *ctx, float height, int item_width, int cols)$/;"	f
nk_layout_space_begin	nuklear/nuklear.h	/^nk_layout_space_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_space_bounds	nuklear/nuklear.h	/^nk_layout_space_bounds(struct nk_context *ctx)$/;"	f
nk_layout_space_end	nuklear/nuklear.h	/^nk_layout_space_end(struct nk_context *ctx)$/;"	f
nk_layout_space_push	nuklear/nuklear.h	/^nk_layout_space_push(struct nk_context *ctx, struct nk_rect rect)$/;"	f
nk_layout_space_rect_to_local	nuklear/nuklear.h	/^nk_layout_space_rect_to_local(struct nk_context *ctx, struct nk_rect ret)$/;"	f
nk_layout_space_rect_to_screen	nuklear/nuklear.h	/^nk_layout_space_rect_to_screen(struct nk_context *ctx, struct nk_rect ret)$/;"	f
nk_layout_space_to_local	nuklear/nuklear.h	/^nk_layout_space_to_local(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f
nk_layout_space_to_screen	nuklear/nuklear.h	/^nk_layout_space_to_screen(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f
nk_layout_widget_space	nuklear/nuklear.h	/^nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,$/;"	f
nk_log10	nuklear/nuklear.h	/^nk_log10(float n)$/;"	f
nk_malloc	nuklear/nuklear.h	/^NK_INTERN void* nk_malloc(nk_handle unused, void *old,nk_size size)$/;"	f
nk_memcopy	nuklear/nuklear.h	/^nk_memcopy(void *dst0, const void *src0, nk_size length)$/;"	f
nk_memory	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	s
nk_memory_status	nuklear/nuklear.h	/^struct nk_memory_status {$/;"	s
nk_memset	nuklear/nuklear.h	/^nk_memset(void *ptr, int c0, nk_size size)$/;"	f
nk_menu_begin	nuklear/nuklear.h	/^nk_menu_begin(struct nk_panel *layout, struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_menu_begin_image	nuklear/nuklear.h	/^nk_menu_begin_image(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_image_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_image_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_image_text	nuklear/nuklear.h	/^nk_menu_begin_image_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_symbol	nuklear/nuklear.h	/^nk_menu_begin_symbol(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_symbol_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_symbol_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_symbol_text	nuklear/nuklear.h	/^nk_menu_begin_symbol_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_begin_text	nuklear/nuklear.h	/^nk_menu_begin_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_menu_close	nuklear/nuklear.h	/^NK_API void nk_menu_close(struct nk_context *ctx)$/;"	f
nk_menu_end	nuklear/nuklear.h	/^nk_menu_end(struct nk_context *ctx)$/;"	f
nk_menu_item_image_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_menu_item_image_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_menu_item_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_menu_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_menu_item_symbol_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_menu_item_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_text(struct nk_context *ctx, const char *title, int len, nk_flags align)$/;"	f
nk_menu_state	nuklear/nuklear.h	/^struct nk_menu_state {$/;"	s
nk_menubar_begin	nuklear/nuklear.h	/^nk_menubar_begin(struct nk_context *ctx)$/;"	f
nk_menubar_end	nuklear/nuklear.h	/^nk_menubar_end(struct nk_context *ctx)$/;"	f
nk_mfree	nuklear/nuklear.h	/^NK_INTERN void nk_mfree(nk_handle unused, void *ptr)$/;"	f
nk_modify	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	g
nk_mouse	nuklear/nuklear.h	/^struct nk_mouse {$/;"	s
nk_mouse_button	nuklear/nuklear.h	/^struct nk_mouse_button {$/;"	s
nk_murmur_hash	nuklear/nuklear.h	/^nk_murmur_hash(const void * key, int len, nk_hash seed)$/;"	f
nk_nonblock_begin	nuklear/nuklear.h	/^nk_nonblock_begin(struct nk_panel *layout, struct nk_context *ctx,$/;"	f
nk_null_rect	nuklear/nuklear.h	/^NK_GLOBAL const struct nk_rect nk_null_rect = {-8192.0f, -8192.0f, 16384, 16384};$/;"	v	typeref:struct:nk_rect
nk_option_label	nuklear/nuklear.h	/^nk_option_label(struct nk_context *ctx, const char *label, int active)$/;"	f
nk_option_text	nuklear/nuklear.h	/^nk_option_text(struct nk_context *ctx, const char *text, int len, int is_active)$/;"	f
nk_orientation	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	g
nk_pad_rect	nuklear/nuklear.h	/^nk_pad_rect(struct nk_rect r, struct nk_vec2 pad)$/;"	f
nk_page	nuklear/nuklear.h	/^struct nk_page {$/;"	s
nk_page_data	nuklear/nuklear.h	/^union nk_page_data {$/;"	u
nk_page_element	nuklear/nuklear.h	/^struct nk_page_element {$/;"	s
nk_panel	nuklear/nuklear.h	/^struct nk_panel {$/;"	s
nk_panel_alloc_row	nuklear/nuklear.h	/^nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_panel_alloc_space	nuklear/nuklear.h	/^nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f
nk_panel_begin	nuklear/nuklear.h	/^nk_panel_begin(struct nk_context *ctx, const char *title)$/;"	f
nk_panel_end	nuklear/nuklear.h	/^nk_panel_end(struct nk_context *ctx)$/;"	f
nk_panel_flags	nuklear/nuklear.h	/^enum nk_panel_flags {$/;"	g
nk_panel_layout	nuklear/nuklear.h	/^nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_parse_hex	nuklear/nuklear.h	/^nk_parse_hex(const char *p, int length)$/;"	f
nk_paste_f	nuklear/nuklear.h	/^typedef void(*nk_paste_f)(nk_handle, struct nk_text_edit*);$/;"	t
nk_plot	nuklear/nuklear.h	/^nk_plot(struct nk_context *ctx, enum nk_chart_type type, const float *values,$/;"	f
nk_plot_function	nuklear/nuklear.h	/^nk_plot_function(struct nk_context *ctx, enum nk_chart_type type, void *userdata,$/;"	f
nk_pool	nuklear/nuklear.h	/^struct nk_pool {$/;"	s
nk_pool_alloc	nuklear/nuklear.h	/^nk_pool_alloc(struct nk_pool *pool)$/;"	f
nk_pool_free	nuklear/nuklear.h	/^nk_pool_free(struct nk_pool *pool)$/;"	f
nk_pool_init	nuklear/nuklear.h	/^nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,$/;"	f
nk_pool_init_fixed	nuklear/nuklear.h	/^nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)$/;"	f
nk_popup_begin	nuklear/nuklear.h	/^nk_popup_begin(struct nk_context *ctx, struct nk_panel *layout,$/;"	f
nk_popup_buffer	nuklear/nuklear.h	/^struct nk_popup_buffer {$/;"	s
nk_popup_close	nuklear/nuklear.h	/^nk_popup_close(struct nk_context *ctx)$/;"	f
nk_popup_end	nuklear/nuklear.h	/^nk_popup_end(struct nk_context *ctx)$/;"	f
nk_popup_state	nuklear/nuklear.h	/^struct nk_popup_state {$/;"	s
nk_popup_type	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	g
nk_pow	nuklear/nuklear.h	/^nk_pow(float x, int n)$/;"	f
nk_prog	nuklear/nuklear.h	/^NK_API nk_size nk_prog(struct nk_context *ctx, nk_size cur, nk_size max, int modifyable)$/;"	f
nk_proggy_clean_ttf_compressed_data_base85	nuklear/nuklear.h	/^NK_GLOBAL const char nk_proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v
nk_progress	nuklear/nuklear.h	/^nk_progress(struct nk_context *ctx, nk_size *cur, nk_size max, int is_modifyable)$/;"	f
nk_progress_behavior	nuklear/nuklear.h	/^nk_progress_behavior(nk_flags *state, const struct nk_input *in,$/;"	f
nk_property	nuklear/nuklear.h	/^nk_property(struct nk_context *ctx, const char *name, float min, float val,$/;"	f
nk_property_behavior	nuklear/nuklear.h	/^nk_property_behavior(nk_flags *ws, const struct nk_input *in,$/;"	f
nk_property_filter	nuklear/nuklear.h	/^enum nk_property_filter {$/;"	g
nk_property_float	nuklear/nuklear.h	/^nk_property_float(struct nk_context *ctx, const char *name,$/;"	f
nk_property_int	nuklear/nuklear.h	/^nk_property_int(struct nk_context *ctx, const char *name,$/;"	f
nk_property_state	nuklear/nuklear.h	/^struct nk_property_state {$/;"	s
nk_property_status	nuklear/nuklear.h	/^enum nk_property_status {$/;"	g
nk_propertyf	nuklear/nuklear.h	/^nk_propertyf(struct nk_context *ctx, const char *name, float min,$/;"	f
nk_propertyi	nuklear/nuklear.h	/^nk_propertyi(struct nk_context *ctx, const char *name, int min, int val,$/;"	f
nk_ptr	nuklear/nuklear.h	/^typedef NK_POINTER_TYPE nk_ptr;$/;"	t
nk_ptr	nuklear/nuklear.h	/^typedef uintptr_t nk_ptr;$/;"	t
nk_ptr	nuklear/nuklear.h	/^typedef unsigned long nk_ptr;$/;"	t
nk_ptr_add	nuklear/nuklear.h	/^#define nk_ptr_add(/;"	d
nk_ptr_add_const	nuklear/nuklear.h	/^#define nk_ptr_add_const(/;"	d
nk_push_scissor	nuklear/nuklear.h	/^nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)$/;"	f
nk_push_table	nuklear/nuklear.h	/^nk_push_table(struct nk_window *win, struct nk_table *tbl)$/;"	f
nk_query_font_glyph_f	nuklear/nuklear.h	/^typedef void(*nk_query_font_glyph_f)(nk_handle handle, float font_height,$/;"	t
nk_radio_label	nuklear/nuklear.h	/^nk_radio_label(struct nk_context *ctx, const char *label, int *active)$/;"	f
nk_radio_text	nuklear/nuklear.h	/^nk_radio_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f
nk_range_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_range_align = NK_ALIGNOF(struct nk_tt_pack_range);$/;"	v
nk_range_count	nuklear/nuklear.h	/^nk_range_count(const nk_rune *range)$/;"	f
nk_range_glyph_count	nuklear/nuklear.h	/^nk_range_glyph_count(const nk_rune *range, int count)$/;"	f
nk_rect	nuklear/nuklear.h	/^nk_rect(float x, float y, float w, float h)$/;"	f
nk_rect	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	s
nk_rect_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_rect_align = NK_ALIGNOF(struct nk_rp_rect);$/;"	v
nk_rect_height_compare	nuklear/nuklear.h	/^nk_rect_height_compare(const void *a, const void *b)$/;"	f
nk_rect_original_order	nuklear/nuklear.h	/^nk_rect_original_order(const void *a, const void *b)$/;"	f
nk_rect_pos	nuklear/nuklear.h	/^nk_rect_pos(struct nk_rect r)$/;"	f
nk_rect_size	nuklear/nuklear.h	/^nk_rect_size(struct nk_rect r)$/;"	f
nk_recta	nuklear/nuklear.h	/^nk_recta(struct nk_vec2 pos, struct nk_vec2 size)$/;"	f
nk_recti	nuklear/nuklear.h	/^nk_recti(int x, int y, int w, int h)$/;"	f
nk_recti	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	s
nk_rectiv	nuklear/nuklear.h	/^nk_rectiv(const int *r)$/;"	f
nk_rectv	nuklear/nuklear.h	/^nk_rectv(const float *r)$/;"	f
nk_remove_table	nuklear/nuklear.h	/^nk_remove_table(struct nk_window *win, struct nk_table *tbl)$/;"	f
nk_remove_window	nuklear/nuklear.h	/^nk_remove_window(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_rgb	nuklear/nuklear.h	/^nk_rgb(int r, int g, int b)$/;"	f
nk_rgb_bv	nuklear/nuklear.h	/^nk_rgb_bv(const nk_byte* c)$/;"	f
nk_rgb_f	nuklear/nuklear.h	/^nk_rgb_f(float r, float g, float b)$/;"	f
nk_rgb_fv	nuklear/nuklear.h	/^nk_rgb_fv(const float *c)$/;"	f
nk_rgb_hex	nuklear/nuklear.h	/^nk_rgb_hex(const char *rgb)$/;"	f
nk_rgb_iv	nuklear/nuklear.h	/^nk_rgb_iv(const int *c)$/;"	f
nk_rgba	nuklear/nuklear.h	/^nk_rgba(int r, int g, int b, int a)$/;"	f
nk_rgba_bv	nuklear/nuklear.h	/^nk_rgba_bv(const nk_byte *c)$/;"	f
nk_rgba_f	nuklear/nuklear.h	/^nk_rgba_f(float r, float g, float b, float a)$/;"	f
nk_rgba_fv	nuklear/nuklear.h	/^nk_rgba_fv(const float *c)$/;"	f
nk_rgba_hex	nuklear/nuklear.h	/^nk_rgba_hex(const char *rgb)$/;"	f
nk_rgba_iv	nuklear/nuklear.h	/^nk_rgba_iv(const int *c)$/;"	f
nk_rgba_u32	nuklear/nuklear.h	/^nk_rgba_u32(nk_uint in)$/;"	f
nk_round_up_pow2	nuklear/nuklear.h	/^nk_round_up_pow2(nk_uint v)$/;"	f
nk_row_layout	nuklear/nuklear.h	/^nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_row_layout	nuklear/nuklear.h	/^struct nk_row_layout {$/;"	s
nk_rp__findresult	nuklear/nuklear.h	/^struct nk_rp__findresult {$/;"	s
nk_rp__skyline_find_best_pos	nuklear/nuklear.h	/^nk_rp__skyline_find_best_pos(struct nk_rp_context *c, int width, int height)$/;"	f
nk_rp__skyline_find_min_y	nuklear/nuklear.h	/^nk_rp__skyline_find_min_y(struct nk_rp_context *c, struct nk_rp_node *first,$/;"	f
nk_rp__skyline_pack_rectangle	nuklear/nuklear.h	/^nk_rp__skyline_pack_rectangle(struct nk_rp_context *context, int width, int height)$/;"	f
nk_rp_context	nuklear/nuklear.h	/^struct nk_rp_context {$/;"	s
nk_rp_coord	nuklear/nuklear.h	/^typedef unsigned short nk_rp_coord;$/;"	t
nk_rp_init_target	nuklear/nuklear.h	/^nk_rp_init_target(struct nk_rp_context *context, int width, int height,$/;"	f
nk_rp_node	nuklear/nuklear.h	/^struct nk_rp_node {$/;"	s
nk_rp_pack_rects	nuklear/nuklear.h	/^nk_rp_pack_rects(struct nk_rp_context *context, struct nk_rp_rect *rects, int num_rects)$/;"	f
nk_rp_qsort	nuklear/nuklear.h	/^nk_rp_qsort(struct nk_rp_rect *array, unsigned int len, int(*cmp)(const void*,const void*))$/;"	f
nk_rp_rect	nuklear/nuklear.h	/^struct nk_rp_rect {$/;"	s
nk_rp_setup_allow_out_of_mem	nuklear/nuklear.h	/^nk_rp_setup_allow_out_of_mem(struct nk_rp_context *context, int allow_out_of_mem)$/;"	f
nk_rune	nuklear/nuklear.h	/^typedef nk_uint nk_rune;$/;"	t
nk_rune	nuklear/nuklear.h	/^typedef uint32_t nk_rune;$/;"	t
nk_scroll	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	s
nk_scrollbar_behavior	nuklear/nuklear.h	/^nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,$/;"	f
nk_select_image_label	nuklear/nuklear.h	/^NK_API int nk_select_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_select_image_text	nuklear/nuklear.h	/^NK_API int nk_select_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_select_label	nuklear/nuklear.h	/^NK_API int nk_select_label(struct nk_context *ctx, const char *str, nk_flags align, int value)$/;"	f
nk_select_text	nuklear/nuklear.h	/^NK_API int nk_select_text(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_selectable_image_label	nuklear/nuklear.h	/^NK_API int nk_selectable_image_label(struct nk_context *ctx,struct nk_image img,$/;"	f
nk_selectable_image_text	nuklear/nuklear.h	/^nk_selectable_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_selectable_label	nuklear/nuklear.h	/^NK_API int nk_selectable_label(struct nk_context *ctx, const char *str, nk_flags align, int *value)$/;"	f
nk_selectable_text	nuklear/nuklear.h	/^nk_selectable_text(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_set_user_data	nuklear/nuklear.h	/^nk_set_user_data(struct nk_context *ctx, nk_handle handle)$/;"	f
nk_setup	nuklear/nuklear.h	/^nk_setup(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_short	nuklear/nuklear.h	/^typedef NK_INT16 nk_short;$/;"	t
nk_short	nuklear/nuklear.h	/^typedef int16_t nk_short;$/;"	t
nk_short	nuklear/nuklear.h	/^typedef short nk_short;$/;"	t
nk_show_states	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	g
nk_shrink_rect	nuklear/nuklear.h	/^nk_shrink_rect(struct nk_rect r, float amount)$/;"	f
nk_sin	nuklear/nuklear.h	/^nk_sin(float x)$/;"	f
nk_size	nuklear/nuklear.h	/^typedef NK_SIZE_TYPE nk_size;$/;"	t
nk_size	nuklear/nuklear.h	/^typedef uintptr_t nk_size;$/;"	t
nk_size	nuklear/nuklear.h	/^typedef unsigned long nk_size;$/;"	t
nk_slide_float	nuklear/nuklear.h	/^nk_slide_float(struct nk_context *ctx, float min, float val, float max, float step)$/;"	f
nk_slide_int	nuklear/nuklear.h	/^nk_slide_int(struct nk_context *ctx, int min, int val, int max, int step)$/;"	f
nk_slider_behavior	nuklear/nuklear.h	/^nk_slider_behavior(nk_flags *state, struct nk_rect *cursor,$/;"	f
nk_slider_float	nuklear/nuklear.h	/^nk_slider_float(struct nk_context *ctx, float min_value, float *value, float max_value,$/;"	f
nk_slider_int	nuklear/nuklear.h	/^nk_slider_int(struct nk_context *ctx, int min, int *val, int max, int step)$/;"	f
nk_spacing	nuklear/nuklear.h	/^nk_spacing(struct nk_context *ctx, int cols)$/;"	f
nk_sqrt	nuklear/nuklear.h	/^nk_sqrt(float x)$/;"	f
nk_start	nuklear/nuklear.h	/^nk_start(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_start_buffer	nuklear/nuklear.h	/^nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f
nk_start_popup	nuklear/nuklear.h	/^nk_start_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_str	nuklear/nuklear.h	/^struct nk_str {$/;"	s
nk_str_append_str_char	nuklear/nuklear.h	/^nk_str_append_str_char(struct nk_str *s, const char *str)$/;"	f
nk_str_append_str_runes	nuklear/nuklear.h	/^nk_str_append_str_runes(struct nk_str *str, const nk_rune *runes)$/;"	f
nk_str_append_str_utf8	nuklear/nuklear.h	/^nk_str_append_str_utf8(struct nk_str *str, const char *text)$/;"	f
nk_str_append_text_char	nuklear/nuklear.h	/^nk_str_append_text_char(struct nk_str *s, const char *str, int len)$/;"	f
nk_str_append_text_runes	nuklear/nuklear.h	/^nk_str_append_text_runes(struct nk_str *str, const nk_rune *text, int len)$/;"	f
nk_str_append_text_utf8	nuklear/nuklear.h	/^nk_str_append_text_utf8(struct nk_str *str, const char *text, int len)$/;"	f
nk_str_at_char	nuklear/nuklear.h	/^nk_str_at_char(struct nk_str *s, int pos)$/;"	f
nk_str_at_char_const	nuklear/nuklear.h	/^nk_str_at_char_const(const struct nk_str *s, int pos)$/;"	f
nk_str_at_const	nuklear/nuklear.h	/^nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f
nk_str_at_rune	nuklear/nuklear.h	/^nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f
nk_str_clear	nuklear/nuklear.h	/^nk_str_clear(struct nk_str *str)$/;"	f
nk_str_delete_chars	nuklear/nuklear.h	/^nk_str_delete_chars(struct nk_str *s, int pos, int len)$/;"	f
nk_str_delete_runes	nuklear/nuklear.h	/^nk_str_delete_runes(struct nk_str *s, int pos, int len)$/;"	f
nk_str_free	nuklear/nuklear.h	/^nk_str_free(struct nk_str *str)$/;"	f
nk_str_get	nuklear/nuklear.h	/^nk_str_get(struct nk_str *s)$/;"	f
nk_str_get_const	nuklear/nuklear.h	/^nk_str_get_const(const struct nk_str *s)$/;"	f
nk_str_init	nuklear/nuklear.h	/^nk_str_init(struct nk_str *str, const struct nk_allocator *alloc, nk_size size)$/;"	f
nk_str_init_default	nuklear/nuklear.h	/^nk_str_init_default(struct nk_str *str)$/;"	f
nk_str_init_fixed	nuklear/nuklear.h	/^nk_str_init_fixed(struct nk_str *str, void *memory, nk_size size)$/;"	f
nk_str_insert_at_char	nuklear/nuklear.h	/^nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)$/;"	f
nk_str_insert_at_rune	nuklear/nuklear.h	/^nk_str_insert_at_rune(struct nk_str *str, int pos, const char *cstr, int len)$/;"	f
nk_str_insert_str_char	nuklear/nuklear.h	/^NK_API int nk_str_insert_str_char(struct nk_str *str, int pos, const char *text)$/;"	f
nk_str_insert_str_runes	nuklear/nuklear.h	/^nk_str_insert_str_runes(struct nk_str *str, int pos, const nk_rune *runes)$/;"	f
nk_str_insert_str_utf8	nuklear/nuklear.h	/^nk_str_insert_str_utf8(struct nk_str *str, int pos, const char *text)$/;"	f
nk_str_insert_text_char	nuklear/nuklear.h	/^NK_API int nk_str_insert_text_char(struct nk_str *str, int pos, const char *text, int len)$/;"	f
nk_str_insert_text_runes	nuklear/nuklear.h	/^nk_str_insert_text_runes(struct nk_str *str, int pos, const nk_rune *runes, int len)$/;"	f
nk_str_insert_text_utf8	nuklear/nuklear.h	/^nk_str_insert_text_utf8(struct nk_str *str, int pos, const char *text, int len)$/;"	f
nk_str_len	nuklear/nuklear.h	/^nk_str_len(struct nk_str *s)$/;"	f
nk_str_len_char	nuklear/nuklear.h	/^nk_str_len_char(struct nk_str *s)$/;"	f
nk_str_match_here	nuklear/nuklear.h	/^nk_str_match_here(const char *regexp, const char *text)$/;"	f
nk_str_match_star	nuklear/nuklear.h	/^nk_str_match_star(int c, const char *regexp, const char *text)$/;"	f
nk_str_remove_chars	nuklear/nuklear.h	/^nk_str_remove_chars(struct nk_str *s, int len)$/;"	f
nk_str_remove_runes	nuklear/nuklear.h	/^nk_str_remove_runes(struct nk_str *str, int len)$/;"	f
nk_str_rune_at	nuklear/nuklear.h	/^nk_str_rune_at(const struct nk_str *str, int pos)$/;"	f
nk_strfilter	nuklear/nuklear.h	/^nk_strfilter(const char *text, const char *regexp)$/;"	f
nk_strfmt	nuklear/nuklear.h	/^nk_strfmt(char *buf, int buf_size, const char *fmt,...)$/;"	f
nk_strfmtv	nuklear/nuklear.h	/^nk_strfmtv(char *buf, int buf_size, const char *fmt, va_list args)$/;"	f
nk_stricmp	nuklear/nuklear.h	/^nk_stricmp(const char *s1, const char *s2)$/;"	f
nk_stricmpn	nuklear/nuklear.h	/^nk_stricmpn(const char *s1, const char *s2, int n)$/;"	f
nk_string_float_limit	nuklear/nuklear.h	/^nk_string_float_limit(char *string, int prec)$/;"	f
nk_strlen	nuklear/nuklear.h	/^nk_strlen(const char *str)$/;"	f
nk_strmatch_fuzzy_string	nuklear/nuklear.h	/^nk_strmatch_fuzzy_string(char const *str, char const *pattern, int *out_score)$/;"	f
nk_strmatch_fuzzy_text	nuklear/nuklear.h	/^nk_strmatch_fuzzy_text(const char *str, int str_len,$/;"	f
nk_stroke_arc	nuklear/nuklear.h	/^nk_stroke_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f
nk_stroke_circle	nuklear/nuklear.h	/^nk_stroke_circle(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_stroke_curve	nuklear/nuklear.h	/^nk_stroke_curve(struct nk_command_buffer *b, float ax, float ay,$/;"	f
nk_stroke_line	nuklear/nuklear.h	/^nk_stroke_line(struct nk_command_buffer *b, float x0, float y0,$/;"	f
nk_stroke_polygon	nuklear/nuklear.h	/^nk_stroke_polygon(struct nk_command_buffer *b,  float *points, int point_count,$/;"	f
nk_stroke_polyline	nuklear/nuklear.h	/^nk_stroke_polyline(struct nk_command_buffer *b, float *points, int point_count,$/;"	f
nk_stroke_rect	nuklear/nuklear.h	/^nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_stroke_triangle	nuklear/nuklear.h	/^nk_stroke_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f
nk_strtof	nuklear/nuklear.h	/^nk_strtof(float *number, const char *buffer)$/;"	f
nk_style	nuklear/nuklear.h	/^struct nk_style {$/;"	s
nk_style_button	nuklear/nuklear.h	/^struct nk_style_button {$/;"	s
nk_style_chart	nuklear/nuklear.h	/^struct nk_style_chart {$/;"	s
nk_style_color_name	nuklear/nuklear.h	/^NK_API const char *nk_style_color_name(enum nk_style_colors c)$/;"	f
nk_style_colors	nuklear/nuklear.h	/^enum nk_style_colors {$/;"	g
nk_style_combo	nuklear/nuklear.h	/^struct nk_style_combo {$/;"	s
nk_style_cursor	nuklear/nuklear.h	/^enum nk_style_cursor {$/;"	g
nk_style_default	nuklear/nuklear.h	/^NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}$/;"	f
nk_style_edit	nuklear/nuklear.h	/^struct nk_style_edit {$/;"	s
nk_style_from_table	nuklear/nuklear.h	/^nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)$/;"	f
nk_style_header_align	nuklear/nuklear.h	/^enum nk_style_header_align {$/;"	g
nk_style_item	nuklear/nuklear.h	/^struct nk_style_item {$/;"	s
nk_style_item_color	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_color(struct nk_color col)$/;"	f
nk_style_item_data	nuklear/nuklear.h	/^union nk_style_item_data {$/;"	u
nk_style_item_hide	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_hide(void)$/;"	f
nk_style_item_image	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_image(struct nk_image img)$/;"	f
nk_style_item_type	nuklear/nuklear.h	/^enum nk_style_item_type {$/;"	g
nk_style_load_all_cursors	nuklear/nuklear.h	/^nk_style_load_all_cursors(struct nk_context *ctx, struct nk_cursor *cursors)$/;"	f
nk_style_load_cursor	nuklear/nuklear.h	/^nk_style_load_cursor(struct nk_context *ctx, enum nk_style_cursor cursor,$/;"	f
nk_style_progress	nuklear/nuklear.h	/^struct nk_style_progress {$/;"	s
nk_style_property	nuklear/nuklear.h	/^struct nk_style_property {$/;"	s
nk_style_scrollbar	nuklear/nuklear.h	/^struct nk_style_scrollbar {$/;"	s
nk_style_selectable	nuklear/nuklear.h	/^struct nk_style_selectable {$/;"	s
nk_style_set_cursor	nuklear/nuklear.h	/^nk_style_set_cursor(struct nk_context *ctx, enum nk_style_cursor c)$/;"	f
nk_style_set_font	nuklear/nuklear.h	/^nk_style_set_font(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_style_slider	nuklear/nuklear.h	/^struct nk_style_slider {$/;"	s
nk_style_tab	nuklear/nuklear.h	/^struct nk_style_tab {$/;"	s
nk_style_text	nuklear/nuklear.h	/^struct nk_style_text {$/;"	s
nk_style_toggle	nuklear/nuklear.h	/^struct nk_style_toggle {$/;"	s
nk_style_window	nuklear/nuklear.h	/^struct nk_style_window {$/;"	s
nk_style_window_header	nuklear/nuklear.h	/^struct nk_style_window_header {$/;"	s
nk_subimage_id	nuklear/nuklear.h	/^nk_subimage_id(int id, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f
nk_subimage_ptr	nuklear/nuklear.h	/^nk_subimage_ptr(void *ptr, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f
nk_symbol_type	nuklear/nuklear.h	/^enum nk_symbol_type {$/;"	g
nk_table	nuklear/nuklear.h	/^struct nk_table {$/;"	s
nk_text	nuklear/nuklear.h	/^nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)$/;"	f
nk_text	nuklear/nuklear.h	/^struct nk_text {$/;"	s
nk_text_align	nuklear/nuklear.h	/^enum nk_text_align {$/;"	g
nk_text_alignment	nuklear/nuklear.h	/^enum nk_text_alignment {$/;"	g
nk_text_calculate_text_bounds	nuklear/nuklear.h	/^nk_text_calculate_text_bounds(const struct nk_user_font *font,$/;"	f
nk_text_clamp	nuklear/nuklear.h	/^nk_text_clamp(const struct nk_user_font *font, const char *text,$/;"	f
nk_text_colored	nuklear/nuklear.h	/^nk_text_colored(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_text_edit	nuklear/nuklear.h	/^struct nk_text_edit {$/;"	s
nk_text_edit_mode	nuklear/nuklear.h	/^enum nk_text_edit_mode {$/;"	g
nk_text_edit_row	nuklear/nuklear.h	/^struct nk_text_edit_row {$/;"	s
nk_text_edit_type	nuklear/nuklear.h	/^enum nk_text_edit_type {$/;"	g
nk_text_find	nuklear/nuklear.h	/^struct nk_text_find {$/;"	s
nk_text_undo_record	nuklear/nuklear.h	/^struct nk_text_undo_record {$/;"	s
nk_text_undo_state	nuklear/nuklear.h	/^struct nk_text_undo_state {$/;"	s
nk_text_width_f	nuklear/nuklear.h	/^typedef float(*nk_text_width_f)(nk_handle, float h, const char*, int len);$/;"	t
nk_text_wrap	nuklear/nuklear.h	/^nk_text_wrap(struct nk_context *ctx, const char *str, int len)$/;"	f
nk_text_wrap_colored	nuklear/nuklear.h	/^nk_text_wrap_colored(struct nk_context *ctx, const char *str,$/;"	f
nk_textedit_clamp	nuklear/nuklear.h	/^nk_textedit_clamp(struct nk_text_edit *state)$/;"	f
nk_textedit_clear_state	nuklear/nuklear.h	/^nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,$/;"	f
nk_textedit_click	nuklear/nuklear.h	/^nk_textedit_click(struct nk_text_edit *state, float x, float y,$/;"	f
nk_textedit_create_undo_record	nuklear/nuklear.h	/^nk_textedit_create_undo_record(struct nk_text_undo_state *state, int numchars)$/;"	f
nk_textedit_createundo	nuklear/nuklear.h	/^nk_textedit_createundo(struct nk_text_undo_state *state, int pos,$/;"	f
nk_textedit_cut	nuklear/nuklear.h	/^nk_textedit_cut(struct nk_text_edit *state)$/;"	f
nk_textedit_delete	nuklear/nuklear.h	/^nk_textedit_delete(struct nk_text_edit *state, int where, int len)$/;"	f
nk_textedit_delete_selection	nuklear/nuklear.h	/^nk_textedit_delete_selection(struct nk_text_edit *state)$/;"	f
nk_textedit_discard_redo	nuklear/nuklear.h	/^nk_textedit_discard_redo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_discard_undo	nuklear/nuklear.h	/^nk_textedit_discard_undo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_drag	nuklear/nuklear.h	/^nk_textedit_drag(struct nk_text_edit *state, float x, float y,$/;"	f
nk_textedit_find_charpos	nuklear/nuklear.h	/^nk_textedit_find_charpos(struct nk_text_find *find, struct nk_text_edit *state,$/;"	f
nk_textedit_flush_redo	nuklear/nuklear.h	/^nk_textedit_flush_redo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_free	nuklear/nuklear.h	/^nk_textedit_free(struct nk_text_edit *state)$/;"	f
nk_textedit_get_width	nuklear/nuklear.h	/^nk_textedit_get_width(const struct nk_text_edit *edit, int line_start, int char_id,$/;"	f
nk_textedit_init	nuklear/nuklear.h	/^nk_textedit_init(struct nk_text_edit *state, struct nk_allocator *alloc, nk_size size)$/;"	f
nk_textedit_init_default	nuklear/nuklear.h	/^nk_textedit_init_default(struct nk_text_edit *state)$/;"	f
nk_textedit_init_fixed	nuklear/nuklear.h	/^nk_textedit_init_fixed(struct nk_text_edit *state, void *memory, nk_size size)$/;"	f
nk_textedit_key	nuklear/nuklear.h	/^nk_textedit_key(struct nk_text_edit *state, enum nk_keys key, int shift_mod,$/;"	f
nk_textedit_layout_row	nuklear/nuklear.h	/^nk_textedit_layout_row(struct nk_text_edit_row *r, struct nk_text_edit *edit,$/;"	f
nk_textedit_locate_coord	nuklear/nuklear.h	/^nk_textedit_locate_coord(struct nk_text_edit *edit, float x, float y,$/;"	f
nk_textedit_makeundo_delete	nuklear/nuklear.h	/^nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)$/;"	f
nk_textedit_makeundo_insert	nuklear/nuklear.h	/^nk_textedit_makeundo_insert(struct nk_text_edit *state, int where, int length)$/;"	f
nk_textedit_makeundo_replace	nuklear/nuklear.h	/^nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,$/;"	f
nk_textedit_move_to_first	nuklear/nuklear.h	/^nk_textedit_move_to_first(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_last	nuklear/nuklear.h	/^nk_textedit_move_to_last(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_word_next	nuklear/nuklear.h	/^nk_textedit_move_to_word_next(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_word_previous	nuklear/nuklear.h	/^nk_textedit_move_to_word_previous(struct nk_text_edit *state)$/;"	f
nk_textedit_paste	nuklear/nuklear.h	/^nk_textedit_paste(struct nk_text_edit *state, char const *ctext, int len)$/;"	f
nk_textedit_prep_selection_at_cursor	nuklear/nuklear.h	/^nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)$/;"	f
nk_textedit_redo	nuklear/nuklear.h	/^nk_textedit_redo(struct nk_text_edit *state)$/;"	f
nk_textedit_select_all	nuklear/nuklear.h	/^nk_textedit_select_all(struct nk_text_edit *state)$/;"	f
nk_textedit_sortselection	nuklear/nuklear.h	/^nk_textedit_sortselection(struct nk_text_edit *state)$/;"	f
nk_textedit_text	nuklear/nuklear.h	/^nk_textedit_text(struct nk_text_edit *state, const char *text, int total_len)$/;"	f
nk_textedit_undo	nuklear/nuklear.h	/^nk_textedit_undo(struct nk_text_edit *state)$/;"	f
nk_to_lower	nuklear/nuklear.h	/^NK_INTERN int nk_to_lower(int c) {return (c >= 'A' && c <= 'Z') ? (c - ('a' + 'A')) : c;}$/;"	f
nk_toggle_behavior	nuklear/nuklear.h	/^nk_toggle_behavior(const struct nk_input *in, struct nk_rect select,$/;"	f
nk_toggle_type	nuklear/nuklear.h	/^enum nk_toggle_type {$/;"	g
nk_tooltip	nuklear/nuklear.h	/^nk_tooltip(struct nk_context *ctx, const char *text)$/;"	f
nk_tooltip_begin	nuklear/nuklear.h	/^nk_tooltip_begin(struct nk_context *ctx, struct nk_panel *layout, float width)$/;"	f
nk_tooltip_end	nuklear/nuklear.h	/^nk_tooltip_end(struct nk_context *ctx)$/;"	f
nk_tree_base	nuklear/nuklear.h	/^nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_image_push	nuklear/nuklear.h	/^#define                         nk_tree_image_push(/;"	d
nk_tree_image_push_hashed	nuklear/nuklear.h	/^nk_tree_image_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_image_push_id	nuklear/nuklear.h	/^#define                         nk_tree_image_push_id(/;"	d
nk_tree_pop	nuklear/nuklear.h	/^nk_tree_pop(struct nk_context *ctx)$/;"	f
nk_tree_push	nuklear/nuklear.h	/^#define                         nk_tree_push(/;"	d
nk_tree_push_hashed	nuklear/nuklear.h	/^nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_push_id	nuklear/nuklear.h	/^#define                         nk_tree_push_id(/;"	d
nk_tree_type	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	g
nk_triangle_from_direction	nuklear/nuklear.h	/^nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,$/;"	f
nk_true	nuklear/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon1
nk_ttBYTE	nuklear/nuklear.h	/^#define nk_ttBYTE(/;"	d
nk_ttCHAR	nuklear/nuklear.h	/^#define nk_ttCHAR(/;"	d
nk_ttLONG	nuklear/nuklear.h	/^   #define nk_ttLONG(/;"	d
nk_ttSHORT	nuklear/nuklear.h	/^    static nk_short nk_ttSHORT(const nk_byte *p)   { return (nk_short)(p[0]*256 + p[1]); }$/;"	f
nk_ttSHORT	nuklear/nuklear.h	/^   #define nk_ttSHORT(/;"	d
nk_ttULONG	nuklear/nuklear.h	/^    static nk_uint nk_ttULONG(const nk_byte *p)  { return (nk_uint)((p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]); }$/;"	f
nk_ttULONG	nuklear/nuklear.h	/^   #define nk_ttULONG(/;"	d
nk_ttUSHORT	nuklear/nuklear.h	/^    static nk_ushort nk_ttUSHORT(const nk_byte *p) { return (nk_ushort)(p[0]*256 + p[1]); }$/;"	f
nk_ttUSHORT	nuklear/nuklear.h	/^   #define nk_ttUSHORT(/;"	d
nk_tt_FindGlyphIndex	nuklear/nuklear.h	/^nk_tt_FindGlyphIndex(const struct nk_tt_fontinfo *info, int unicode_codepoint)$/;"	f
nk_tt_FlattenCurves	nuklear/nuklear.h	/^nk_tt_FlattenCurves(struct nk_tt_vertex *vertices, int num_verts,$/;"	f
nk_tt_GetFontVMetrics	nuklear/nuklear.h	/^nk_tt_GetFontVMetrics(const struct nk_tt_fontinfo *info,$/;"	f
nk_tt_GetGlyphBitmapBox	nuklear/nuklear.h	/^nk_tt_GetGlyphBitmapBox(const struct nk_tt_fontinfo *font, int glyph,$/;"	f
nk_tt_GetGlyphBitmapBoxSubpixel	nuklear/nuklear.h	/^nk_tt_GetGlyphBitmapBoxSubpixel(const struct nk_tt_fontinfo *font,$/;"	f
nk_tt_GetGlyphBox	nuklear/nuklear.h	/^nk_tt_GetGlyphBox(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f
nk_tt_GetGlyphHMetrics	nuklear/nuklear.h	/^nk_tt_GetGlyphHMetrics(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f
nk_tt_GetGlyphShape	nuklear/nuklear.h	/^nk_tt_GetGlyphShape(const struct nk_tt_fontinfo *info, struct nk_allocator *alloc,$/;"	f
nk_tt_GetPackedQuad	nuklear/nuklear.h	/^nk_tt_GetPackedQuad(struct nk_tt_packedchar *chardata, int pw, int ph,$/;"	f
nk_tt_InitFont	nuklear/nuklear.h	/^nk_tt_InitFont(struct nk_tt_fontinfo *info, const unsigned char *data2, int fontstart)$/;"	f
nk_tt_MakeGlyphBitmapSubpixel	nuklear/nuklear.h	/^nk_tt_MakeGlyphBitmapSubpixel(const struct nk_tt_fontinfo *info, unsigned char *output,$/;"	f
nk_tt_PackBegin	nuklear/nuklear.h	/^nk_tt_PackBegin(struct nk_tt_pack_context *spc, unsigned char *pixels,$/;"	f
nk_tt_PackEnd	nuklear/nuklear.h	/^nk_tt_PackEnd(struct nk_tt_pack_context *spc, struct nk_allocator *alloc)$/;"	f
nk_tt_PackFontRangesGatherRects	nuklear/nuklear.h	/^nk_tt_PackFontRangesGatherRects(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_PackFontRangesRenderIntoRects	nuklear/nuklear.h	/^nk_tt_PackFontRangesRenderIntoRects(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_PackSetOversampling	nuklear/nuklear.h	/^nk_tt_PackSetOversampling(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_Rasterize	nuklear/nuklear.h	/^nk_tt_Rasterize(struct nk_tt__bitmap *result, float flatness_in_pixels,$/;"	f
nk_tt_ScaleForMappingEmToPixels	nuklear/nuklear.h	/^nk_tt_ScaleForMappingEmToPixels(const struct nk_tt_fontinfo *info, float pixels)$/;"	f
nk_tt_ScaleForPixelHeight	nuklear/nuklear.h	/^nk_tt_ScaleForPixelHeight(const struct nk_tt_fontinfo *info, float height)$/;"	f
nk_tt__GetGlyfOffset	nuklear/nuklear.h	/^nk_tt__GetGlyfOffset(const struct nk_tt_fontinfo *info, int glyph_index)$/;"	f
nk_tt__active_edge	nuklear/nuklear.h	/^struct nk_tt__active_edge {$/;"	s
nk_tt__add_point	nuklear/nuklear.h	/^nk_tt__add_point(struct nk_tt__point *points, int n, float x, float y)$/;"	f
nk_tt__bitmap	nuklear/nuklear.h	/^struct nk_tt__bitmap{$/;"	s
nk_tt__edge	nuklear/nuklear.h	/^struct nk_tt__edge {$/;"	s
nk_tt__fill_active_edges_new	nuklear/nuklear.h	/^nk_tt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,$/;"	f
nk_tt__find_table	nuklear/nuklear.h	/^nk_tt__find_table(const nk_byte *data, nk_uint fontstart, const char *tag)$/;"	f
nk_tt__h_prefilter	nuklear/nuklear.h	/^nk_tt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f
nk_tt__handle_clipped_edge	nuklear/nuklear.h	/^nk_tt__handle_clipped_edge(float *scanline, int x, struct nk_tt__active_edge *e,$/;"	f
nk_tt__hheap	nuklear/nuklear.h	/^struct nk_tt__hheap {$/;"	s
nk_tt__hheap_alloc	nuklear/nuklear.h	/^nk_tt__hheap_alloc(struct nk_tt__hheap *hh, nk_size size)$/;"	f
nk_tt__hheap_chunk	nuklear/nuklear.h	/^struct nk_tt__hheap_chunk {$/;"	s
nk_tt__hheap_cleanup	nuklear/nuklear.h	/^nk_tt__hheap_cleanup(struct nk_tt__hheap *hh)$/;"	f
nk_tt__hheap_free	nuklear/nuklear.h	/^nk_tt__hheap_free(struct nk_tt__hheap *hh, void *p)$/;"	f
nk_tt__new_active	nuklear/nuklear.h	/^nk_tt__new_active(struct nk_tt__hheap *hh, struct nk_tt__edge *e,$/;"	f
nk_tt__oversample_shift	nuklear/nuklear.h	/^nk_tt__oversample_shift(int oversample)$/;"	f
nk_tt__point	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	s
nk_tt__rasterize	nuklear/nuklear.h	/^nk_tt__rasterize(struct nk_tt__bitmap *result, struct nk_tt__point *pts,$/;"	f
nk_tt__rasterize_sorted_edges	nuklear/nuklear.h	/^nk_tt__rasterize_sorted_edges(struct nk_tt__bitmap *result, struct nk_tt__edge *e,$/;"	f
nk_tt__sort_edges	nuklear/nuklear.h	/^nk_tt__sort_edges(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__sort_edges_ins_sort	nuklear/nuklear.h	/^nk_tt__sort_edges_ins_sort(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__sort_edges_quicksort	nuklear/nuklear.h	/^nk_tt__sort_edges_quicksort(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__tesselate_curve	nuklear/nuklear.h	/^nk_tt__tesselate_curve(struct nk_tt__point *points, int *num_points,$/;"	f
nk_tt__v_prefilter	nuklear/nuklear.h	/^nk_tt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f
nk_tt_aligned_quad	nuklear/nuklear.h	/^struct nk_tt_aligned_quad{$/;"	s
nk_tt_bakedchar	nuklear/nuklear.h	/^struct nk_tt_bakedchar {$/;"	s
nk_tt_fontinfo	nuklear/nuklear.h	/^struct nk_tt_fontinfo {$/;"	s
nk_tt_pack_context	nuklear/nuklear.h	/^struct nk_tt_pack_context {$/;"	s
nk_tt_pack_range	nuklear/nuklear.h	/^struct nk_tt_pack_range {$/;"	s
nk_tt_packedchar	nuklear/nuklear.h	/^struct nk_tt_packedchar {$/;"	s
nk_tt_setvertex	nuklear/nuklear.h	/^nk_tt_setvertex(struct nk_tt_vertex *v, nk_byte type, nk_int x, nk_int y, nk_int cx, nk_int cy)$/;"	f
nk_tt_tag	nuklear/nuklear.h	/^#define nk_tt_tag(/;"	d
nk_tt_tag4	nuklear/nuklear.h	/^#define nk_tt_tag4(/;"	d
nk_tt_vertex	nuklear/nuklear.h	/^struct nk_tt_vertex {$/;"	s
nk_uint	nuklear/nuklear.h	/^typedef NK_UINT32 nk_uint;$/;"	t
nk_uint	nuklear/nuklear.h	/^typedef uint32_t nk_uint;$/;"	t
nk_uint	nuklear/nuklear.h	/^typedef unsigned int nk_uint;$/;"	t
nk_unify	nuklear/nuklear.h	/^nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,$/;"	f
nk_user_font	nuklear/nuklear.h	/^struct nk_user_font {$/;"	s
nk_user_font_glyph	nuklear/nuklear.h	/^struct nk_user_font_glyph {$/;"	s
nk_ushort	nuklear/nuklear.h	/^typedef NK_UINT16 nk_ushort;$/;"	t
nk_ushort	nuklear/nuklear.h	/^typedef uint16_t nk_ushort;$/;"	t
nk_ushort	nuklear/nuklear.h	/^typedef unsigned short nk_ushort;$/;"	t
nk_utf_at	nuklear/nuklear.h	/^nk_utf_at(const char *buffer, int length, int index,$/;"	f
nk_utf_decode	nuklear/nuklear.h	/^nk_utf_decode(const char *c, nk_rune *u, int clen)$/;"	f
nk_utf_decode_byte	nuklear/nuklear.h	/^nk_utf_decode_byte(char c, int *i)$/;"	f
nk_utf_encode	nuklear/nuklear.h	/^nk_utf_encode(nk_rune u, char *c, int clen)$/;"	f
nk_utf_encode_byte	nuklear/nuklear.h	/^nk_utf_encode_byte(nk_rune u, int i)$/;"	f
nk_utf_len	nuklear/nuklear.h	/^nk_utf_len(const char *str, int len)$/;"	f
nk_utf_validate	nuklear/nuklear.h	/^nk_utf_validate(nk_rune *u, int i)$/;"	f
nk_utfbyte	nuklear/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfbyte[NK_UTF_SIZE+1] = {0x80, 0, 0xC0, 0xE0, 0xF0};$/;"	v
nk_utfmask	nuklear/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfmask[NK_UTF_SIZE+1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v
nk_utfmax	nuklear/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v
nk_utfmin	nuklear/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};$/;"	v
nk_value_bool	nuklear/nuklear.h	/^nk_value_bool(struct nk_context *ctx, const char *prefix, int value)$/;"	f
nk_value_color_byte	nuklear/nuklear.h	/^nk_value_color_byte(struct nk_context *ctx, const char *p, struct nk_color c)$/;"	f
nk_value_color_float	nuklear/nuklear.h	/^nk_value_color_float(struct nk_context *ctx, const char *p, struct nk_color color)$/;"	f
nk_value_color_hex	nuklear/nuklear.h	/^nk_value_color_hex(struct nk_context *ctx, const char *prefix, struct nk_color color)$/;"	f
nk_value_float	nuklear/nuklear.h	/^nk_value_float(struct nk_context *ctx, const char *prefix, float value)$/;"	f
nk_value_float_e	nuklear/nuklear.h	/^nk_value_float_e(struct nk_context *ctx, const char *prefix, float value)$/;"	f
nk_value_int	nuklear/nuklear.h	/^nk_value_int(struct nk_context *ctx, const char *prefix, int value)$/;"	f
nk_value_uint	nuklear/nuklear.h	/^nk_value_uint(struct nk_context *ctx, const char *prefix, unsigned int value)$/;"	f
nk_vec2	nuklear/nuklear.h	/^nk_vec2(float x, float y)$/;"	f
nk_vec2	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	s
nk_vec2_add	nuklear/nuklear.h	/^#define nk_vec2_add(/;"	d
nk_vec2_len_sqr	nuklear/nuklear.h	/^#define nk_vec2_len_sqr(/;"	d
nk_vec2_muls	nuklear/nuklear.h	/^#define nk_vec2_muls(/;"	d
nk_vec2_sub	nuklear/nuklear.h	/^#define nk_vec2_sub(/;"	d
nk_vec2i	nuklear/nuklear.h	/^nk_vec2i(int x, int y)$/;"	f
nk_vec2i	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	s
nk_vec2iv	nuklear/nuklear.h	/^nk_vec2iv(const int *v)$/;"	f
nk_vec2v	nuklear/nuklear.h	/^nk_vec2v(const float *v)$/;"	f
nk_widget	nuklear/nuklear.h	/^nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f
nk_widget_bounds	nuklear/nuklear.h	/^nk_widget_bounds(struct nk_context *ctx)$/;"	f
nk_widget_fitting	nuklear/nuklear.h	/^nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,$/;"	f
nk_widget_has_mouse_click_down	nuklear/nuklear.h	/^nk_widget_has_mouse_click_down(struct nk_context *ctx, enum nk_buttons btn, int down)$/;"	f
nk_widget_is_hovered	nuklear/nuklear.h	/^nk_widget_is_hovered(struct nk_context *ctx)$/;"	f
nk_widget_is_mouse_clicked	nuklear/nuklear.h	/^nk_widget_is_mouse_clicked(struct nk_context *ctx, enum nk_buttons btn)$/;"	f
nk_widget_layout_states	nuklear/nuklear.h	/^enum nk_widget_layout_states {$/;"	g
nk_widget_position	nuklear/nuklear.h	/^nk_widget_position(struct nk_context *ctx)$/;"	f
nk_widget_size	nuklear/nuklear.h	/^nk_widget_size(struct nk_context *ctx)$/;"	f
nk_widget_state_reset	nuklear/nuklear.h	/^#define nk_widget_state_reset(/;"	d
nk_widget_states	nuklear/nuklear.h	/^enum nk_widget_states {$/;"	g
nk_widget_text	nuklear/nuklear.h	/^nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,$/;"	f
nk_widget_text_wrap	nuklear/nuklear.h	/^nk_widget_text_wrap(struct nk_command_buffer *o, struct nk_rect b,$/;"	f
nk_window	nuklear/nuklear.h	/^struct nk_window {$/;"	s
nk_window_close	nuklear/nuklear.h	/^nk_window_close(struct nk_context *ctx, const char *name)$/;"	f
nk_window_collapse	nuklear/nuklear.h	/^nk_window_collapse(struct nk_context *ctx, const char *name,$/;"	f
nk_window_collapse_if	nuklear/nuklear.h	/^nk_window_collapse_if(struct nk_context *ctx, const char *name,$/;"	f
nk_window_find	nuklear/nuklear.h	/^nk_window_find(struct nk_context *ctx, const char *name)$/;"	f
nk_window_flags	nuklear/nuklear.h	/^enum nk_window_flags {$/;"	g
nk_window_get_bounds	nuklear/nuklear.h	/^nk_window_get_bounds(const struct nk_context *ctx)$/;"	f
nk_window_get_canvas	nuklear/nuklear.h	/^nk_window_get_canvas(struct nk_context *ctx)$/;"	f
nk_window_get_content_region	nuklear/nuklear.h	/^nk_window_get_content_region(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_max	nuklear/nuklear.h	/^nk_window_get_content_region_max(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_min	nuklear/nuklear.h	/^nk_window_get_content_region_min(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_size	nuklear/nuklear.h	/^nk_window_get_content_region_size(struct nk_context *ctx)$/;"	f
nk_window_get_height	nuklear/nuklear.h	/^nk_window_get_height(const struct nk_context *ctx)$/;"	f
nk_window_get_panel	nuklear/nuklear.h	/^nk_window_get_panel(struct nk_context *ctx)$/;"	f
nk_window_get_position	nuklear/nuklear.h	/^nk_window_get_position(const struct nk_context *ctx)$/;"	f
nk_window_get_size	nuklear/nuklear.h	/^nk_window_get_size(const struct nk_context *ctx)$/;"	f
nk_window_get_width	nuklear/nuklear.h	/^nk_window_get_width(const struct nk_context *ctx)$/;"	f
nk_window_has_focus	nuklear/nuklear.h	/^nk_window_has_focus(const struct nk_context *ctx)$/;"	f
nk_window_has_header	nuklear/nuklear.h	/^nk_window_has_header(struct nk_window *win, const char *title)$/;"	f
nk_window_is_active	nuklear/nuklear.h	/^nk_window_is_active(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_any_hovered	nuklear/nuklear.h	/^nk_window_is_any_hovered(struct nk_context *ctx)$/;"	f
nk_window_is_closed	nuklear/nuklear.h	/^nk_window_is_closed(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_collapsed	nuklear/nuklear.h	/^nk_window_is_collapsed(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_hovered	nuklear/nuklear.h	/^nk_window_is_hovered(struct nk_context *ctx)$/;"	f
nk_window_set_bounds	nuklear/nuklear.h	/^nk_window_set_bounds(struct nk_context *ctx, struct nk_rect bounds)$/;"	f
nk_window_set_focus	nuklear/nuklear.h	/^nk_window_set_focus(struct nk_context *ctx, const char *name)$/;"	f
nk_window_set_position	nuklear/nuklear.h	/^nk_window_set_position(struct nk_context *ctx, struct nk_vec2 pos)$/;"	f
nk_window_set_size	nuklear/nuklear.h	/^nk_window_set_size(struct nk_context *ctx, struct nk_vec2 size)$/;"	f
nk_window_show	nuklear/nuklear.h	/^nk_window_show(struct nk_context *ctx, const char *name, enum nk_show_states s)$/;"	f
nk_window_show_if	nuklear/nuklear.h	/^nk_window_show_if(struct nk_context *ctx, const char *name,$/;"	f
nk_wmask	nuklear/nuklear.h	/^    #define nk_wmask /;"	d
nk_wmask	nuklear/nuklear.h	/^    #undef nk_wmask$/;"	d
nk_word	nuklear/nuklear.h	/^    #define nk_word /;"	d
nk_word	nuklear/nuklear.h	/^    #undef nk_word$/;"	d
nk_wsize	nuklear/nuklear.h	/^    #define nk_wsize /;"	d
nk_wsize	nuklear/nuklear.h	/^    #undef nk_wsize$/;"	d
nk_zero	nuklear/nuklear.h	/^nk_zero(void *ptr, nk_size size)$/;"	f
nk_zero_struct	nuklear/nuklear.h	/^#define nk_zero_struct(/;"	d
node_maximize_button	nuklear/nuklear.h	/^    struct nk_style_button node_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
node_minimize_button	nuklear/nuklear.h	/^    struct nk_style_button node_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
nodes	nuklear/nuklear.h	/^    void  *nodes;$/;"	m	struct:nk_tt_pack_context
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon19
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
normal_active	nuklear/nuklear.h	/^    struct nk_style_item normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
normalizeAngles	Camera.cpp	/^void Camera::normalizeAngles() {$/;"	f	class:Camera
null	nuklear/nuklear.h	/^    struct nk_draw_null_texture null; \/* handle to texture with a white pixel for shape drawing *\/$/;"	m	struct:nk_convert_config	typeref:struct:nk_convert_config::nk_draw_null_texture
null	nuklear/nuklear.h	/^    struct nk_draw_null_texture null;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_draw_null_texture
null	nuklear/nuklear_glfw_gl3.h	/^    struct nk_draw_null_texture null;$/;"	m	struct:nk_glfw_device	typeref:struct:nk_glfw_device::nk_draw_null_texture
numGlyphs	nuklear/nuklear.h	/^    int numGlyphs;\/* number of glyphs, needed for range checking *\/$/;"	m	struct:nk_tt_fontinfo
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon23
num_chars	nuklear/nuklear.h	/^    int num_chars;$/;"	m	struct:nk_tt_pack_range
num_chars	nuklear/nuklear.h	/^   int num_chars;$/;"	m	struct:nk_text_edit_row
num_nodes	nuklear/nuklear.h	/^    int num_nodes;$/;"	m	struct:nk_rp_context
num_remaining_in_head_chunk	nuklear/nuklear.h	/^    int    num_remaining_in_head_chunk;$/;"	m	struct:nk_tt__hheap
object	Program.cpp	/^GLuint Program::object() const {$/;"	f	class:Program
object	Shader.cpp	/^GLuint Shader::object() const {$/;"	f	class:Shader
object	Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture
offset	nuklear/nuklear.h	/^    nk_size offset;$/;"	m	struct:nk_buffer_marker
offset	nuklear/nuklear.h	/^    struct nk_scroll *offset;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_scroll
offset	nuklear/nuklear.h	/^    struct nk_scroll offset;$/;"	m	struct:nk_menu_state	typeref:struct:nk_menu_state::nk_scroll
offset	nuklear/nuklear.h	/^    struct nk_vec2 offset;$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_user_font_glyph::nk_vec2
offset	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::
offsetOrientation	Camera.cpp	/^void Camera::offsetOrientation(float upAngle, float rightAngle) {$/;"	f	class:Camera
offsetPosition	Camera.cpp	/^void Camera::offsetPosition(const glm::vec3& offset) {$/;"	f	class:Camera
ogl	nuklear/nuklear_glfw_gl3.h	/^    struct nk_glfw_device ogl;$/;"	m	struct:nk_glfw	typeref:struct:nk_glfw::nk_glfw_device
old	nuklear/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_edit_state
old	nuklear/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_property_state
operator =	Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap
operator =	Shader.cpp	/^Shader& Shader::operator = (const Shader& other) {$/;"	f	class:Shader
option	nuklear/nuklear.h	/^    struct nk_style_toggle option;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_toggle
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon19
orientation	Camera.cpp	/^glm::mat4 Camera::orientation() const {$/;"	f	class:Camera
originalHeight	Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture
originalWidth	Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon25
out	stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon29
overlay	nuklear/nuklear.h	/^    struct nk_command_buffer overlay;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_command_buffer
oversample_h	nuklear/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config
oversample_v	nuklear/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config
overview	nuklear/overview.c	/^overview(struct nk_context *ctx)$/;"	f	file:
pack_info	nuklear/nuklear.h	/^    void *pack_info;$/;"	m	struct:nk_tt_pack_context
packed_chars	nuklear/nuklear.h	/^    struct nk_tt_packedchar *packed_chars;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_packedchar
padding	nuklear/nuklear.h	/^    int   padding;$/;"	m	struct:nk_tt_pack_context
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_text	typeref:struct:nk_style_text::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_vec2
padding	nuklear/nuklear.h	/^    unsigned char padding[3];$/;"	m	struct:nk_font_config
padding	nuklear/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex
padding1	nuklear/nuklear.h	/^    unsigned char padding1;$/;"	m	struct:nk_text_edit
page_count	nuklear/nuklear.h	/^    unsigned int page_count;$/;"	m	struct:nk_pool
pages	nuklear/nuklear.h	/^    struct nk_page *pages;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_page
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon29
parent	nuklear/nuklear.h	/^    nk_size parent;$/;"	m	struct:nk_popup_buffer
parent	nuklear/nuklear.h	/^    struct nk_panel *parent;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_panel
parent	nuklear/nuklear.h	/^    struct nk_window *parent;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon29
paste	nuklear/nuklear.h	/^    nk_paste_f paste;$/;"	m	struct:nk_clipboard
path_count	nuklear/nuklear.h	/^    unsigned int path_count;$/;"	m	struct:nk_draw_list
path_offset	nuklear/nuklear.h	/^    unsigned int path_offset;$/;"	m	struct:nk_draw_list
permanent	nuklear/nuklear.h	/^    struct nk_allocator permanent;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_allocator
pixel	nuklear/nuklear.h	/^    void *pixel;$/;"	m	struct:nk_font_atlas
pixelBuffer	Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap
pixel_snap	nuklear/nuklear.h	/^    unsigned char pixel_snap;$/;"	m	struct:nk_font_config
pixels	nuklear/nuklear.h	/^    unsigned char *pixels;$/;"	m	struct:nk_tt_pack_context
pixels	nuklear/nuklear.h	/^   unsigned char *pixels;$/;"	m	struct:nk_tt__bitmap
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon_filled
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polyline
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_vec2i
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_vec2i
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_vec2i
pool	nuklear/nuklear.h	/^    struct nk_allocator pool;$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_allocator
pool	nuklear/nuklear.h	/^    void *pool;$/;"	m	struct:nk_context
popup	nuklear/nuklear.h	/^    struct nk_popup_state popup;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_popup_state
popup_buffer	nuklear/nuklear.h	/^    struct nk_popup_buffer popup_buffer;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_popup_buffer
pos	nuklear/nuklear.h	/^    struct nk_vec2 pos;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
position	Camera.cpp	/^const glm::vec3& Camera::position() const {$/;"	f	class:Camera
position	nuklear/nuklear.h	/^    struct nk_vec2 position;$/;"	m	struct:nk_draw_vertex	typeref:struct:nk_draw_vertex::nk_vec2
power_x	main.cpp	/^int power_x, power_y;$/;"	v
power_y	main.cpp	/^int power_x, power_y;$/;"	v
preferred_x	nuklear/nuklear.h	/^    float preferred_x;$/;"	m	struct:nk_text_edit
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon28
pressed	nuklear/nuklear.h	/^    struct nk_style_item pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
pressed_active	nuklear/nuklear.h	/^    struct nk_style_item pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
prev	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state
prev	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state
prev	nuklear/nuklear.h	/^    struct nk_page_element *prev;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element::nk_page_element
prev	nuklear/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table::
prev	nuklear/nuklear.h	/^    struct nk_vec2 prev;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
prev	nuklear/nuklear.h	/^    struct nk_window *prev;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
prev_first	nuklear/nuklear.h	/^   int prev_first;  \/*_ first char of previous row *\/$/;"	m	struct:nk_text_find
prev_link	nuklear/nuklear.h	/^    struct nk_rp_node **prev_link;$/;"	m	struct:nk_rp__findresult	typeref:struct:nk_rp__findresult::nk_rp_node
prog	nuklear/nuklear_glfw_gl3.h	/^    GLuint prog;$/;"	m	struct:nk_glfw_device
progress	nuklear/nuklear.h	/^    struct nk_style_progress progress;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_progress
projection	Camera.cpp	/^glm::mat4 Camera::projection() const {$/;"	f	class:Camera
property	nuklear/nuklear.h	/^    struct nk_property_state property;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_property_state
property	nuklear/nuklear.h	/^    struct nk_style_property property;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_property
ptr	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory
ptr	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon2
query	nuklear/nuklear.h	/^    nk_query_font_glyph_f query;$/;"	m	struct:nk_user_font
r	nuklear/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc
r	nuklear/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc_filled
r	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
r0	main.cpp	/^float r0 = -6;$/;"	v
range	nuklear/nuklear.h	/^    const nk_rune *range;$/;"	m	struct:nk_font_config
range	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
range_count	nuklear/nuklear.h	/^    nk_rune range_count;$/;"	m	struct:nk_font_bake_data
ranges	nuklear/nuklear.h	/^    const nk_rune *ranges;$/;"	m	struct:nk_baked_font
ranges	nuklear/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_tt_pack_range
ranges	nuklear/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_pack_range
ratio	nuklear/nuklear.h	/^    const float *ratio;$/;"	m	struct:nk_row_layout
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon29
raw_data	stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon19::__anon20
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon15
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon16
rectD	main.cpp	/^float rectD;$/;"	v
rects	nuklear/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_rp_rect
rects	nuklear/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_rp_rect
redo_char_point	nuklear/nuklear.h	/^   short redo_char_point;$/;"	m	struct:nk_text_undo_state
redo_point	nuklear/nuklear.h	/^   short redo_point;$/;"	m	struct:nk_text_undo_state
region	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon21
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resolution	main.cpp	/^float resolution = 20.0;$/;"	v
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon19
right	Camera.cpp	/^glm::vec3 Camera::right() const {$/;"	f	class:Camera
right	nuklear/nuklear.h	/^    struct nk_color right;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
rotate90CounterClockwise	Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_button
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_chart
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_combo
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_edit
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_progress
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_property
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_scrollbar
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_selectable
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_slider
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_tab
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_window
rounding	nuklear/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect
rounding	nuklear/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect_filled
rounding_cursor	nuklear/nuklear.h	/^    float rounding_cursor;$/;"	m	struct:nk_style_scrollbar
row	nuklear/nuklear.h	/^    struct nk_row_layout row;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_row_layout
row_padding	nuklear/nuklear.h	/^    float row_padding;$/;"	m	struct:nk_style_edit
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon19
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon25
s0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
s1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
sampling	main.cpp	/^double sampling[2]={0.0,0.0};$/;"	v
sampling_flag	main.cpp	/^bool sampling_flag=false;$/;"	v
sampling_len	main.cpp	/^int sampling_len=0;$/;"	v
sampling_list	main.cpp	/^float *sampling_list;$/;"	v
sampling_pick	main.cpp	/^bool sampling_pick=false;$/;"	v
scale	nuklear/nuklear.h	/^    float scale;$/;"	m	struct:nk_font
scaler	nuklear/nuklear.h	/^    struct nk_style_item scaler;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_item
scaler_size	nuklear/nuklear.h	/^    struct nk_vec2 scaler_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon19
scroll	nuklear/nuklear_glfw_gl3.h	/^    float scroll;$/;"	m	struct:nk_glfw
scroll_delta	nuklear/nuklear.h	/^    float scroll_delta;$/;"	m	struct:nk_mouse
scrollbar	nuklear/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_edit_state	typeref:struct:nk_edit_state::nk_scroll
scrollbar	nuklear/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_scroll
scrollbar	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollbar;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_scrollbar
scrollbar	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_vec2
scrollbar_size	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_vec2
scrollbar_size	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
scrolled	nuklear/nuklear.h	/^    unsigned int scrolled;$/;"	m	struct:nk_window
scrollh	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollh;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_scrollbar
scrollv	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollv;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_scrollbar
sel_end	nuklear/nuklear.h	/^    int sel_end;$/;"	m	struct:nk_edit_state
sel_start	nuklear/nuklear.h	/^    int sel_start;$/;"	m	struct:nk_edit_state
select_end	nuklear/nuklear.h	/^    int select_end;$/;"	m	struct:nk_text_edit
select_start	nuklear/nuklear.h	/^    int select_start;$/;"	m	struct:nk_text_edit
selectable	nuklear/nuklear.h	/^    struct nk_style_selectable selectable;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_selectable
selected_color	nuklear/nuklear.h	/^    struct nk_color selected_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
selected_hover	nuklear/nuklear.h	/^    struct nk_color selected_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_normal	nuklear/nuklear.h	/^    struct nk_color selected_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_text_hover	nuklear/nuklear.h	/^    struct nk_color selected_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_text_normal	nuklear/nuklear.h	/^    struct nk_color selected_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_context
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_edit_state
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_property_state
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_table
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_window
setFieldOfView	Camera.cpp	/^void Camera::setFieldOfView(float fieldOfView) {$/;"	f	class:Camera
setNearAndFarPlanes	Camera.cpp	/^void Camera::setNearAndFarPlanes(float nearPlane, float farPlane) {$/;"	f	class:Camera
setPixel	Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap
setPosition	Camera.cpp	/^void Camera::setPosition(const glm::vec3& position) {$/;"	f	class:Camera
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat2& m, GLboolean transpose) {$/;"	f	class:Program
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat3& m, GLboolean transpose) {$/;"	f	class:Program
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat4& m, GLboolean transpose) {$/;"	f	class:Program
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* uniformName, const glm::vec3& v) {$/;"	f	class:Program
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* uniformName, const glm::vec4& v) {$/;"	f	class:Program
setUniformMatrix2	Program.cpp	/^void Program::setUniformMatrix2(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean transpose) {$/;"	f	class:Program
setUniformMatrix3	Program.cpp	/^void Program::setUniformMatrix3(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean transpose) {$/;"	f	class:Program
setUniformMatrix4	Program.cpp	/^void Program::setUniformMatrix4(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean transpose) {$/;"	f	class:Program
setViewportAspectRatio	Camera.cpp	/^void Camera::setViewportAspectRatio(float viewportAspectRatio) {$/;"	f	class:Camera
set_style	nuklear/style.c	/^set_style(struct nk_context *ctx, enum theme theme)$/;"	f
shaderFromFile	Shader.cpp	/^Shader Shader::shaderFromFile(const std::string& filePath, GLenum shaderType) {$/;"	f	class:Shader
shape_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing shape_AA; \/* shape anti-aliasing flag can be turned off if you are tight on memory *\/$/;"	m	struct:nk_convert_config	typeref:enum:nk_convert_config::nk_anti_aliasing
shape_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing shape_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_draw_list::nk_anti_aliasing
show_buttons	nuklear/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_scrollbar
show_buttons	nuklear/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_slider
sigma0	main.cpp	/^float sigma0 = 0;$/;"	v
sigma_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v
single_line	nuklear/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_edit_state
single_line	nuklear/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_text_edit
size	nuklear/nuklear.h	/^    float size;$/;"	m	struct:nk_font_config
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_buffer
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_memory_status
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_pool
size	nuklear/nuklear.h	/^    unsigned size;$/;"	m	struct:nk_page
size	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::nk_vec2
size	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon18
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon22
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon27
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon15
slider	nuklear/nuklear.h	/^    struct nk_style_slider slider;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_slider
slot	nuklear/nuklear.h	/^    int slot;$/;"	m	struct:nk_chart
slots	nuklear/nuklear.h	/^    struct nk_chart_slot slots[NK_CHART_MAX_SLOT];$/;"	m	struct:nk_chart	typeref:struct:nk_chart::nk_chart_slot
spacing	nuklear/nuklear.h	/^    float spacing;$/;"	m	struct:nk_style_toggle
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
spc	nuklear/nuklear.h	/^    struct nk_tt_pack_context spc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_pack_context
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon29
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon29
state	nuklear/nuklear.h	/^    int state;$/;"	m	struct:nk_property_state
stbi_YCbCr_to_RGB_run	stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi__DNL	stb_image.h	/^#define stbi__DNL(/;"	d
stbi__EOI	stb_image.h	/^#define stbi__EOI(/;"	d
stbi__SOF	stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOI	stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	stb_image.h	/^#define stbi__SOS(/;"	d
stbi__YCbCr_installed	stb_image.h	/^static stbi_YCbCr_to_RGB_run stbi__YCbCr_installed = stbi__YCbCr_to_RGB_row;$/;"	v
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon16
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)$/;"	f
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)$/;"	f
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__div16	stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	stb_image.h	/^#define stbi__div4(/;"	d
stbi__do_png	stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__errpf	stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f
stbi__float2int	stb_image.h	/^#define stbi__float2int(/;"	d
stbi__fopen	stb_image.h	/^FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__fsh	stb_image.h	/^#define stbi__fsh(/;"	d
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon29
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon28
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon18
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f
stbi__idct_installed	stb_image.h	/^static stbi_idct_8x8 stbi__idct_installed = stbi__idct_block;$/;"	v
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__init_zdefaults	stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon19
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)$/;"	f
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__malloc	stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncomperssed_block	stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon27
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon25
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon24
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon21
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon23
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon22
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]= $/;"	v
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_dequantize_t	stb_image.h	/^typedef stbi_uc stbi_dequantize_t;$/;"	t
stbi_dequantize_t	stb_image.h	/^typedef unsigned short stbi_dequantize_t;$/;"	t
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	stb_image.h	/^void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	stb_image.h	/^void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_idct_8x8	stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	stb_image.h	/^   #define stbi_inline$/;"	d
stbi_install_YCbCr_to_RGB	stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f
stbi_install_idct	stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func)$/;"	f
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon15
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	stb_image.h	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	stb_image.h	/^void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	stb_image.h	/^void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	stb_image.h	/^STBIDEF unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	stb_image.h	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_main	stb_image.h	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	stb_image.h	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	stb_image.h	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	stb_image.h	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	stb_image.h	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_main	stb_image.h	/^float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	stb_image.h	/^   #define stbi_lrot(/;"	d
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbtt__close_shape	nuklear/nuklear.h	/^stbtt__close_shape(struct nk_tt_vertex *vertices, int num_vertices, int was_off,$/;"	f
step	main.cpp	/^float step;$/;"	v
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon29
stopUsing	Program.cpp	/^void Program::stopUsing() const {$/;"	f	class:Program
stride	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
stride_in_bytes	nuklear/nuklear.h	/^    int   stride_in_bytes;$/;"	m	struct:nk_tt_pack_context
string	nuklear/nuklear.h	/^    char string[1];$/;"	m	struct:nk_command_text
string	nuklear/nuklear.h	/^    struct nk_str string;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_str
style	nuklear/nuklear.h	/^    struct nk_style style;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_style
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon28
sy	nuklear/nuklear.h	/^    float sy;$/;"	m	struct:nk_tt__active_edge
sym_active	nuklear/nuklear.h	/^    enum nk_symbol_type sym_active;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_hover	nuklear/nuklear.h	/^    enum nk_symbol_type sym_hover;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_left	nuklear/nuklear.h	/^    enum nk_symbol_type sym_left;$/;"	m	struct:nk_style_property	typeref:enum:nk_style_property::nk_symbol_type
sym_maximize	nuklear/nuklear.h	/^    enum nk_symbol_type sym_maximize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_style_tab::nk_symbol_type
sym_minimize	nuklear/nuklear.h	/^    enum nk_symbol_type sym_minimize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_style_tab::nk_symbol_type
sym_normal	nuklear/nuklear.h	/^    enum nk_symbol_type sym_normal;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_right	nuklear/nuklear.h	/^    enum nk_symbol_type sym_right;$/;"	m	struct:nk_style_property	typeref:enum:nk_style_property::nk_symbol_type
symbol_active	nuklear/nuklear.h	/^    struct nk_color symbol_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
symbol_hover	nuklear/nuklear.h	/^    struct nk_color symbol_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
symbol_normal	nuklear/nuklear.h	/^    struct nk_color symbol_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
t0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
t1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
tab	nuklear/nuklear.h	/^    struct nk_style_tab tab;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_tab
tab_maximize_button	nuklear/nuklear.h	/^    struct nk_style_button tab_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
tab_minimize_button	nuklear/nuklear.h	/^    struct nk_style_button tab_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
table_count	nuklear/nuklear.h	/^    unsigned short table_count;$/;"	m	struct:nk_window
table_size	nuklear/nuklear.h	/^    unsigned short table_size;$/;"	m	struct:nk_window
tables	nuklear/nuklear.h	/^    struct nk_table *tables;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_table
tbl	nuklear/nuklear.h	/^    struct nk_table tbl;$/;"	m	union:nk_page_data	typeref:struct:nk_page_data::nk_table
tdogl	Bitmap.h	/^namespace tdogl {$/;"	n
tdogl	Camera.h	/^namespace tdogl {$/;"	n
tdogl	Program.h	/^namespace tdogl {$/;"	n
tdogl	Shader.h	/^namespace tdogl {$/;"	n
tdogl	Texture.h	/^namespace tdogl {$/;"	n
temporary	nuklear/nuklear.h	/^    struct nk_allocator temporary;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_allocator
tex	main.cpp	/^GLuint tex;$/;"	v
tex_height	nuklear/nuklear.h	/^    int tex_height;$/;"	m	struct:nk_font_atlas
tex_width	nuklear/nuklear.h	/^    int tex_width;$/;"	m	struct:nk_font_atlas
text	nuklear/nuklear.h	/^    char text[NK_INPUT_MAX];$/;"	m	struct:nk_keyboard
text	nuklear/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_color
text	nuklear/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_color
text	nuklear/nuklear.h	/^    struct nk_style_text text;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_text
text	nuklear/nuklear_glfw_gl3.h	/^    unsigned int text[NK_GLFW_TEXT_MAX];$/;"	m	struct:nk_glfw
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_button
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_selectable
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_toggle
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_edit	nuklear/nuklear.h	/^    struct nk_text_edit text_edit;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_text_edit
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_hover_active	nuklear/nuklear.h	/^    struct nk_color text_hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_len	nuklear/nuklear.h	/^    int text_len;$/;"	m	struct:nk_keyboard
text_len	nuklear/nuklear_glfw_gl3.h	/^    int text_len;$/;"	m	struct:nk_glfw
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_normal_active	nuklear/nuklear.h	/^    struct nk_color text_normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_pressed	nuklear/nuklear.h	/^    struct nk_color text_pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_pressed_active	nuklear/nuklear.h	/^    struct nk_color text_pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_draw_command
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_font
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_user_font
texture	nuklear/nuklear.h	/^    nk_handle texture;\/* texture handle to a texture with a white pixel *\/$/;"	m	struct:nk_draw_null_texture
theme	nuklear/style.c	/^enum theme {THEME_BLACK, THEME_WHITE, THEME_RED, THEME_BLUE, THEME_DARK};$/;"	g	file:
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon19
tooltip_border	nuklear/nuklear.h	/^    float tooltip_border;$/;"	m	struct:nk_style_window
tooltip_border_color	nuklear/nuklear.h	/^    struct nk_color tooltip_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
top	nuklear/nuklear.h	/^    struct nk_color top;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_vec2
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon19::__anon20
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon29
tree_depth	nuklear/nuklear.h	/^    int tree_depth;$/;"	m	struct:nk_row_layout
ttf_blob	nuklear/nuklear.h	/^    void *ttf_blob;$/;"	m	struct:nk_font_config
ttf_data_owned_by_atlas	nuklear/nuklear.h	/^    unsigned char ttf_data_owned_by_atlas;$/;"	m	struct:nk_font_config
ttf_size	nuklear/nuklear.h	/^    nk_size ttf_size;$/;"	m	struct:nk_font_config
type	nuklear/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_buffer	typeref:enum:nk_buffer::nk_allocation_type
type	nuklear/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_pool	typeref:enum:nk_pool::nk_allocation_type
type	nuklear/nuklear.h	/^    enum nk_chart_type type;$/;"	m	struct:nk_chart_slot	typeref:enum:nk_chart_slot::nk_chart_type
type	nuklear/nuklear.h	/^    enum nk_command_type type;$/;"	m	struct:nk_command	typeref:enum:nk_command::nk_command_type
type	nuklear/nuklear.h	/^    enum nk_style_item_type type;$/;"	m	struct:nk_style_item	typeref:enum:nk_style_item::nk_style_item_type
type	nuklear/nuklear.h	/^    enum nk_window_flags type;$/;"	m	struct:nk_popup_state	typeref:enum:nk_popup_state::nk_window_flags
type	nuklear/nuklear.h	/^    int type;$/;"	m	struct:nk_row_layout
type	nuklear/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex
type	nuklear/nuklear.h	/^    unsigned int type;$/;"	m	struct:nk_memory_status
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon24
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon27
u0	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
u1	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
undo	nuklear/nuklear.h	/^    struct nk_text_undo_state undo;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_text_undo_state
undo_char	nuklear/nuklear.h	/^   nk_rune undo_char[NK_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:nk_text_undo_state
undo_char_point	nuklear/nuklear.h	/^   short undo_char_point;$/;"	m	struct:nk_text_undo_state
undo_point	nuklear/nuklear.h	/^   short undo_point;$/;"	m	struct:nk_text_undo_state
undo_rec	nuklear/nuklear.h	/^   struct nk_text_undo_record undo_rec[NK_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:nk_text_undo_state	typeref:struct:nk_text_undo_state::nk_text_undo_record
ungrab	nuklear/nuklear.h	/^    unsigned char ungrab;$/;"	m	struct:nk_mouse
uniform	Program.cpp	/^GLint Program::uniform(const GLchar* uniformName) const {$/;"	f	class:Program
uniform_proj	nuklear/nuklear_glfw_gl3.h	/^    GLint uniform_proj;$/;"	m	struct:nk_glfw_device
uniform_tex	nuklear/nuklear_glfw_gl3.h	/^    GLint uniform_tex;$/;"	m	struct:nk_glfw_device
up	Camera.cpp	/^glm::vec3 Camera::up() const {$/;"	f	class:Camera
use	Program.cpp	/^void Program::use() const {$/;"	f	class:Program
use_clipping	nuklear/nuklear.h	/^    int use_clipping;$/;"	m	struct:nk_command_buffer
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_allocator
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_clipboard
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command_buffer
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_context
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_command
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_list
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_button
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_progress
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_property
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_scrollbar
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_selectable
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_slider
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_toggle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_user_font
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv; \/* coordinates to a white pixel in the texture  *\/$/;"	m	struct:nk_draw_null_texture	typeref:struct:nk_draw_null_texture::nk_vec2
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv;$/;"	m	struct:nk_draw_vertex	typeref:struct:nk_draw_vertex::nk_vec2
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv[2];$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_user_font_glyph::nk_vec2
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon19::__anon20
v0	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
v1	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
v_oversample	nuklear/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range
v_oversample	nuklear/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	nuklear/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon5
value	nuklear/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	e	enum:nk_helper::__anon3
value	nuklear/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	e	enum:nk_helper::__anon4
value	stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon22
values	nuklear/nuklear.h	/^    nk_uint values[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon18
vao	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device
vbo	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device
vert_shdr	nuklear/nuklear_glfw_gl3.h	/^    GLuint vert_shdr;$/;"	m	struct:nk_glfw_device
vertex_count	nuklear/nuklear.h	/^    unsigned int vertex_count;$/;"	m	struct:nk_draw_list
vertices	nuklear/nuklear.h	/^    struct nk_buffer *vertices;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
view	Camera.cpp	/^glm::mat4 Camera::view() const {$/;"	f	class:Camera
viewportAspectRatio	Camera.cpp	/^float Camera::viewportAspectRatio() const {$/;"	f	class:Camera
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon21
w	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
w	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
w	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
w	nuklear/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text
w	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
w	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
w	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
w	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon29
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon19::__anon20
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon21
was_packed	nuklear/nuklear.h	/^    int was_packed;$/;"	m	struct:nk_rp_rect
where	nuklear/nuklear.h	/^   int where;$/;"	m	struct:nk_text_undo_record
width	Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap
width	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_panel
width	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph
width	nuklear/nuklear.h	/^    int   width;$/;"	m	struct:nk_tt_pack_context
width	nuklear/nuklear.h	/^    int width;$/;"	m	struct:nk_rp_context
width	nuklear/nuklear.h	/^    nk_text_width_f width;$/;"	m	struct:nk_user_font
width	nuklear/nuklear_glfw_gl3.h	/^    int width, height;$/;"	m	struct:nk_glfw
win	nuklear/nuklear.h	/^    struct nk_page_element win[1];$/;"	m	struct:nk_page	typeref:struct:nk_page::nk_page_element
win	nuklear/nuklear.h	/^    struct nk_window *win;$/;"	m	struct:nk_popup_state	typeref:struct:nk_popup_state::nk_window
win	nuklear/nuklear.h	/^    struct nk_window win;$/;"	m	union:nk_page_data	typeref:struct:nk_page_data::nk_window
win	nuklear/nuklear_glfw_gl3.h	/^    GLFWwindow *win;$/;"	m	struct:nk_glfw
window	nuklear/nuklear.h	/^    struct nk_style_window window;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_window
x	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
x	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
x	nuklear/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult
x	nuklear/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node
x	nuklear/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text
x	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
x	nuklear/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find
x	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
x	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
x	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	m	struct:nk_scroll
x	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point
x	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2
x	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i
x	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon19::__anon20
x0	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
x0	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
x0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
x0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
x0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
x0	nuklear/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row
x1	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
x1	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
x1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
x1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
x1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
x1	nuklear/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row
xadvance	nuklear/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_font_glyph
xadvance	nuklear/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_user_font_glyph
xadvance	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
xadvance	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
xoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
xoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
xoff2	nuklear/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar
y	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
y	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
y	nuklear/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult
y	nuklear/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node
y	nuklear/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text
y	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
y	nuklear/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find
y	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
y	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
y	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	m	struct:nk_scroll
y	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point
y	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2
y	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon19::__anon20
y0	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
y0	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
y0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
y0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
y0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
y1	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
y1	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
y1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
y1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
y1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
ymax	nuklear/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row
ymin	nuklear/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row
yoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
yoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
yoff2	nuklear/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon21
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon21
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon23
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon23
z_flag	main.cpp	/^bool z_flag = false;$/;"	v
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon23
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon23
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon23
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon23
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon23
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon23
~Bitmap	Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap
~Program	Program.cpp	/^Program::~Program() {$/;"	f	class:Program
~Shader	Shader.cpp	/^Shader::~Shader() {$/;"	f	class:Shader
~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture
