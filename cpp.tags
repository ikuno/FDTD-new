!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/e3c977b/
a	glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f030a	typeref:typename:T
a	glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon0c24fa7f080c	typeref:typename:T
A	glm/gtx/simd_vec4.hpp	/^		A = 3,$/;"	e	enum:glm::comp
a	nuklear/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc	typeref:typename:float[2]
a	nuklear/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc_filled	typeref:typename:float[2]
a	nuklear/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_vec2i
a	nuklear/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_vec2i
a	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color	typeref:typename:nk_byte
abs	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD abs$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
abs4Mask	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED abs4Mask = _mm_set_ps1(absMask.f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
absMask	glm/detail/intrinsic_common.inl	/^	static const ieee754_QNAN absMask;$/;"	v	namespace:glm::detail	typeref:typename:const ieee754_QNAN	file:
acos	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acos(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
acosh	glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType acosh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acosh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acosh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
acot	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acot(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acot	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acot(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
acoth	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acoth(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acoth	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acoth(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
acsc	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsc	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acsc(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
acsch	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsch(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsch	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> acsch(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
active	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state	typeref:typename:int
active	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state	typeref:typename:int
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_buffer_marker	typeref:typename:int
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_buffer	typeref:typename:int
active	nuklear/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_state	typeref:typename:int
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_item
active	nuklear/nuklear.h	/^    struct nk_window *active;$/;"	m	struct:nk_context	typeref:struct:nk_window *
active	nuklear/nuklear.h	/^    unsigned char active;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
active_con	nuklear/nuklear.h	/^    unsigned active_con;$/;"	m	struct:nk_popup_state	typeref:typename:unsigned
active_head	nuklear/nuklear.h	/^    struct nk_rp_node *active_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_node *
affineInverse	glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> affineInverse(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
affineInverse	glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> affineInverse(tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
align	nuklear/nuklear.h	/^    enum nk_style_header_align align;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_header_align
align	nuklear/nuklear.h	/^    int align;$/;"	m	struct:nk_rp_context	typeref:typename:int
all	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER bool all(vecType<bool, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
all	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool all$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_allocator
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_pool	typeref:struct:nk_allocator
alloc	nuklear/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_allocator
alloc	nuklear/nuklear.h	/^    void*(*alloc)(nk_handle, void *old, nk_size);$/;"	m	struct:nk_allocator	typeref:typename:void * (*)(nk_handle,void * old,nk_size)
allocated	nuklear/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_buffer	typeref:typename:nk_size
allocated	nuklear/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_memory_status	typeref:typename:nk_size
AllocFree	main.cpp	/^void AllocFree()$/;"	f	typeref:typename:void
AllocInit	main.cpp	/^void AllocInit()$/;"	f	typeref:typename:void
alpha	main.cpp	/^float alpha = 0.5;$/;"	v	typeref:typename:float
ambient	glm/detail/dummy.cpp	/^	glm::vec4 ambient; \/\/ Acli$/;"	m	struct:light	typeref:typename:glm::vec4	file:
ambient	glm/detail/dummy.cpp	/^	glm::vec4 ambient; \/\/ Acm$/;"	m	struct:material	typeref:typename:glm::vec4	file:
angle	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T angle(tquat<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER genType angle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
angle	glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T angle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angleAxis	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> angleAxis(T const & angle, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
angleAxisSIMD	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD angleAxisSIMD$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
anim_dt	main.cpp	/^float anim_dt;$/;"	v	typeref:typename:float
anim_time	main.cpp	/^float anim_time = 0.0f;$/;"	v	typeref:typename:float
any	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER bool any(vecType<bool, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
any	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool any$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
AppMain	main.cpp	/^void AppMain()$/;"	f	typeref:typename:void
arc_segment_count	nuklear/nuklear.h	/^    unsigned int arc_segment_count; \/* number of segments used for arcs: default to 22 *\/$/;"	m	struct:nk_convert_config	typeref:typename:unsigned int
areCollinear	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areCollinear$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthogonal	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthogonal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthonormal	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthonormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
array_of_unicode_codepoints	nuklear/nuklear.h	/^    int *array_of_unicode_codepoints;$/;"	m	struct:nk_tt_pack_range	typeref:typename:int *
ascent	nuklear/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font	typeref:typename:float
asec	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asec(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asec	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> asec(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
asech	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asech(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asech	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> asech(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
asin	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> asin(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
asinh	glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType asinh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asinh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> asinh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
associatedMax	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER tvec2<U, P> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<U,P>
associatedMax	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vecType<T, P> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
associatedMax	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vecType<U, P> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<U,P>
associatedMin	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER tvec2<U, P> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<U,P>
associatedMin	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vecType<U, P> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<U,P>
atan	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER genType atan(genType y, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atan	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> atan(vecType<T, P> const & a, vecType<T, P> const & b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
atan	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> atan(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
atan2	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER T atan2(T x, T y){return atan(x, y);}				/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
atan2	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> atan2(const tvec2<T, P>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
atan2	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> atan2(const tvec3<T, P>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
atan2	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> atan2(const tvec4<T, P>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
atanh	glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType atanh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atanh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> atanh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
atlas	nuklear/nuklear_glfw_gl3.h	/^    struct nk_font_atlas atlas;$/;"	m	struct:nk_glfw	typeref:struct:nk_font_atlas
attrib	Program.cpp	/^GLint Program::attrib(const GLchar* attribName) const {$/;"	f	class:Program	typeref:typename:GLint
attrib_col	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_col;$/;"	m	struct:nk_glfw_device	typeref:typename:GLint
ATTRIB_N_UNIFORM_SETTERS	Program.cpp	/^#define ATTRIB_N_UNIFORM_SETTERS(/;"	d	file:
attrib_pos	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_pos;$/;"	m	struct:nk_glfw_device	typeref:typename:GLint
attrib_uv	nuklear/nuklear_glfw_gl3.h	/^    GLint attrib_uv;$/;"	m	struct:nk_glfw_device	typeref:typename:GLint
at_x	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel	typeref:typename:float
at_y	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel	typeref:typename:float
AverageRGB	Bitmap.cpp	/^inline unsigned char AverageRGB(unsigned char rgb[3]) {$/;"	f	typeref:typename:unsigned char
axis	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> axis(tquat<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
axisAngle	glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER void axisAngle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
axisAngleMatrix	glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> axisAngleMatrix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
b	glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe030a	typeref:typename:T
b	glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon0c12e1fe070c	typeref:typename:T
b	glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f030a	typeref:typename:T
b	glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon0c24fa7f070c	typeref:typename:T
B	glm/gtx/simd_vec4.hpp	/^		B = 2,$/;"	e	enum:glm::comp
b	nuklear/nuklear.h	/^    struct nk_colorf {float r,g,b;} out = {0,0,0};$/;"	m	struct:nk_hsva_f::nk_colorf	typeref:typename:float
b	nuklear/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_vec2i
b	nuklear/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_vec2i
b	nuklear/nuklear.h	/^    union {const nk_uint *i; const nk_byte *b;} conv = {0};$/;"	m	union:nk_murmur_hash::__anon9874a1ee070c	typeref:typename:const nk_byte *
b	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color	typeref:typename:nk_byte
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_command_text	typeref:struct:nk_color
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
background	nuklear/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_text	typeref:struct:nk_color
background	nuklear/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_item
background	nuklear/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_item
ballRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, defaultp> ballRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,defaultp>
bar_active	nuklear/nuklear.h	/^    struct nk_color bar_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_color
bar_filled	nuklear/nuklear.h	/^    struct nk_color bar_filled;$/;"	m	struct:nk_style_slider	typeref:struct:nk_color
bar_height	nuklear/nuklear.h	/^    float bar_height;$/;"	m	struct:nk_style_slider	typeref:typename:float
bar_hover	nuklear/nuklear.h	/^    struct nk_color bar_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_color
bar_normal	nuklear/nuklear.h	/^    struct nk_color bar_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_color
base	glm/detail/type_gentype.inl	/^base<vT, cT, rT, pT>::base$/;"	f	class:glm::detail::base
base	glm/detail/type_gentype.inl	/^base<vT, cT, rT, pT>::base()$/;"	f	class:glm::detail::base
base	nuklear/nuklear.h	/^    struct nk_buffer *base;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_buffer *
baseline_y_delta	nuklear/nuklear.h	/^   float baseline_y_delta;$/;"	m	struct:nk_text_edit_row	typeref:typename:float
base_type	glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<ValueType, P, VecType,N,E0,E1,E2,E3,(E0==E1||E0==E2||E0==E3||E1==E2||E1/;"	t	struct:glm::detail::_swizzle
basic_format_saver	glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_format_saver	glm/gtx/io.inl	/^	\/* explicit *\/ GLM_FUNC_QUALIFIER basic_format_saver<CTy,CTr>::basic_format_saver(std::basic_/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
basic_state_saver	glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
basic_state_saver	glm/gtx/io.inl	/^	\/* explicit *\/ GLM_FUNC_QUALIFIER basic_state_saver<CTy,CTr>::basic_state_saver(std::basic_io/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
begin	glm/gtx/range.hpp	/^	const typename genType::value_type * begin(genType const & v){$/;"	f	namespace:glm	typeref:typename:const typename genType::value_type *
begin	glm/gtx/range.hpp	/^	typename genType::value_type * begin(genType& v){$/;"	f	namespace:glm	typeref:typename:genType::value_type *
begin	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer	typeref:typename:nk_size
begin	nuklear/nuklear.h	/^    nk_size begin;$/;"	m	struct:nk_popup_buffer	typeref:typename:nk_size
begin	nuklear/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_curve	typeref:struct:nk_vec2i
begin	nuklear/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_line	typeref:struct:nk_vec2i
begin	nuklear/nuklear.h	/^    struct nk_window *begin;$/;"	m	struct:nk_context	typeref:struct:nk_window *
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
Big	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s	struct:nk_alignof
bitCount	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int bitCount(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<int, P> bitCount(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<int,P>
bitfieldExtract	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldExtract	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldExtract(vecType<T, P> const & Value, int Offset, int B/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldFillOne	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillOne(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillOne	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldFillOne(vecType<T, P> const & Value, int FirstBit, int/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldFillZero	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillZero(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillZero	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldFillZero(vecType<T, P> const & Value, int FirstBit, in/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldInsert	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldInsert(genIUType const & Base, genIUType const & Insert, i/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldInsert	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldInsert(vecType<T, P> const & Base, vecType<T, P> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 bitfieldInterleave(glm::uint8 x, glm::uint8 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint16 x, glm::uint16 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z, glm/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z, /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y, glm::uint32 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int16 bitfieldInterleave(int8 x, int8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int16 x, int16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z, int8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z, int16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y, int32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(uint8 x, uint8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint16 x, uint16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z, uint8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z, uint16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y, uint32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldReverse	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genType bitfieldReverse(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bitfieldReverse	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldReverse(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldRotateLeft	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateLeft(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateLeft	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldRotateLeft(vecType<T, P> const & In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
bitfieldRotateRight	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateRight(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateRight	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> bitfieldRotateRight(vecType<T, P> const & In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap
Bitmap	Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
bitmapFromFile	Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {    $/;"	f	class:Bitmap	typeref:typename:Bitmap
black	nuklear/nuklear.h	/^    NK_STORAGE const struct nk_color black = {0,0,0,255};$/;"	s	function:nk_draw_color_picker
black_trans	nuklear/nuklear.h	/^    NK_STORAGE const struct nk_color black_trans = {0,0,0,0};$/;"	s	function:nk_draw_color_picker
Blank_Wall	main.cpp	/^void Blank_Wall(float **ez, int gx, int gy, int R, GLubyte *data){$/;"	f	typeref:typename:void
bool1	glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatib/;"	t	namespace:glm	typeref:typename:bool
bool1x1	glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_c/;"	t	namespace:glm	typeref:typename:bool
bool2	glm/gtx/compatibility.hpp	/^	typedef tvec2<bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec2<bool,highp>
bool2x2	glm/gtx/compatibility.hpp	/^	typedef tmat2x2<bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. (F/;"	t	namespace:glm	typeref:typename:tmat2x2<bool,highp>
bool2x3	glm/gtx/compatibility.hpp	/^	typedef tmat2x3<bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. (F/;"	t	namespace:glm	typeref:typename:tmat2x3<bool,highp>
bool2x4	glm/gtx/compatibility.hpp	/^	typedef tmat2x4<bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. (F/;"	t	namespace:glm	typeref:typename:tmat2x4<bool,highp>
bool3	glm/gtx/compatibility.hpp	/^	typedef tvec3<bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec3<bool,highp>
bool3x2	glm/gtx/compatibility.hpp	/^	typedef tmat3x2<bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. (F/;"	t	namespace:glm	typeref:typename:tmat3x2<bool,highp>
bool3x3	glm/gtx/compatibility.hpp	/^	typedef tmat3x3<bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. (F/;"	t	namespace:glm	typeref:typename:tmat3x3<bool,highp>
bool3x4	glm/gtx/compatibility.hpp	/^	typedef tmat3x4<bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. (F/;"	t	namespace:glm	typeref:typename:tmat3x4<bool,highp>
bool4	glm/gtx/compatibility.hpp	/^	typedef tvec4<bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec4<bool,highp>
bool4x2	glm/gtx/compatibility.hpp	/^	typedef tmat4x2<bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. (F/;"	t	namespace:glm	typeref:typename:tmat4x2<bool,highp>
bool4x3	glm/gtx/compatibility.hpp	/^	typedef tmat4x3<bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. (F/;"	t	namespace:glm	typeref:typename:tmat4x3<bool,highp>
bool4x4	glm/gtx/compatibility.hpp	/^	typedef tmat4x4<bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. (F/;"	t	namespace:glm	typeref:typename:tmat4x4<bool,highp>
bool_type	glm/detail/type_gentype.hpp	/^		typedef TYPE<bool> bool_type;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<bool>
bool_type	glm/detail/type_vec1.hpp	/^		typedef tvec1<bool, P> bool_type;$/;"	t	struct:glm::tvec1	typeref:typename:tvec1<bool,P>
bool_type	glm/detail/type_vec2.hpp	/^		typedef tvec2<bool, P> bool_type;$/;"	t	struct:glm::tvec2	typeref:typename:tvec2<bool,P>
bool_type	glm/detail/type_vec3.hpp	/^		typedef tvec3<bool, P> bool_type;$/;"	t	struct:glm::tvec3	typeref:typename:tvec3<bool,P>
bool_type	glm/detail/type_vec4.hpp	/^		typedef tvec4<bool, P> bool_type;$/;"	t	struct:glm::tvec4	typeref:typename:tvec4<bool,P>
bool_type	glm/gtx/common.inl	/^		return typename tvec1<T, P>::bool_type($/;"	m	class:glm::isdenormal::tvec1<T, P>	typeref:typename:typename	file:
bool_type	glm/gtx/common.inl	/^		return typename tvec2<T, P>::bool_type($/;"	m	class:glm::isdenormal::tvec2<T, P>	typeref:typename:typename	file:
bool_type	glm/gtx/common.inl	/^		return typename tvec3<T, P>::bool_type($/;"	m	class:glm::isdenormal::tvec3<T, P>	typeref:typename:typename	file:
bool_type	glm/gtx/common.inl	/^		return typename tvec4<T, P>::bool_type($/;"	m	class:glm::isdenormal::	typeref:typename:typename	file:
bool_type	glm/gtx/simd_quat.hpp	/^		typedef tquat<bool, defaultp> bool_type;$/;"	t	namespace:glm::detail	typeref:typename:tquat<bool,defaultp>
bool_type	glm/gtx/simd_vec4.hpp	/^		typedef tvec4<bool, highp> bool_type;$/;"	t	namespace:glm::detail	typeref:typename:tvec4<bool,highp>
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_panel	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_button	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_chart	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_combo	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_edit	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_progress	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_property	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_scrollbar	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_slider	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_tab	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_toggle	typeref:typename:float
border	nuklear/nuklear.h	/^    float border;$/;"	m	struct:nk_style_window	typeref:typename:float
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_button	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_property	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_slider	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_tab	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_color
border_color	nuklear/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
border_cursor	nuklear/nuklear.h	/^    float border_cursor;$/;"	m	struct:nk_style_scrollbar	typeref:typename:float
bottom	nuklear/nuklear.h	/^    struct nk_color bottom;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_color
bounds	nuklear/nuklear.h	/^        struct nk_rect bounds = {0,0,0,0};$/;"	s	function:nk_combo_begin_image
bounds	nuklear/nuklear.h	/^        struct nk_rect bounds = {0,0,0,0};$/;"	s	function:nk_combo_begin_symbol
bounds	nuklear/nuklear.h	/^    struct nk_rect bounds = {0, 0, 0, 0};$/;"	s	function:nk_chart_begin_colored
bounds	nuklear/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_panel	typeref:struct:nk_rect
bounds	nuklear/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_window	typeref:struct:nk_rect
bss_	glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	typeref:typename:basic_state_saver<CTy> const
buffer	nuklear/nuklear.h	/^    char buffer[NK_MAX_NUMBER_BUFFER];$/;"	m	struct:nk_property_state	typeref:typename:char[]
buffer	nuklear/nuklear.h	/^    struct nk_buffer *buffer;$/;"	m	struct:nk_draw_list	typeref:struct:nk_buffer *
buffer	nuklear/nuklear.h	/^    struct nk_buffer buffer;$/;"	m	struct:nk_str	typeref:struct:nk_buffer
buffer	nuklear/nuklear.h	/^    struct nk_command_buffer *buffer;$/;"	m	struct:nk_panel	typeref:struct:nk_command_buffer *
buffer	nuklear/nuklear.h	/^    struct nk_command_buffer buffer;$/;"	m	struct:nk_window	typeref:struct:nk_command_buffer
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi_uc[128]
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon84e4e886030a	typeref:typename:int
build	nuklear/nuklear.h	/^    int build;$/;"	m	struct:nk_context	typeref:typename:int
build	nuklear/nuklear.h	/^    struct nk_font_bake_data *build;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_bake_data *
button	nuklear/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style	typeref:struct:nk_style_button
button	nuklear/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_button
buttons	nuklear/nuklear.h	/^    struct nk_mouse_button buttons[NK_BUTTON_MAX];$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse_button[]
button_behavior	nuklear/nuklear.h	/^    enum nk_button_behavior button_behavior;$/;"	m	struct:nk_context	typeref:enum:nk_button_behavior
button_padding	nuklear/nuklear.h	/^    struct nk_vec2 button_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_vec2
bvec1	glm/gtc/vec1.hpp	/^	typedef highp_bvec1				bvec1;$/;"	t	namespace:glm	typeref:typename:highp_bvec1
bvec1	glm/gtc/vec1.hpp	/^	typedef lowp_bvec1				bvec1;$/;"	t	namespace:glm	typeref:typename:lowp_bvec1
bvec1	glm/gtc/vec1.hpp	/^	typedef mediump_bvec1			bvec1;$/;"	t	namespace:glm	typeref:typename:mediump_bvec1
bvec2	glm/detail/type_vec.hpp	/^	typedef highp_bvec2			bvec2;$/;"	t	namespace:glm	typeref:typename:highp_bvec2
bvec2	glm/detail/type_vec.hpp	/^	typedef lowp_bvec2			bvec2;$/;"	t	namespace:glm	typeref:typename:lowp_bvec2
bvec2	glm/detail/type_vec.hpp	/^	typedef mediump_bvec2		bvec2;$/;"	t	namespace:glm	typeref:typename:mediump_bvec2
bvec3	glm/detail/type_vec.hpp	/^	typedef highp_bvec3			bvec3;$/;"	t	namespace:glm	typeref:typename:highp_bvec3
bvec3	glm/detail/type_vec.hpp	/^	typedef lowp_bvec3			bvec3;$/;"	t	namespace:glm	typeref:typename:lowp_bvec3
bvec3	glm/detail/type_vec.hpp	/^	typedef mediump_bvec3		bvec3;$/;"	t	namespace:glm	typeref:typename:mediump_bvec3
bvec4	glm/detail/type_vec.hpp	/^	typedef highp_bvec4			bvec4;$/;"	t	namespace:glm	typeref:typename:highp_bvec4
bvec4	glm/detail/type_vec.hpp	/^	typedef lowp_bvec4			bvec4;$/;"	t	namespace:glm	typeref:typename:lowp_bvec4
bvec4	glm/detail/type_vec.hpp	/^	typedef mediump_bvec4		bvec4;$/;"	t	namespace:glm	typeref:typename:mediump_bvec4
byte	glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm	typeref:typename:detail::uint8
c	main.cpp	/^float c = 2.99792458e8;$/;"	v	typeref:typename:float
c	nuklear/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_vec2i
c	nuklear/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_vec2i
c	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big	typeref:typename:char
CalcFPS	main.cpp	/^float CalcFPS(GLFWwindow *gWindow, float theTimeInterval, std::string theWindowTitle)$/;"	f	typeref:typename:float
call	glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static genFIType call(genFIType x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER genFIType	file:
call	glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const & x, T const & y, bool const & a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const & x, T const & y, U const & a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y,/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y,/;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vecType<float, lowp> call(vecType<float, lowp> const & x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vecType<float,lowp>	file:
call	glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & vec)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(tvec1<T, P> const & a, tvec1<T, P> const & b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(tvec2<T, P> const & x, tvec2<T, P> const & y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(tvec3<T, P> const & x, tvec3<T, P> const & y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(tvec4<T, P> const & x, tvec4<T, P> const & y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static vecType<int, P> call(vecType<T, P> const & x)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vecType<int,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<int, P> call(vecType<T, P> const & vec)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vecType<int,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x, T Shift)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x, T)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(tmat2x2<T, P> const & m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(tmat3x3<T, P> const & m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(tmat4x4<T, P> const & m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat2x2<T, P> call(tmat2x2<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat2x3<T, P> call(tmat3x2<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat2x4<T, P> call(tmat4x2<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat3x2<T, P> call(tmat2x3<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat3x3<T, P> call(tmat3x3<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat3x4<T, P> call(tmat4x3<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat4x2<T, P> call(tmat2x4<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat4x3<T, P> call(tmat3x4<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>	file:
call	glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static tmat4x4<T, P> call(tmat4x4<T, P> const & m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>	file:
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<R, P> call(R (*Func) (T x), tvec1<T, P> const & v)$/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<R,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, tvec1</;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<R, P> call(R (*Func) (T x), tvec2<T, P> const & v)$/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER tvec2<R,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, tvec2</;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<R, P> call(R (*Func) (T x), tvec3<T, P> const & v)$/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER tvec3<R,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, tvec3</;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<R, P> call(R (*Func) (T x), tvec4<T, P> const & v)$/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER tvec4<R,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
call	glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, tvec4</;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
call	glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(tvec4<T, P> const & ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>	file:
call	glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static tvec4<T, P> call(tvec4<T, P> const & ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>	file:
call	glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & ColorRGB, T GammaCorrection/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtc/integer.inl	/^			GLM_FUNC_QUALIFIER static tvec4<int, P> call(tvec4<int, P> const & vec)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER tvec4<int,P>	file:
call	glm/gtc/integer.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & vec)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtc/quaternion.inl	/^		static GLM_FUNC_QUALIFIER T call(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static tvec1<uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER tvec1<uint8,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static tvec2<uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER tvec2<uint8,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static tvec3<uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER tvec3<uint8,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static tvec4<uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER tvec4<uint8,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<double, highp> call(vecType<double, highp> const & Min, vecT/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<double,highp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<double, lowp> call(vecType<double, lowp> const & Min, vecTyp/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<double,lowp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<double, mediump> call(vecType<double, mediump> const & Min, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<double,mediump>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<float, highp> call(vecType<float, highp> const & Min, vecTyp/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<float,highp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<float, lowp> call(vecType<float, lowp> const & Min, vecType</;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<float,lowp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<float, mediump> call(vecType<float, mediump> const & Min, ve/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<float,mediump>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<int16, P> call(vecType<int16, P> const & Min, vecType<int16,/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<int16,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<int32, P> call(vecType<int32, P> const & Min, vecType<int32,/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<int32,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<int64, P> call(vecType<int64, P> const & Min, vecType<int64,/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<int64,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<int8, P> call(vecType<int8, P> const & Min, vecType<int8, P>/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<int8,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<long double, highp> call(vecType<long double, highp> const &/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<long double,highp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<long double, lowp> call(vecType<long double, lowp> const & M/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<long double,lowp>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<long double, mediump> call(vecType<long double, mediump> con/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<long double,mediump>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint16, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint16,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint16, P> call(vecType<uint16, P> const & Min, vecType<uint/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint16,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint32, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint32,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint32, P> call(vecType<uint32, P> const & Min, vecType<uint/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint32,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint64, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint64,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint64, P> call(vecType<uint64, P> const & Min, vecType<uint/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint64,P>	file:
call	glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vecType<uint8, P> call(vecType<uint8, P> const & Min, vecType<uint8,/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint8,P>	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_ceilMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_floorMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_roundMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T Shift)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & v, T)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & x)$/;"	f	struct:glm::detail::compute_ceilPowerOfTwo	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtx/common.inl	/^		GLM_FUNC_QUALIFIER static vecType<T, P> call(vecType<T, P> const & a, vecType<T, P> const & b)$/;"	f	struct:glm::detail::compute_fmod	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>	file:
call	glm/gtx/norm.inl	/^		GLM_FUNC_QUALIFIER static T call(vecType<T, P> const & v)$/;"	f	struct:glm::detail::compute_length2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tdualquat<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat2x2<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat2x3<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat2x4<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat3x2<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat3x3<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat3x4<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat4x2<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat4x3<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tmat4x4<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tquat<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec1<bool, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec1<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec2<bool, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec2<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec3<bool, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec3<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec4<bool, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tvec4<T, P> const & x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(tvec2<T, P> const & v0, tvec2<T, P> const & v1, T const & /;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(tvec3<T, P> const & v0, tvec3<T, P> const & v1, T const & /;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(tvec4<T, P> const & v0, tvec4<T, P> const & v1, T const & /;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static tvec2<bool, P> call(tvec2<T, P> const & v, T const & epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER tvec2<bool,P>	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static tvec3<bool, P> call(tvec3<T, P> const & v, T const & epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER tvec3<bool,P>	file:
call	glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static tvec4<bool, P> call(tvec4<T, P> const & v, T const & epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>	file:
calls	nuklear/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_buffer	typeref:typename:nk_size
calls	nuklear/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_memory_status	typeref:typename:nk_size
Camera	Camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera
Camera	Camera.h	/^    class Camera {$/;"	c	namespace:tdogl
CameraInit	main.cpp	/^void CameraInit()$/;"	f	typeref:typename:void
cap	nuklear/nuklear.h	/^    nk_size cap;$/;"	m	struct:nk_pool	typeref:typename:nk_size
capacity	nuklear/nuklear.h	/^    unsigned capacity;$/;"	m	struct:nk_pool	typeref:typename:unsigned
CASE	stb_image.h	/^         #define CASE(/;"	d
CASE	stb_image.h	/^      #define CASE(/;"	d
catmullRom	glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType catmullRom$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceil	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD ceil$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
ceilMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> ceilMultiple(vecType<T, P> const & Source, vecType<T, P> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
ceilPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> ceilPowerOfTwo(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
CEZ	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v	typeref:typename:float **
CEZLX	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v	typeref:typename:float ****
CEZLY	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v	typeref:typename:float ******
CEZX	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float **
CEZXL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float ****
CEZY	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float **********
CEZYL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float ************
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860e0a	typeref:typename:stbi_uc
chardata_for_range	nuklear/nuklear.h	/^    struct nk_tt_packedchar *chardata_for_range; \/* output *\/$/;"	m	struct:nk_tt_pack_range	typeref:struct:nk_tt_packedchar *
chart	nuklear/nuklear.h	/^    struct nk_chart chart;$/;"	m	struct:nk_panel	typeref:struct:nk_chart
chart	nuklear/nuklear.h	/^    struct nk_style_chart chart;$/;"	m	struct:nk_style	typeref:struct:nk_style_chart
char_storage	nuklear/nuklear.h	/^   short char_storage;$/;"	m	struct:nk_text_undo_record	typeref:typename:short
char_type	glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	typeref:typename:CTy
char_type	glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:state_type::char_type
checkbox	nuklear/nuklear.h	/^    struct nk_style_toggle checkbox;$/;"	m	struct:nk_style	typeref:struct:nk_style_toggle
CheckOpenGLError	main.cpp	/^void CheckOpenGLError(void)$/;"	f	typeref:typename:void
CHXLY	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v	typeref:typename:float ********
CHXY	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float **************
CHXYL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float ****************
CHYLX	main.cpp	/^float **CEZ, **CEZLX, **CEZLY, **CHXLY, **CHYLX;$/;"	v	typeref:typename:float **********
CHYX	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float ******
CHYXL	main.cpp	/^float **CEZX, **CEZXL, **CHYX, **CHYXL, **CEZY, **CEZYL, **CHXY, **CHXYL;$/;"	v	typeref:typename:float ********
circle_segment_count	nuklear/nuklear.h	/^    unsigned int circle_segment_count; \/* number of segments used for circles: default to 22 *\/$/;"	m	struct:nk_convert_config	typeref:typename:unsigned int
circle_vtx	nuklear/nuklear.h	/^    struct nk_vec2 circle_vtx[12];$/;"	m	struct:nk_draw_list	typeref:struct:nk_vec2[12]
circularRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, defaultp> circularRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,defaultp>
clamp	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD clamp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
clamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType clamp(genType const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
clamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> clamp(tvec2<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
clamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> clamp(tvec3<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
clamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> clamp(tvec4<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
clicked	nuklear/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_key	typeref:typename:unsigned int
clicked	nuklear/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_mouse_button	typeref:typename:unsigned int
clicked_pos	nuklear/nuklear.h	/^    struct nk_vec2 clicked_pos;$/;"	m	struct:nk_mouse_button	typeref:struct:nk_vec2
clip	nuklear/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_context	typeref:struct:nk_clipboard
clip	nuklear/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_text_edit	typeref:struct:nk_clipboard
clip	nuklear/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_rect
clip	nuklear/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_panel	typeref:struct:nk_rect
clip_rect	nuklear/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_command	typeref:struct:nk_rect
clip_rect	nuklear/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_list	typeref:struct:nk_rect
closestPointOnLine	glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
closestPointOnLine	glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
close_button	nuklear/nuklear.h	/^    struct nk_style_button close_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_button
close_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type close_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_symbol_type
cmds	nuklear/nuklear_glfw_gl3.h	/^    struct nk_buffer cmds;$/;"	m	struct:nk_glfw_device	typeref:struct:nk_buffer
cmd_count	nuklear/nuklear.h	/^    unsigned int cmd_count;$/;"	m	struct:nk_draw_list	typeref:typename:unsigned int
cmd_offset	nuklear/nuklear.h	/^    nk_size cmd_offset;$/;"	m	struct:nk_draw_list	typeref:typename:nk_size
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon84e4e886050a	typeref:typename:stbi__uint16[256]
codepoint	nuklear/nuklear.h	/^    nk_rune codepoint;$/;"	m	struct:nk_font_glyph	typeref:typename:nk_rune
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon84e4e886100a	typeref:typename:stbi__gif_lzw[4096]
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
code_buffer	stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon84e4e886060a	typeref:typename:stbi__uint32
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:stbi__uint32
col	nuklear/nuklear.h	/^    nk_draw_vertex_color col;$/;"	m	struct:nk_draw_vertex	typeref:typename:nk_draw_vertex_color
colMajor2	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> colMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
colMajor3	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> colMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
colMajor4	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> colMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_curve	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_line	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_text	typeref:struct:nk_color
color	nuklear/nuklear.h	/^    struct nk_color color;$/;"	m	union:nk_style_item_data	typeref:struct:nk_color
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon84e4e886100a	typeref:typename:stbi_uc *
cols	glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 2;$/;"	m	struct:glm::tmat2x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 3;$/;"	m	struct:glm::tmat3x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	m	struct:glm::tmat4x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
cols	glm/gtx/simd_mat4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t cols = 4;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
column	glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
column	glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::col_type column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::col_type
columns	nuklear/nuklear.h	/^    int columns;$/;"	m	struct:nk_row_layout	typeref:typename:int
column_major	glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
col_size	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::size_type base<vT, cT, rT, pT>::col_size()$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::size_type
col_type	glm/detail/type_mat2x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:tvec2<T,P>
col_type	glm/detail/type_mat2x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:tvec3<T,P>
col_type	glm/detail/type_mat2x3.inl	/^		return typename tmat2x3<T, P>::col_type($/;"	m	class:glm::operator *::tmat2x3<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat2x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:tvec4<T,P>
col_type	glm/detail/type_mat2x4.inl	/^		return typename tmat2x4<T, P>::col_type($/;"	m	class:glm::operator *::tmat2x4<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat3x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:tvec2<T,P>
col_type	glm/detail/type_mat3x2.inl	/^		return typename tmat3x2<T, P>::col_type($/;"	m	class:glm::operator *::tmat3x2<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat3x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:tvec3<T,P>
col_type	glm/detail/type_mat3x3.inl	/^		return typename tmat3x3<T, P>::col_type($/;"	m	class:glm::operator *::tmat3x3<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat3x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:tvec4<T,P>
col_type	glm/detail/type_mat3x4.inl	/^		return typename tmat3x4<T, P>::col_type($/;"	m	class:glm::operator *::tmat3x4<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat4x2.hpp	/^		typedef tvec2<T, P> col_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:tvec2<T,P>
col_type	glm/detail/type_mat4x2.inl	/^		return typename tmat4x2<T, P>::col_type($/;"	m	class:glm::operator *::tmat4x2<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat4x3.hpp	/^		typedef tvec3<T, P> col_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:tvec3<T,P>
col_type	glm/detail/type_mat4x3.inl	/^		return typename tmat4x3<T, P>::col_type($/;"	m	class:glm::operator *::tmat4x3<T, P>	typeref:typename:typename	file:
col_type	glm/detail/type_mat4x4.hpp	/^		typedef tvec4<T, P> col_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:tvec4<T,P>
col_type	glm/gtx/simd_mat4.hpp	/^		typedef fvec4SIMD col_type;$/;"	t	namespace:glm::detail	typeref:typename:fvec4SIMD
combine	glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> combine($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
combo	nuklear/nuklear.h	/^    struct nk_style_combo combo;$/;"	m	struct:nk_style	typeref:struct:nk_style_combo
COMBO	stb_image.h	/^      #define COMBO(/;"	d
combo_border	nuklear/nuklear.h	/^    float combo_border;$/;"	m	struct:nk_style_window	typeref:typename:float
combo_border_color	nuklear/nuklear.h	/^    struct nk_color combo_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
combo_count	nuklear/nuklear.h	/^    unsigned combo_count;$/;"	m	struct:nk_popup_state	typeref:typename:unsigned
comp	glm/gtx/simd_vec4.hpp	/^	enum comp$/;"	g	namespace:glm
compAdd	glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compAdd(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
Compare	main.cpp	/^float Compare(float x, float a, float b)$/;"	f	typeref:typename:float
compMax	glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMax(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMin	glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMin(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMul	glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMul(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
components	glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tmat2x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tmat3x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tmat4x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_vec1.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 1;$/;"	m	struct:glm::tvec1	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_vec2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tvec2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_vec3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 3;$/;"	m	struct:glm::tvec3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/detail/type_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tvec4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/gtc/quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	m	struct:glm::tquat	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/gtx/dual_quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 2;$/;"	m	struct:glm::tdualquat	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/gtx/simd_mat4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/gtx/simd_quat.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
components	glm/gtx/simd_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t components = 4;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
component_count	glm/detail/setup.hpp	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR component_count_t component_count(genType const & m)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR component_count_t
component_count_t	glm/detail/setup.hpp	/^		typedef size_t component_count_t;$/;"	t	namespace:glm::detail	typeref:typename:size_t
computeNormal	glm/detail/dummy.cpp	/^glm::vec3 computeNormal$/;"	f	typeref:typename:glm::vec3
compute_abs	glm/detail/func_common.inl	/^	struct compute_abs$/;"	s	namespace:glm::detail	file:
compute_abs	glm/detail/func_common.inl	/^	struct compute_abs<genFIType, false>$/;"	s	namespace:glm::detail	file:
compute_abs	glm/detail/func_common.inl	/^	struct compute_abs<genFIType, true>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	glm/gtx/vector_query.inl	/^	struct compute_areCollinear<T, P, tvec2>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	glm/gtx/vector_query.inl	/^	struct compute_areCollinear<T, P, tvec3>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	glm/gtx/vector_query.inl	/^	struct compute_areCollinear<T, P, tvec4>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	glm/gtx/vector_query.inl	/^	struct compute_areCollinear{};$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep<true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep<true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	glm/gtc/round.inl	/^	struct compute_ceilMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	glm/gtc/round.inl	/^	struct compute_ceilMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	glm/gtc/round.inl	/^	struct compute_ceilMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	glm/gtc/round.inl	/^	struct compute_ceilMultiple{};$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	glm/gtc/round.inl	/^	struct compute_ceilPowerOfTwo$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	glm/gtc/round.inl	/^	struct compute_ceilPowerOfTwo<T, P, vecType, false>$/;"	s	namespace:glm::detail	file:
compute_ceilShift	glm/gtc/round.inl	/^	struct compute_ceilShift$/;"	s	namespace:glm::detail	file:
compute_ceilShift	glm/gtc/round.inl	/^	struct compute_ceilShift<T, P, vecType, true>$/;"	s	namespace:glm::detail	file:
compute_determinant	glm/detail/func_matrix.inl	/^	struct compute_determinant<tmat2x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_determinant	glm/detail/func_matrix.inl	/^	struct compute_determinant<tmat3x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_determinant	glm/detail/func_matrix.inl	/^	struct compute_determinant<tmat4x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_determinant	glm/detail/func_matrix.inl	/^	struct compute_determinant{};$/;"	s	namespace:glm::detail	file:
compute_dot	glm/detail/func_geometric.inl	/^	struct compute_dot<tvec1, T, P>$/;"	s	namespace:glm::detail	file:
compute_dot	glm/detail/func_geometric.inl	/^	struct compute_dot<tvec2, T, P>$/;"	s	namespace:glm::detail	file:
compute_dot	glm/detail/func_geometric.inl	/^	struct compute_dot<tvec3, T, P>$/;"	s	namespace:glm::detail	file:
compute_dot	glm/detail/func_geometric.inl	/^	struct compute_dot<tvec4, T, P>$/;"	s	namespace:glm::detail	file:
compute_dot	glm/detail/func_geometric.inl	/^	struct compute_dot{};$/;"	s	namespace:glm::detail	file:
compute_dot	glm/gtc/quaternion.inl	/^	struct compute_dot<tquat, T, P>$/;"	s	namespace:glm::detail	file:
compute_findLSB	glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 32>$/;"	s	namespace:glm::detail	file:
compute_findLSB	glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 64>$/;"	s	namespace:glm::detail	file:
compute_findLSB	glm/detail/func_integer.inl	/^	struct compute_findLSB$/;"	s	namespace:glm::detail	file:
compute_findMSB_32	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_32(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_64	glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_64(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_step_vec	glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec$/;"	s	namespace:glm::detail	file:
compute_findMSB_step_vec	glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec<T, P, vecType, false>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<T, P, vecType, 32>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<T, P, vecType, 64>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	glm/detail/func_integer.inl	/^	struct compute_findMSB_vec$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	glm/gtc/round.inl	/^	struct compute_floorMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	glm/gtc/round.inl	/^	struct compute_floorMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	glm/gtc/round.inl	/^	struct compute_floorMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	glm/gtc/round.inl	/^	struct compute_floorMultiple{};$/;"	s	namespace:glm::detail	file:
compute_fmod	glm/gtx/common.inl	/^	struct compute_fmod$/;"	s	namespace:glm::detail	file:
compute_fmod	glm/gtx/common.inl	/^	struct compute_fmod<T, P, vecType, false>$/;"	s	namespace:glm::detail	file:
compute_inverse	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> compute_inverse(tmat2x2<T, P> const & m)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
compute_inverse	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> compute_inverse(tmat3x3<T, P> const & m)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
compute_inverse	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> compute_inverse(tmat4x4<T, P> const & m)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
compute_inversesqrt	glm/detail/func_exponential.inl	/^	struct compute_inversesqrt$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	glm/detail/func_exponential.inl	/^	struct compute_inversesqrt<vecType, float, lowp>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	glm/gtx/vector_query.inl	/^	struct compute_isCompNull<T, P, tvec2>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	glm/gtx/vector_query.inl	/^	struct compute_isCompNull<T, P, tvec3>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	glm/gtx/vector_query.inl	/^	struct compute_isCompNull<T, P, tvec4>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	glm/gtx/vector_query.inl	/^	struct compute_isCompNull{};$/;"	s	namespace:glm::detail	file:
compute_length2	glm/gtx/norm.inl	/^	struct compute_length2$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<double, highp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<double, lowp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<double, mediump, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<float, highp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<float, lowp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<float, mediump, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<int16, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<int32, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<int64, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<int8, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<long double, highp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<long double, lowp, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<long double, mediump, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<uint16, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<uint32, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<uint64, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_linearRand	glm/gtc/random.inl	/^	struct compute_linearRand<uint8, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_log2	glm/detail/func_exponential.inl	/^	struct compute_log2$/;"	s	namespace:glm::detail	file:
compute_log2	glm/gtc/integer.inl	/^		struct compute_log2<int, P, tvec4, false>$/;"	s	namespace:glm::detail	file:
compute_log2	glm/gtc/integer.inl	/^	struct compute_log2<T, P, vecType, false>$/;"	s	namespace:glm::detail	file:
compute_mix	glm/detail/func_common.inl	/^	struct compute_mix$/;"	s	namespace:glm::detail	file:
compute_mix	glm/detail/func_common.inl	/^	struct compute_mix<T, bool>$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	glm/detail/func_common.inl	/^	struct compute_mix_scalar$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	glm/detail/func_common.inl	/^	struct compute_mix_scalar<T, bool, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	glm/detail/func_common.inl	/^	struct compute_mix_vector$/;"	s	namespace:glm::detail	file:
compute_mix_vector	glm/detail/func_common.inl	/^	struct compute_mix_vector<T, bool, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint16, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint32, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint64, P, vecType>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint8, P, tvec1>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint8, P, tvec2>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint8, P, tvec3>$/;"	s	namespace:glm::detail	file:
compute_rand	glm/gtc/random.inl	/^	struct compute_rand<uint8, P, tvec4>$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb<T, P, tvec4>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	glm/gtc/round.inl	/^	struct compute_roundMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	glm/gtc/round.inl	/^	struct compute_roundMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	glm/gtc/round.inl	/^	struct compute_roundMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	glm/gtc/round.inl	/^	struct compute_roundMultiple{};$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	glm/gtc/color_space.inl	/^	struct compute_srgbToRgb$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	glm/gtc/color_space.inl	/^	struct compute_srgbToRgb<T, P, tvec4>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tdualquat, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat2x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat2x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat2x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat3x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat3x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat3x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat4x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat4x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tmat4x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tquat, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec1, bool, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec1, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec2, bool, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec2, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec3, bool, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec3, T, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec4, bool, P>$/;"	s	namespace:glm::detail	file:
compute_to_string	glm/gtx/string_cast.inl	/^	struct compute_to_string<tvec4, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat2x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat2x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat2x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat3x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat3x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat3x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat4x2, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat4x3, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose<tmat4x4, T, P>$/;"	s	namespace:glm::detail	file:
compute_transpose	glm/detail/func_matrix.inl	/^	struct compute_transpose{};$/;"	s	namespace:glm::detail	file:
compute_YCoCgR	glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR {$/;"	c	namespace:glm	file:
compute_YCoCgR	glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR<T, P, true> {$/;"	c	namespace:glm	file:
config	nuklear/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font	typeref:struct:nk_font_config *
config	nuklear/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_config *
conjugate	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> conjugate(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
conjugate	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD conjugate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
constantAttenuation	glm/detail/dummy.cpp	/^	float constantAttenuation; \/\/ K0$/;"	m	struct:light	typeref:typename:float	file:
const_pointer	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const_pointer;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> const *
const_pointer_const	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const * const const_pointer_const;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> const * const
const_reference	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & const_reference;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> const &
content_padding	nuklear/nuklear.h	/^    struct nk_vec2 content_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_vec2
contextual_border	nuklear/nuklear.h	/^    float contextual_border;$/;"	m	struct:nk_style_window	typeref:typename:float
contextual_border_color	nuklear/nuklear.h	/^    struct nk_color contextual_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
contextual_button	nuklear/nuklear.h	/^    struct nk_style_button contextual_button;$/;"	m	struct:nk_style	typeref:struct:nk_style_button
ConverterFuncForFormats	Bitmap.cpp	/^static FormatConverterFunc ConverterFuncForFormats(Bitmap::Format srcFormat, Bitmap::Format dest/;"	f	typeref:typename:FormatConverterFunc	file:
convertLinearToSRGB	glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> convertLinearToSRGB(vecType<T, P> const & ColorLinear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
convertLinearToSRGB	glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> convertLinearToSRGB(vecType<T, P> const & ColorLinear, T Gamma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
convertSRGBToLinear	glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> convertSRGBToLinear(vecType<T, P> const & ColorSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
convertSRGBToLinear	glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> convertSRGBToLinear(vecType<T, P> const & ColorSRGB, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
con_count	nuklear/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state	typeref:typename:unsigned
con_old	nuklear/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state	typeref:typename:unsigned
coord_type	nuklear/nuklear.h	/^    enum nk_font_coord_type coord_type;$/;"	m	struct:nk_font_config	typeref:enum:nk_font_coord_type
copy	nuklear/nuklear.h	/^    nk_copy_f copy;$/;"	m	struct:nk_clipboard	typeref:typename:nk_copy_f
copyRectFromBitmap	Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap	typeref:typename:void
cos	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> cos(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
cosh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> cosh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
cos_52s	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T cos_52s(T x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
cos_52s	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> cos_52s(vecType<T, P> const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
cot	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType cot(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cot	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> cot(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
coth	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType coth(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
coth	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> coth(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
count	nuklear/nuklear.h	/^    int count;$/;"	m	struct:nk_chart_slot	typeref:typename:int
count	nuklear/nuklear.h	/^    unsigned int count;$/;"	m	struct:nk_context	typeref:typename:unsigned int
countof	glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	typeref:typename:std::size_t
CPU_Create_Data	main.cpp	/^void CPU_Create_Data(GLubyte *data, float **ez, int gx, int gy, float yellow, float green, float/;"	f	typeref:typename:void
CPU_EZ	main.cpp	/^void CPU_EZ(float **ez, float **cez, float **cezlx, float **hy, float **cezly, float **hx, int g/;"	f	typeref:typename:void
CPU_HX	main.cpp	/^void CPU_HX(float **hx, float **chxly, float **ez, int gx, int gy){$/;"	f	typeref:typename:void
CPU_HY	main.cpp	/^void CPU_HY(float **hy, float **chylx, float **ez, int gx, int gy){$/;"	f	typeref:typename:void
CPU_Input	main.cpp	/^void CPU_Input(float **ez, int px, int py, float p, int gx, int gy){$/;"	f	typeref:typename:void
CPU_MAX_MIN	main.cpp	/^void CPU_MAX_MIN(float **ez, float *max, float *min, int gx, int gy){$/;"	f	typeref:typename:void
CPU_PML_EZ	main.cpp	/^void CPU_PML_EZ(float **ezx, float **cezx, float **cezxl, float **hy, float **ezy, float **cezy,/;"	f	typeref:typename:void
CPU_PML_HX	main.cpp	/^void CPU_PML_HX(float **hxy, float **chxy, float **chxyl, float **ez, float **hx, int gx, int gy/;"	f	typeref:typename:void
CPU_PML_HY	main.cpp	/^void CPU_PML_HY(float **hyx, float **chyx, float **chyxl, float **ez, float **hy, int gx, int gy/;"	f	typeref:typename:void
CreateTexture	main.cpp	/^void CreateTexture(int index, GLuint *tex)$/;"	f	typeref:typename:void
cross	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> cross(tvec3<T, P> const & x, tvec3<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
cross	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> cross(tquat<T, P> const & q1, tquat<T, P> const & q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
cross	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> cross$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
cross	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD cross$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
csc	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csc(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csc	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> csc(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
csch	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csch(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csch	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> csch(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
ctor	glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	g	namespace:glm
ctor	glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	g	struct:glm::detail::genType
ctrl	nuklear/nuklear.h	/^    struct nk_vec2i ctrl[2];$/;"	m	struct:nk_command_curve	typeref:struct:nk_vec2i[2]
ctx	main.cpp	/^struct nk_context *ctx;$/;"	v	typeref:struct:nk_context *
ctx	nuklear/nuklear_glfw_gl3.h	/^    struct nk_context ctx;$/;"	m	struct:nk_glfw	typeref:struct:nk_context
cubic	glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType cubic$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
current	nuklear/nuklear.h	/^    struct nk_window *current;$/;"	m	struct:nk_context	typeref:struct:nk_window *
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_edit_state	typeref:typename:int
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_property_state	typeref:typename:int
cursor	nuklear/nuklear.h	/^    int cursor;$/;"	m	struct:nk_text_edit	typeref:typename:int
cursors	nuklear/nuklear.h	/^    const struct nk_cursor *cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_style	typeref:struct:nk_cursor * []
cursors	nuklear/nuklear.h	/^    struct nk_cursor cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_font_atlas	typeref:struct:nk_cursor[]
cursor_active	nuklear/nuklear.h	/^    const struct nk_cursor *cursor_active;$/;"	m	struct:nk_style	typeref:struct:nk_cursor *
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
cursor_active	nuklear/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
cursor_at_end_of_line	nuklear/nuklear.h	/^    unsigned char cursor_at_end_of_line;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
cursor_border	nuklear/nuklear.h	/^    float cursor_border;$/;"	m	struct:nk_style_progress	typeref:typename:float
cursor_border_color	nuklear/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_color
cursor_border_color	nuklear/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_color
cursor_hover	nuklear/nuklear.h	/^    struct nk_color cursor_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
cursor_hover	nuklear/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_item
cursor_last	nuklear/nuklear.h	/^    struct nk_cursor *cursor_last;$/;"	m	struct:nk_style	typeref:struct:nk_cursor *
cursor_normal	nuklear/nuklear.h	/^    struct nk_color cursor_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
cursor_normal	nuklear/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_item
cursor_rounding	nuklear/nuklear.h	/^    float cursor_rounding;$/;"	m	struct:nk_style_progress	typeref:typename:float
cursor_size	nuklear/nuklear.h	/^    float cursor_size;$/;"	m	struct:nk_style_edit	typeref:typename:float
cursor_size	nuklear/nuklear.h	/^    struct nk_vec2 cursor_size;$/;"	m	struct:nk_style_slider	typeref:struct:nk_vec2
cursor_text_hover	nuklear/nuklear.h	/^    struct nk_color cursor_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
cursor_text_normal	nuklear/nuklear.h	/^    struct nk_color cursor_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
curve_segment_count	nuklear/nuklear.h	/^    unsigned int curve_segment_count; \/* number of segments used for curves: default to 22 *\/$/;"	m	struct:nk_convert_config	typeref:typename:unsigned int
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
custom	nuklear/nuklear.h	/^    struct nk_recti custom;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_recti
cx	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc	typeref:typename:short
cx	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled	typeref:typename:short
cx	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex	typeref:typename:short
cy	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc	typeref:typename:short
cy	nuklear/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled	typeref:typename:short
cy	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex	typeref:typename:short
data	glm/detail/type_vec4.hpp	/^				typename detail::simd_data<T, P>::type data;$/;"	m	union:glm::tvec4::__anon0c24fa7f010c	typeref:typename:detail::simd_data<T,P>::type
data	glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::i10i10i10i2	typeref:struct:glm::detail::i10i10i10i2::__anon1165e74f020a	file:
data	glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u10u10u10u2	typeref:struct:glm::detail::u10u10u10u2::__anon1165e74f010a	file:
Data	glm/gtx/simd_mat4.hpp	/^		fvec4SIMD Data[4];$/;"	v	namespace:glm::detail	typeref:typename:fvec4SIMD[4]
Data	glm/gtx/simd_quat.hpp	/^			__m128 Data;$/;"	m	union:glm::detail::__anondb998e73010c	typeref:typename:__m128
Data	glm/gtx/simd_quat.hpp	/^		__m128 Data;$/;"	v	namespace:glm::detail	typeref:typename:__m128
Data	glm/gtx/simd_vec4.hpp	/^			__m128 Data;$/;"	m	union:glm::detail::__anona9631bca010c	typeref:typename:__m128
Data	glm/gtx/simd_vec4.hpp	/^		__m128 Data;$/;"	v	namespace:glm::detail	typeref:typename:__m128
data	nuklear/nuklear.h	/^    const unsigned char* data; \/* pointer to .ttf file *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:const unsigned char *
data	nuklear/nuklear.h	/^    union nk_page_data data;$/;"	m	struct:nk_page_element	typeref:union:nk_page_data
data	nuklear/nuklear.h	/^    union nk_style_item_data data;$/;"	m	struct:nk_style_item	typeref:union:nk_style_item_data
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:stbi_uc *
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:highp_ddualquat
ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:lowp_ddualquat
ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm	typeref:typename:mediump_ddualquat
decode_jpeg_header	stb_image.h	/^static int decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
decode_jpeg_image	stb_image.h	/^static int decode_jpeg_image(stbi__jpeg *j)$/;"	f	typeref:typename:int
decompose	glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER bool decompose(tmat4x4<T, P> const & ModelMatrix, tvec3<T, P> & Scale, tquat/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_button
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_button
dec_button	nuklear/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_button
dec_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_symbol_type
dec_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_symbol_type
defaultp	glm/detail/precision.hpp	/^		defaultp = highp$/;"	e	enum:glm::precision
default_font	nuklear/nuklear.h	/^    struct nk_font *default_font;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font *
degrees	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType degrees(genType radians)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
degrees	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vecType<T, P> degrees(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vecType<T,P>
DeleteTexture	main.cpp	/^void DeleteTexture(int index, GLuint *tex)$/;"	f	typeref:typename:void
delete_length	nuklear/nuklear.h	/^   short delete_length;$/;"	m	struct:nk_text_undo_record	typeref:typename:short
delimeter	glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
delimeter	glm/gtx/io.inl	/^	\/* explicit *\/ GLM_FUNC_QUALIFIER delimeter<CTy>::delimeter(CTy a, CTy b, CTy c)$/;"	f	class:glm::io::delimeter	typeref:typename:GLM_FUNC_QUALIFIER
delim_left	glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delim_right	glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delta	nuklear/nuklear.h	/^    struct nk_vec2 delta;$/;"	m	struct:nk_mouse	typeref:struct:nk_vec2
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon84e4e886050a	typeref:typename:int[17]
delta_t	main.cpp	/^float delta_t;$/;"	v	typeref:typename:float
delta_x	main.cpp	/^float delta_x;$/;"	v	typeref:typename:float
delta_y	main.cpp	/^float delta_y;$/;"	v	typeref:typename:float
dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon84e4e886060a	typeref:typename:stbi_uc[4][64]
dequant2	stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon84e4e886060a	typeref:typename:unsigned short[4][64]
descent	nuklear/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font	typeref:typename:float
detail	glm/detail/func_common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/func_exponential.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/func_geometric.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/func_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/func_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/func_matrix.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/intrinsic_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_common.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/detail/intrinsic_exponential.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_geometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_geometric.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/detail/intrinsic_integer.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/intrinsic_matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_matrix.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/detail/intrinsic_trigonometric.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/intrinsic_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/setup.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_gentype.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_gentype.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_half.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/type_int.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_mat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_mat2x2.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/type_mat3x3.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/type_mat4x4.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/type_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/type_vec4_avx.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/type_vec4_avx2.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtc/bitfield.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/color_space.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/packing.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/quaternion.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/random.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/round.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtc/ulp.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/fast_trigonometry.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/hash.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/norm.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/range.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_mat4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_mat4.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/gtx/simd_quat.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_quat.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/gtx/simd_vec4.hpp	/^namespace detail$/;"	n	namespace:glm
detail	glm/gtx/simd_vec4.inl	/^namespace detail{$/;"	n	namespace:glm	file:
detail	glm/gtx/string_cast.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	glm/gtx/vector_query.inl	/^namespace detail$/;"	n	namespace:glm	file:
determinant	glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER T determinant(matType<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
determinant	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER float determinant(detail::fmat4x4SIMD const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
diagonal2x2	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> diagonal2x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
diagonal2x3	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> diagonal2x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
diagonal2x4	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> diagonal2x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
diagonal3x2	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> diagonal3x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
diagonal3x3	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> diagonal3x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
diagonal3x4	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> diagonal3x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
diagonal4x2	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> diagonal4x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
diagonal4x3	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> diagonal4x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
diagonal4x4	glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> diagonal4x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
diff	nuklear/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon9874a1ee0504
diffuse	glm/detail/dummy.cpp	/^	glm::vec4 diffuse; \/\/ Dcli$/;"	m	struct:light	typeref:typename:glm::vec4	file:
diffuse	glm/detail/dummy.cpp	/^	glm::vec4 diffuse; \/\/ Dcm$/;"	m	struct:material	typeref:typename:glm::vec4	file:
direction	nuklear/nuklear.h	/^    float direction;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
diskRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, defaultp> diskRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,defaultp>
display_height	nuklear/nuklear_glfw_gl3.h	/^    int display_width, display_height;$/;"	m	struct:nk_glfw	typeref:typename:int
display_width	nuklear/nuklear_glfw_gl3.h	/^    int display_width, display_height;$/;"	m	struct:nk_glfw	typeref:typename:int
distance	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType distance(genType const & p0, genType const & p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
distance	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T distance(vecType<T, P> const & p0, vecType<T, P> const & p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER float distance$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
distance2	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(T p0, T p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance2	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(vecType<T, P> const & p0, vecType<T, P> const & p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance4	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD distance4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
dmat2	glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2;$/;"	t	namespace:glm	typeref:typename:highp_dmat2x2
dmat2x2	glm/detail/type_mat.hpp	/^	typedef highp_dmat2x2		dmat2x2;$/;"	t	namespace:glm	typeref:typename:highp_dmat2x2
dmat2x2	glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x2		dmat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_dmat2x2
dmat2x2	glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x2		dmat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_dmat2x2
dmat2x3	glm/detail/type_mat.hpp	/^	typedef highp_dmat2x3		dmat2x3;$/;"	t	namespace:glm	typeref:typename:highp_dmat2x3
dmat2x3	glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x3		dmat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_dmat2x3
dmat2x3	glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x3		dmat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_dmat2x3
dmat2x4	glm/detail/type_mat.hpp	/^	typedef highp_dmat2x4		dmat2x4;$/;"	t	namespace:glm	typeref:typename:highp_dmat2x4
dmat2x4	glm/detail/type_mat.hpp	/^	typedef lowp_dmat2x4		dmat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_dmat2x4
dmat2x4	glm/detail/type_mat.hpp	/^	typedef mediump_dmat2x4		dmat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_dmat2x4
dmat3	glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3;$/;"	t	namespace:glm	typeref:typename:highp_dmat3x3
dmat3x2	glm/detail/type_mat.hpp	/^	typedef highp_dmat3x2		dmat3x2;$/;"	t	namespace:glm	typeref:typename:highp_dmat3x2
dmat3x2	glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x2		dmat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_dmat3x2
dmat3x2	glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x2		dmat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_dmat3x2
dmat3x3	glm/detail/type_mat.hpp	/^	typedef highp_dmat3x3		dmat3x3;$/;"	t	namespace:glm	typeref:typename:highp_dmat3x3
dmat3x3	glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x3		dmat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_dmat3x3
dmat3x3	glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x3		dmat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_dmat3x3
dmat3x4	glm/detail/type_mat.hpp	/^	typedef highp_dmat3x4		dmat3x4;$/;"	t	namespace:glm	typeref:typename:highp_dmat3x4
dmat3x4	glm/detail/type_mat.hpp	/^	typedef lowp_dmat3x4		dmat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_dmat3x4
dmat3x4	glm/detail/type_mat.hpp	/^	typedef mediump_dmat3x4		dmat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_dmat3x4
dmat4	glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4;$/;"	t	namespace:glm	typeref:typename:highp_dmat4x4
dmat4x2	glm/detail/type_mat.hpp	/^	typedef highp_dmat4x2		dmat4x2;$/;"	t	namespace:glm	typeref:typename:highp_dmat4x2
dmat4x2	glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x2		dmat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_dmat4x2
dmat4x2	glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x2		dmat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_dmat4x2
dmat4x3	glm/detail/type_mat.hpp	/^	typedef highp_dmat4x3		dmat4x3;$/;"	t	namespace:glm	typeref:typename:highp_dmat4x3
dmat4x3	glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x3		dmat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_dmat4x3
dmat4x3	glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x3		dmat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_dmat4x3
dmat4x4	glm/detail/type_mat.hpp	/^	typedef highp_dmat4x4		dmat4x4;$/;"	t	namespace:glm	typeref:typename:highp_dmat4x4
dmat4x4	glm/detail/type_mat.hpp	/^	typedef lowp_dmat4x4		dmat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_dmat4x4
dmat4x4	glm/detail/type_mat.hpp	/^	typedef mediump_dmat4x4		dmat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_dmat4x4
dot	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(T x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T dot(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dot	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER float dot$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
dot	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER float dot$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
dot4	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD dot4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
double1	glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-precision floating-point vector with 1 comp/;"	t	namespace:glm	typeref:typename:double
double1x1	glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-precision floating-point matrix with 1 co/;"	t	namespace:glm	typeref:typename:double
double2	glm/gtx/compatibility.hpp	/^	typedef tvec2<double, highp>		double2;		\/\/!< \\brief double-precision floating-point vector w/;"	t	namespace:glm	typeref:typename:tvec2<double,highp>
double2x2	glm/gtx/compatibility.hpp	/^	typedef tmat2x2<double, highp>		double2x2;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat2x2<double,highp>
double2x3	glm/gtx/compatibility.hpp	/^	typedef tmat2x3<double, highp>		double2x3;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat2x3<double,highp>
double2x4	glm/gtx/compatibility.hpp	/^	typedef tmat2x4<double, highp>		double2x4;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat2x4<double,highp>
double3	glm/gtx/compatibility.hpp	/^	typedef tvec3<double, highp>		double3;		\/\/!< \\brief double-precision floating-point vector w/;"	t	namespace:glm	typeref:typename:tvec3<double,highp>
double3x2	glm/gtx/compatibility.hpp	/^	typedef tmat3x2<double, highp>		double3x2;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat3x2<double,highp>
double3x3	glm/gtx/compatibility.hpp	/^	typedef tmat3x3<double, highp>		double3x3;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat3x3<double,highp>
double3x4	glm/gtx/compatibility.hpp	/^	typedef tmat3x4<double, highp>		double3x4;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat3x4<double,highp>
double4	glm/gtx/compatibility.hpp	/^	typedef tvec4<double, highp>		double4;		\/\/!< \\brief double-precision floating-point vector w/;"	t	namespace:glm	typeref:typename:tvec4<double,highp>
double4x2	glm/gtx/compatibility.hpp	/^	typedef tmat4x2<double, highp>		double4x2;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat4x2<double,highp>
double4x3	glm/gtx/compatibility.hpp	/^	typedef tmat4x3<double, highp>		double4x3;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat4x3<double,highp>
double4x4	glm/gtx/compatibility.hpp	/^	typedef tmat4x4<double, highp>		double4x4;		\/\/!< \\brief double-precision floating-point matr/;"	t	namespace:glm	typeref:typename:tmat4x4<double,highp>
down	nuklear/nuklear.h	/^    int down;$/;"	m	struct:nk_key	typeref:typename:int
down	nuklear/nuklear.h	/^    int down;$/;"	m	struct:nk_mouse_button	typeref:typename:int
dquat	glm/fwd.hpp	/^	typedef highp_dquat			dquat;$/;"	t	namespace:glm	typeref:typename:highp_dquat
dquat	glm/fwd.hpp	/^	typedef lowp_dquat			dquat;$/;"	t	namespace:glm	typeref:typename:lowp_dquat
dquat	glm/fwd.hpp	/^	typedef mediump_dquat		dquat;$/;"	t	namespace:glm	typeref:typename:mediump_dquat
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle userdata)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_begin	nuklear/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle userdata)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_end	nuklear/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle	typeref:typename:void (*)(struct nk_command_buffer *,nk_handle)
draw_list	nuklear/nuklear.h	/^    struct nk_draw_list draw_list;$/;"	m	struct:nk_context	typeref:struct:nk_draw_list
dual	glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:glm::tquat<T,P>
dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
dualquat_cast	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> dualquat_cast(tmat2x4<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
dualquat_cast	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> dualquat_cast(tmat3x4<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
dvec1	glm/gtc/vec1.hpp	/^	typedef highp_dvec1				dvec1;$/;"	t	namespace:glm	typeref:typename:highp_dvec1
dvec1	glm/gtc/vec1.hpp	/^	typedef lowp_dvec1				dvec1;$/;"	t	namespace:glm	typeref:typename:lowp_dvec1
dvec1	glm/gtc/vec1.hpp	/^	typedef mediump_dvec1			dvec1;$/;"	t	namespace:glm	typeref:typename:mediump_dvec1
dvec2	glm/detail/type_vec.hpp	/^	typedef highp_dvec2			dvec2;$/;"	t	namespace:glm	typeref:typename:highp_dvec2
dvec2	glm/detail/type_vec.hpp	/^	typedef lowp_dvec2			dvec2;$/;"	t	namespace:glm	typeref:typename:lowp_dvec2
dvec2	glm/detail/type_vec.hpp	/^	typedef mediump_dvec2		dvec2;$/;"	t	namespace:glm	typeref:typename:mediump_dvec2
dvec3	glm/detail/type_vec.hpp	/^	typedef highp_dvec3			dvec3;$/;"	t	namespace:glm	typeref:typename:highp_dvec3
dvec3	glm/detail/type_vec.hpp	/^	typedef lowp_dvec3			dvec3;$/;"	t	namespace:glm	typeref:typename:lowp_dvec3
dvec3	glm/detail/type_vec.hpp	/^	typedef mediump_dvec3		dvec3;$/;"	t	namespace:glm	typeref:typename:mediump_dvec3
dvec4	glm/detail/type_vec.hpp	/^	typedef highp_dvec4			dvec4;$/;"	t	namespace:glm	typeref:typename:highp_dvec4
dvec4	glm/detail/type_vec.hpp	/^	typedef lowp_dvec4			dvec4;$/;"	t	namespace:glm	typeref:typename:lowp_dvec4
dvec4	glm/detail/type_vec.hpp	/^	typedef mediump_dvec4		dvec4;$/;"	t	namespace:glm	typeref:typename:mediump_dvec4
dword	glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm	typeref:typename:detail::uint32
e	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType e()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ebo	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
ecmax	main.cpp	/^float ecmax;$/;"	v	typeref:typename:float
ECX	main.cpp	/^float *ECX, *ECY;$/;"	v	typeref:typename:float *
ECY	main.cpp	/^float *ECX, *ECY;$/;"	v	typeref:typename:float **
edit	nuklear/nuklear.h	/^    struct nk_edit_state edit;$/;"	m	struct:nk_window	typeref:struct:nk_edit_state
edit	nuklear/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style	typeref:struct:nk_style_edit
edit	nuklear/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_edit
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
elem	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER const value_type&   elem   (size_t i) const { return (reinterpret_cast<cons/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER const value_type &
elem	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type&         elem   (size_t i)       { return (reinterpret_cast<valu/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER value_type &
elements	nuklear/nuklear.h	/^    struct nk_buffer *elements;$/;"	m	struct:nk_draw_list	typeref:struct:nk_buffer *
element_count	nuklear/nuklear.h	/^    unsigned int element_count;$/;"	m	struct:nk_draw_list	typeref:typename:unsigned int
elem_count	nuklear/nuklear.h	/^    unsigned int elem_count;$/;"	m	struct:nk_draw_command	typeref:typename:unsigned int
emission	glm/detail/dummy.cpp	/^	glm::vec4 emission; \/\/ Ecm$/;"	m	struct:material	typeref:typename:glm::vec4	file:
end	glm/gtx/range.hpp	/^	const typename genType::value_type * end(genType const & v){$/;"	f	namespace:glm	typeref:typename:const typename genType::value_type *
end	glm/gtx/range.hpp	/^	typename genType::value_type * end(genType& v){$/;"	f	namespace:glm	typeref:typename:genType::value_type *
end	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer	typeref:typename:nk_size
end	nuklear/nuklear.h	/^    nk_size end;$/;"	m	struct:nk_popup_buffer	typeref:typename:nk_size
end	nuklear/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_curve	typeref:struct:nk_vec2i
end	nuklear/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_line	typeref:struct:nk_vec2i
end	nuklear/nuklear.h	/^    struct nk_window *end;$/;"	m	struct:nk_context	typeref:struct:nk_window *
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end o/;"	m	struct:__anon84e4e886020a	typeref:typename:int (*)(void * user)
epsilon	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType epsilon()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
epsilon0	main.cpp	/^float epsilon0 = 8.854187e-12f;$/;"	v	typeref:typename:float
epsilonEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
epsilonEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
epsilonMax	main.cpp	/^float epsilonMax;$/;"	v	typeref:typename:float
epsilonNotEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> epsilonNotEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
epsilonNotEqual	glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> epsilonNotEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
epsilon_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float **********
equal	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> equal(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
equal	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> equal(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
equal	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool equal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
euclidean	glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> euclidean$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
euler	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType euler()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
eulerAngles	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> eulerAngles(tquat<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
eulerAngleX	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleXY	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleXYZ	glm/gtx/euler_angles.inl	/^    GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleXYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleXZ	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleY	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleYX	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleYXZ	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleYXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleYZ	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleZ	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleZX	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
eulerAngleZY	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> eulerAngleZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
exp	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> exp(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
exp	glm/detail/intrinsic_common.inl	/^			const unsigned int mantissa:23, exp:8, sign:1;$/;"	m	struct:glm::detail::ieee754_QNAN::i	typeref:typename:const unsigned int:8	file:
exp	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> exp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
exp2	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType exp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exp2	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> exp2(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c0a	typeref:typename:stbi_uc **
extend	glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER genType extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
extend	glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
extend	glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
extra	nuklear/nuklear.h	/^    struct nk_rp_node extra[2];$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_node[2]
extractEulerAngleXYZ	glm/gtx/euler_angles.inl	/^    GLM_FUNC_DECL void extractEulerAngleXYZ(tmat4x4<T, defaultp> & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL void
extractMatrixRotation	glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> extractMatrixRotation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
extractRealComponent	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T extractRealComponent$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ey	nuklear/nuklear.h	/^    float ey;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
Ez	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float **
EZX	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v	typeref:typename:float **
EZY	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v	typeref:typename:float ****
Ez_green	main.cpp	/^float Ez_green;$/;"	v	typeref:typename:float
Ez_lightblue	main.cpp	/^float Ez_lightblue;$/;"	v	typeref:typename:float
Ez_max	main.cpp	/^float Ez_max = 2.060459378159e-03f;$/;"	v	typeref:typename:float
Ez_min	main.cpp	/^float Ez_min = -2.060459378159e-03f;$/;"	v	typeref:typename:float
Ez_range	main.cpp	/^float Ez_range;$/;"	v	typeref:typename:float
Ez_yellow	main.cpp	/^float Ez_yellow;$/;"	v	typeref:typename:float
E_Max	main.cpp	/^float E_Max, E_Min;$/;"	v	typeref:typename:float
E_Min	main.cpp	/^float E_Max, E_Min;$/;"	v	typeref:typename:float
f	glm/detail/intrinsic_common.inl	/^		const float f;$/;"	m	union:glm::detail::ieee754_QNAN	typeref:typename:const float	file:
f	glm/detail/type_half.inl	/^		float f;$/;"	m	union:glm::detail::uif32	typeref:typename:float	file:
f	nuklear/nuklear.h	/^    union {nk_uint i; float f;} conv = {0};$/;"	m	union:nk_inv_sqrt::__anon9874a1ee060c	typeref:typename:float
f32	glm/fwd.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
f32	glm/fwd.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm	typeref:typename:lowp_f32
f32	glm/fwd.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm	typeref:typename:mediump_float32
f32	glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm	typeref:typename:float32
f32mat1	glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat1x1	glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f32
f32mat2	glm/fwd.hpp	/^	typedef f32mat2x2				f32mat2;$/;"	t	namespace:glm	typeref:typename:f32mat2x2
f32mat2	glm/fwd.hpp	/^	typedef lowp_f32mat2			f32mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2
f32mat2	glm/fwd.hpp	/^	typedef mediump_f32mat2			f32mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2
f32mat2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> f32mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,defaultp>
f32mat2x2	glm/fwd.hpp	/^	typedef highp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
f32mat2x2	glm/fwd.hpp	/^	typedef lowp_f32mat2x2			f32mat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
f32mat2x2	glm/fwd.hpp	/^	typedef mediump_f32mat2x2		f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
f32mat2x2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> f32mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,defaultp>
f32mat2x3	glm/fwd.hpp	/^	typedef highp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x3
f32mat2x3	glm/fwd.hpp	/^	typedef lowp_f32mat2x3			f32mat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x3
f32mat2x3	glm/fwd.hpp	/^	typedef mediump_f32mat2x3		f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x3
f32mat2x3	glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f32, defaultp> f32mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,defaultp>
f32mat2x4	glm/fwd.hpp	/^	typedef highp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x4
f32mat2x4	glm/fwd.hpp	/^	typedef lowp_f32mat2x4			f32mat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x4
f32mat2x4	glm/fwd.hpp	/^	typedef mediump_f32mat2x4		f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x4
f32mat2x4	glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f32, defaultp> f32mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,defaultp>
f32mat3	glm/fwd.hpp	/^	typedef f32mat3x3				f32mat3;$/;"	t	namespace:glm	typeref:typename:f32mat3x3
f32mat3	glm/fwd.hpp	/^	typedef lowp_f32mat3			f32mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3
f32mat3	glm/fwd.hpp	/^	typedef mediump_f32mat3			f32mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3
f32mat3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> f32mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,defaultp>
f32mat3x2	glm/fwd.hpp	/^	typedef highp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x2
f32mat3x2	glm/fwd.hpp	/^	typedef lowp_f32mat3x2			f32mat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x2
f32mat3x2	glm/fwd.hpp	/^	typedef mediump_f32mat3x2		f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x2
f32mat3x2	glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f32, defaultp> f32mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,defaultp>
f32mat3x3	glm/fwd.hpp	/^	typedef highp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
f32mat3x3	glm/fwd.hpp	/^	typedef lowp_f32mat3x3			f32mat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
f32mat3x3	glm/fwd.hpp	/^	typedef mediump_f32mat3x3		f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
f32mat3x3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> f32mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,defaultp>
f32mat3x4	glm/fwd.hpp	/^	typedef highp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x4
f32mat3x4	glm/fwd.hpp	/^	typedef lowp_f32mat3x4			f32mat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x4
f32mat3x4	glm/fwd.hpp	/^	typedef mediump_f32mat3x4		f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x4
f32mat3x4	glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f32, defaultp> f32mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,defaultp>
f32mat4	glm/fwd.hpp	/^	typedef f32mat4x4				f32mat4;$/;"	t	namespace:glm	typeref:typename:f32mat4x4
f32mat4	glm/fwd.hpp	/^	typedef lowp_f32mat4			f32mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4
f32mat4	glm/fwd.hpp	/^	typedef mediump_f32mat4			f32mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4
f32mat4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> f32mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,defaultp>
f32mat4x2	glm/fwd.hpp	/^	typedef highp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x2
f32mat4x2	glm/fwd.hpp	/^	typedef lowp_f32mat4x2			f32mat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x2
f32mat4x2	glm/fwd.hpp	/^	typedef mediump_f32mat4x2		f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x2
f32mat4x2	glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f32, defaultp> f32mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,defaultp>
f32mat4x3	glm/fwd.hpp	/^	typedef highp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x3
f32mat4x3	glm/fwd.hpp	/^	typedef lowp_f32mat4x3			f32mat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x3
f32mat4x3	glm/fwd.hpp	/^	typedef mediump_f32mat4x3		f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x3
f32mat4x3	glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f32, defaultp> f32mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,defaultp>
f32mat4x4	glm/fwd.hpp	/^	typedef highp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
f32mat4x4	glm/fwd.hpp	/^	typedef lowp_f32mat4x4			f32mat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
f32mat4x4	glm/fwd.hpp	/^	typedef mediump_f32mat4x4		f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
f32mat4x4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> f32mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,defaultp>
f32quat	glm/fwd.hpp	/^	typedef highp_f32quat			f32quat;$/;"	t	namespace:glm	typeref:typename:highp_f32quat
f32quat	glm/fwd.hpp	/^	typedef lowp_f32quat			f32quat;$/;"	t	namespace:glm	typeref:typename:lowp_f32quat
f32quat	glm/fwd.hpp	/^	typedef mediump_f32quat			f32quat;$/;"	t	namespace:glm	typeref:typename:mediump_f32quat
f32quat	glm/gtc/type_precision.hpp	/^	typedef tquat<f32, defaultp> f32quat;$/;"	t	namespace:glm	typeref:typename:tquat<f32,defaultp>
f32vec1	glm/fwd.hpp	/^	typedef highp_f32vec1			f32vec1;$/;"	t	namespace:glm	typeref:typename:highp_f32vec1
f32vec1	glm/fwd.hpp	/^	typedef lowp_f32vec1			f32vec1;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec1
f32vec1	glm/fwd.hpp	/^	typedef mediump_f32vec1			f32vec1;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec1
f32vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<f32, defaultp> f32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f32,defaultp>
f32vec1	glm/gtx/number_precision.hpp	/^	typedef f32			f32vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f32
f32vec2	glm/fwd.hpp	/^	typedef highp_f32vec2			f32vec2;$/;"	t	namespace:glm	typeref:typename:highp_f32vec2
f32vec2	glm/fwd.hpp	/^	typedef lowp_f32vec2			f32vec2;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec2
f32vec2	glm/fwd.hpp	/^	typedef mediump_f32vec2			f32vec2;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec2
f32vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<f32, defaultp> f32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f32,defaultp>
f32vec3	glm/fwd.hpp	/^	typedef highp_f32vec3			f32vec3;$/;"	t	namespace:glm	typeref:typename:highp_f32vec3
f32vec3	glm/fwd.hpp	/^	typedef lowp_f32vec3			f32vec3;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec3
f32vec3	glm/fwd.hpp	/^	typedef mediump_f32vec3			f32vec3;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec3
f32vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<f32, defaultp> f32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f32,defaultp>
f32vec4	glm/fwd.hpp	/^	typedef highp_f32vec4			f32vec4;$/;"	t	namespace:glm	typeref:typename:highp_f32vec4
f32vec4	glm/fwd.hpp	/^	typedef lowp_f32vec4			f32vec4;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec4
f32vec4	glm/fwd.hpp	/^	typedef mediump_f32vec4			f32vec4;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec4
f32vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<f32, defaultp> f32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f32,defaultp>
f64	glm/fwd.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
f64	glm/fwd.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm	typeref:typename:lowp_f64
f64	glm/fwd.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm	typeref:typename:mediump_float64
f64	glm/gtc/type_precision.hpp	/^	typedef float64 f64;$/;"	t	namespace:glm	typeref:typename:float64
f64mat1	glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat1x1	glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-precision floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm::gtx	typeref:typename:f64
f64mat2	glm/fwd.hpp	/^	typedef f64mat2x2				f64mat2;$/;"	t	namespace:glm	typeref:typename:f64mat2x2
f64mat2	glm/fwd.hpp	/^	typedef lowp_f64mat2			f64mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2
f64mat2	glm/fwd.hpp	/^	typedef mediump_f64mat2			f64mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2
f64mat2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f64, defaultp> f64mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f64,defaultp>
f64mat2x2	glm/fwd.hpp	/^	typedef highp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x2
f64mat2x2	glm/fwd.hpp	/^	typedef lowp_f64mat2x2			f64mat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x2
f64mat2x2	glm/fwd.hpp	/^	typedef mediump_f64mat2x2		f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x2
f64mat2x2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f64, defaultp> f64mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f64,defaultp>
f64mat2x3	glm/fwd.hpp	/^	typedef highp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x3
f64mat2x3	glm/fwd.hpp	/^	typedef lowp_f64mat2x3			f64mat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x3
f64mat2x3	glm/fwd.hpp	/^	typedef mediump_f64mat2x3		f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x3
f64mat2x3	glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f64, defaultp> f64mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f64,defaultp>
f64mat2x4	glm/fwd.hpp	/^	typedef highp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x4
f64mat2x4	glm/fwd.hpp	/^	typedef lowp_f64mat2x4			f64mat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x4
f64mat2x4	glm/fwd.hpp	/^	typedef mediump_f64mat2x4		f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x4
f64mat2x4	glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f64, defaultp> f64mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f64,defaultp>
f64mat3	glm/fwd.hpp	/^	typedef f64mat3x3				f64mat3;$/;"	t	namespace:glm	typeref:typename:f64mat3x3
f64mat3	glm/fwd.hpp	/^	typedef lowp_f64mat3			f64mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3
f64mat3	glm/fwd.hpp	/^	typedef mediump_f64mat3			f64mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3
f64mat3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f64, defaultp> f64mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f64,defaultp>
f64mat3x2	glm/fwd.hpp	/^	typedef highp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x2
f64mat3x2	glm/fwd.hpp	/^	typedef lowp_f64mat3x2			f64mat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x2
f64mat3x2	glm/fwd.hpp	/^	typedef mediump_f64mat3x2		f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x2
f64mat3x2	glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f64, defaultp> f64mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f64,defaultp>
f64mat3x3	glm/fwd.hpp	/^	typedef highp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x3
f64mat3x3	glm/fwd.hpp	/^	typedef lowp_f64mat3x3			f64mat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x3
f64mat3x3	glm/fwd.hpp	/^	typedef mediump_f64mat3x3		f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x3
f64mat3x3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f64, defaultp> f64mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f64,defaultp>
f64mat3x4	glm/fwd.hpp	/^	typedef highp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x4
f64mat3x4	glm/fwd.hpp	/^	typedef lowp_f64mat3x4			f64mat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x4
f64mat3x4	glm/fwd.hpp	/^	typedef mediump_f64mat3x4		f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x4
f64mat3x4	glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f64, defaultp> f64mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f64,defaultp>
f64mat4	glm/fwd.hpp	/^	typedef f64mat4x4				f64mat4;$/;"	t	namespace:glm	typeref:typename:f64mat4x4
f64mat4	glm/fwd.hpp	/^	typedef lowp_f64mat4			f64mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4
f64mat4	glm/fwd.hpp	/^	typedef mediump_f64mat4			f64mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4
f64mat4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f64, defaultp> f64mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f64,defaultp>
f64mat4x2	glm/fwd.hpp	/^	typedef highp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x2
f64mat4x2	glm/fwd.hpp	/^	typedef lowp_f64mat4x2			f64mat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x2
f64mat4x2	glm/fwd.hpp	/^	typedef mediump_f64mat4x2		f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x2
f64mat4x2	glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f64, defaultp> f64mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f64,defaultp>
f64mat4x3	glm/fwd.hpp	/^	typedef highp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x3
f64mat4x3	glm/fwd.hpp	/^	typedef lowp_f64mat4x3			f64mat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x3
f64mat4x3	glm/fwd.hpp	/^	typedef mediump_f64mat4x3		f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x3
f64mat4x3	glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f64, defaultp> f64mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f64,defaultp>
f64mat4x4	glm/fwd.hpp	/^	typedef highp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x4
f64mat4x4	glm/fwd.hpp	/^	typedef lowp_f64mat4x4			f64mat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x4
f64mat4x4	glm/fwd.hpp	/^	typedef mediump_f64mat4x4		f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x4
f64mat4x4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f64, defaultp> f64mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f64,defaultp>
f64quat	glm/fwd.hpp	/^	typedef highp_f64quat			f64quat;$/;"	t	namespace:glm	typeref:typename:highp_f64quat
f64quat	glm/fwd.hpp	/^	typedef lowp_f64quat			f64quat;$/;"	t	namespace:glm	typeref:typename:lowp_f64quat
f64quat	glm/fwd.hpp	/^	typedef mediump_f64quat			f64quat;$/;"	t	namespace:glm	typeref:typename:mediump_f64quat
f64quat	glm/gtc/type_precision.hpp	/^	typedef tquat<f64, defaultp> f64quat;$/;"	t	namespace:glm	typeref:typename:tquat<f64,defaultp>
f64vec1	glm/fwd.hpp	/^	typedef highp_f64vec1			f64vec1;$/;"	t	namespace:glm	typeref:typename:highp_f64vec1
f64vec1	glm/fwd.hpp	/^	typedef lowp_f64vec1			f64vec1;$/;"	t	namespace:glm	typeref:typename:lowp_f64vec1
f64vec1	glm/fwd.hpp	/^	typedef mediump_f64vec1			f64vec1;$/;"	t	namespace:glm	typeref:typename:mediump_f64vec1
f64vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<f64, defaultp> f64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f64,defaultp>
f64vec1	glm/gtx/number_precision.hpp	/^	typedef f64			f64vec1;    \/\/!< \\brief Single-precision floating-point scalar. (from GLM_GTX_/;"	t	namespace:glm::gtx	typeref:typename:f64
f64vec2	glm/fwd.hpp	/^	typedef highp_f64vec2			f64vec2;$/;"	t	namespace:glm	typeref:typename:highp_f64vec2
f64vec2	glm/fwd.hpp	/^	typedef lowp_f64vec2			f64vec2;$/;"	t	namespace:glm	typeref:typename:lowp_f64vec2
f64vec2	glm/fwd.hpp	/^	typedef mediump_f64vec2			f64vec2;$/;"	t	namespace:glm	typeref:typename:mediump_f64vec2
f64vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<f64, defaultp> f64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f64,defaultp>
f64vec3	glm/fwd.hpp	/^	typedef highp_f64vec3			f64vec3;$/;"	t	namespace:glm	typeref:typename:highp_f64vec3
f64vec3	glm/fwd.hpp	/^	typedef lowp_f64vec3			f64vec3;$/;"	t	namespace:glm	typeref:typename:lowp_f64vec3
f64vec3	glm/fwd.hpp	/^	typedef mediump_f64vec3			f64vec3;$/;"	t	namespace:glm	typeref:typename:mediump_f64vec3
f64vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<f64, defaultp> f64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f64,defaultp>
f64vec4	glm/fwd.hpp	/^	typedef highp_f64vec4			f64vec4;$/;"	t	namespace:glm	typeref:typename:highp_f64vec4
f64vec4	glm/fwd.hpp	/^	typedef lowp_f64vec4			f64vec4;$/;"	t	namespace:glm	typeref:typename:lowp_f64vec4
f64vec4	glm/fwd.hpp	/^	typedef mediump_f64vec4			f64vec4;$/;"	t	namespace:glm	typeref:typename:mediump_f64vec4
f64vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<f64, defaultp> f64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f64,defaultp>
faceforward	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType faceforward(genType const & N, genType const & I, genType const & Nr/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
faceforward	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> faceforward(vecType<T, P> const & N, vecType<T, P> const & I, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
faceforward	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD faceforward$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
factorial	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER genType factorial(genType const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
factorial	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
factorial	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
factorial	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
fade	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> fade(tvec2<T, P> const & t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
fade	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> fade(tvec3<T, P> const & t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
fade	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> fade(tvec4<T, P> const & t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
fallback	nuklear/nuklear.h	/^    const struct nk_font_glyph *fallback;$/;"	m	struct:nk_font	typeref:struct:nk_font_glyph *
fallback_codepoint	nuklear/nuklear.h	/^    nk_rune fallback_codepoint;$/;"	m	struct:nk_font	typeref:typename:nk_rune
fallback_glyph	nuklear/nuklear.h	/^    nk_rune fallback_glyph;$/;"	m	struct:nk_font_config	typeref:typename:nk_rune
farPlane	Camera.cpp	/^float Camera::farPlane() const {$/;"	f	class:Camera	typeref:typename:float
fast	glm/detail/type_gentype.hpp	/^		fast,$/;"	e	enum:glm::profile
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon84e4e886050a	typeref:typename:stbi_uc[]
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon84e4e886090a	typeref:typename:stbi__uint16[]
fastAcos	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAcos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAcos	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastAcos(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastAsin	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAsin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAsin	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastAsin(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastAtan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T y, T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastAtan(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastAtan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastAtan(vecType<T, P> const & y, vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastCos	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastCos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastCos	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastCos(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastDistance	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastDistance(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastDistance	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastDistance(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastExp	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastExp(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastExp	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastExp(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastExp2	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastExp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp2	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastExp2(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastInverseSqrt	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastInverseSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastInverseSqrt	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastInverseSqrt(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastInversesqrt	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fastInversesqrt(detail::fvec4SIMD const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
fastLength	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastLength(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLength	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastLength(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastLength	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER float fastLength$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
fastLength4	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fastLength4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
fastLog	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastLog(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastLog2	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog2	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastLog2(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastMix	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> fastMix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
fastMix	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD fastMix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
fastNormalize	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastNormalize(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastNormalize	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastNormalize(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastNormalize	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fastNormalize$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
fastNormalizeDot	glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T fastNormalizeDot(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastPow(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastPow	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastPow(T x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastPow(vecType<T, P> const & x, vecType<int, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastPow	glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastPow(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastSin	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastSin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastSin	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastSin(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastSin	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER __m128 fastSin(__m128 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER __m128
fastSlerp	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD fastSlerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
fastSqrt	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastSqrt	glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastSqrt(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fastSqrt	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fastSqrt(detail::fvec4SIMD const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
fastTan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastTan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastTan	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fastTan(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
FAST_BITS	stb_image.h	/^#define FAST_BITS /;"	d
fb_scale	nuklear/nuklear_glfw_gl3.h	/^    struct nk_vec2 fb_scale;$/;"	m	struct:nk_glfw	typeref:struct:nk_vec2
FDTD2dTM	main.cpp	/^void FDTD2dTM(float **_Ez, float **_Hx, float **_Hy,$/;"	f	typeref:typename:void
FDTDInit	main.cpp	/^void FDTDInit()$/;"	f	typeref:typename:void
fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
fdx	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
fdy	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
fieldOfView	Camera.cpp	/^float Camera::fieldOfView() const {$/;"	f	class:Camera	typeref:typename:float
filled	nuklear/nuklear.h	/^    float filled;$/;"	m	struct:nk_row_layout	typeref:typename:float
fill_	glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:char_type
filter	nuklear/nuklear.h	/^    nk_filter filter;$/;"	m	struct:nk_text_edit	typeref:typename:nk_filter
findLSB	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findLSB(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findLSB	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<int, P> findLSB(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<int,P>
findMSB	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findMSB(genIUType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findMSB	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<int, P> findMSB(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<int,P>
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon84e4e8860f0a	typeref:typename:stbi_uc
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon84e4e886090a	typeref:typename:stbi__uint16[16]
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon84e4e886090a	typeref:typename:stbi__uint16[16]
first_char	nuklear/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find	typeref:typename:int
first_free	nuklear/nuklear.h	/^    void   *first_free;$/;"	m	struct:nk_tt__hheap	typeref:typename:void *
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v	typeref:typename:stbi_uc[5]
first_unicode_codepoint_in_range	nuklear/nuklear.h	/^    int first_unicode_codepoint_in_range;$/;"	m	struct:nk_tt_pack_range	typeref:typename:int
fixed_background	nuklear/nuklear.h	/^    struct nk_style_item fixed_background;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_item
flag	main.cpp	/^bool flag = true;$/;"	v	typeref:typename:bool
flags	nuklear/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_panel	typeref:typename:nk_flags
flags	nuklear/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_window	typeref:typename:nk_flags
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
flags_	glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:flags_type
flags_type	glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::ios_base::fmtflags
flipVertically	Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap	typeref:typename:void
float1	glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-precision floating-point vector with 1 compo/;"	t	namespace:glm	typeref:typename:float
float1x1	glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-precision floating-point matrix with 1 comp/;"	t	namespace:glm	typeref:typename:float
float2	glm/gtx/compatibility.hpp	/^	typedef tvec2<float, highp>		float2;			\/\/!< \\brief single-precision floating-point vector wi/;"	t	namespace:glm	typeref:typename:tvec2<float,highp>
float2fixed	stb_image.h	/^#define float2fixed(/;"	d
float2half	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 float2half(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
float2packed10	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed10(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2packed11	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed11(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2x2	glm/gtx/compatibility.hpp	/^	typedef tmat2x2<float, highp>		float2x2;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat2x2<float,highp>
float2x3	glm/gtx/compatibility.hpp	/^	typedef tmat2x3<float, highp>		float2x3;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat2x3<float,highp>
float2x4	glm/gtx/compatibility.hpp	/^	typedef tmat2x4<float, highp>		float2x4;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat2x4<float,highp>
float3	glm/gtx/compatibility.hpp	/^	typedef tvec3<float, highp>		float3;			\/\/!< \\brief single-precision floating-point vector wi/;"	t	namespace:glm	typeref:typename:tvec3<float,highp>
float32	glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm	typeref:typename:float
float32	glm/detail/type_float.hpp	/^	typedef float				float32;$/;"	t	namespace:glm::detail	typeref:typename:float
float32	glm/fwd.hpp	/^	typedef highp_float32 float32;$/;"	t	namespace:glm	typeref:typename:highp_float32
float32	glm/fwd.hpp	/^	typedef lowp_float32 float32;$/;"	t	namespace:glm	typeref:typename:lowp_float32
float32	glm/fwd.hpp	/^	typedef mediump_float32 float32;$/;"	t	namespace:glm	typeref:typename:mediump_float32
float32	glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32;$/;"	t	namespace:glm	typeref:typename:detail::float32
float32_t	glm/fwd.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
float32_t	glm/fwd.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:lowp_float32_t
float32_t	glm/fwd.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm	typeref:typename:mediump_float32
float32_t	glm/gtc/type_precision.hpp	/^	typedef detail::float32 float32_t;$/;"	t	namespace:glm	typeref:typename:detail::float32
float3x2	glm/gtx/compatibility.hpp	/^	typedef tmat3x2<float, highp>		float3x2;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat3x2<float,highp>
float3x3	glm/gtx/compatibility.hpp	/^	typedef tmat3x3<float, highp>		float3x3;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat3x3<float,highp>
float3x4	glm/gtx/compatibility.hpp	/^	typedef tmat3x4<float, highp>		float3x4;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat3x4<float,highp>
float4	glm/gtx/compatibility.hpp	/^	typedef tvec4<float, highp>		float4;			\/\/!< \\brief single-precision floating-point vector wi/;"	t	namespace:glm	typeref:typename:tvec4<float,highp>
float4x2	glm/gtx/compatibility.hpp	/^	typedef tmat4x2<float, highp>		float4x2;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat4x2<float,highp>
float4x3	glm/gtx/compatibility.hpp	/^	typedef tmat4x3<float, highp>		float4x3;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat4x3<float,highp>
float4x4	glm/gtx/compatibility.hpp	/^	typedef tmat4x4<float, highp>		float4x4;		\/\/!< \\brief single-precision floating-point matrix/;"	t	namespace:glm	typeref:typename:tmat4x4<float,highp>
float64	glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm	typeref:typename:double
float64	glm/detail/type_float.hpp	/^	typedef double				float64;$/;"	t	namespace:glm::detail	typeref:typename:double
float64	glm/fwd.hpp	/^	typedef highp_float64 float64;$/;"	t	namespace:glm	typeref:typename:highp_float64
float64	glm/fwd.hpp	/^	typedef lowp_float64 float64;$/;"	t	namespace:glm	typeref:typename:lowp_float64
float64	glm/fwd.hpp	/^	typedef mediump_float64 float64;$/;"	t	namespace:glm	typeref:typename:mediump_float64
float64	glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64;$/;"	t	namespace:glm	typeref:typename:detail::float64
float64_t	glm/fwd.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
float64_t	glm/fwd.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:lowp_float64_t
float64_t	glm/fwd.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm	typeref:typename:mediump_float64
float64_t	glm/gtc/type_precision.hpp	/^	typedef detail::float64 float64_t;$/;"	t	namespace:glm	typeref:typename:detail::float64
floatTo10bit	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo10bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
floatTo11bit	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo11bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
float_distance	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER uint float_distance(T const & x, T const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
float_distance	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vecType<uint, P> float_distance(vecType<T, P> const & x, vecType<T, P> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint,P>
float_t	glm/detail/type_float.hpp	/^	typedef highp_float			float_t;$/;"	t	namespace:glm	typeref:typename:highp_float
float_t	glm/detail/type_float.hpp	/^	typedef lowp_float			float_t;$/;"	t	namespace:glm	typeref:typename:lowp_float
float_t	glm/detail/type_float.hpp	/^	typedef mediump_float		float_t;$/;"	t	namespace:glm	typeref:typename:mediump_float
floor	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD floor$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
floorMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> floorMultiple(vecType<T, P> const & Source, vecType<T, P> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
floorPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> floorPowerOfTwo(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fma	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fma$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
fmat2	glm/fwd.hpp	/^	typedef fmat2x2					fmat2;$/;"	t	namespace:glm	typeref:typename:fmat2x2
fmat2	glm/fwd.hpp	/^	typedef lowp_f32mat2			fmat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2
fmat2	glm/fwd.hpp	/^	typedef mediump_f32mat2			fmat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2
fmat2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> fmat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,defaultp>
fmat2x2	glm/fwd.hpp	/^	typedef highp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
fmat2x2	glm/fwd.hpp	/^	typedef lowp_f32mat2x2			fmat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
fmat2x2	glm/fwd.hpp	/^	typedef mediump_f32mat2x2		fmat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
fmat2x2	glm/gtc/type_precision.hpp	/^	typedef tmat2x2<f32, defaultp> fmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,defaultp>
fmat2x3	glm/fwd.hpp	/^	typedef highp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x3
fmat2x3	glm/fwd.hpp	/^	typedef lowp_f32mat2x3			fmat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x3
fmat2x3	glm/fwd.hpp	/^	typedef mediump_f32mat2x3		fmat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x3
fmat2x3	glm/gtc/type_precision.hpp	/^	typedef tmat2x3<f32, defaultp> fmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,defaultp>
fmat2x4	glm/fwd.hpp	/^	typedef highp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x4
fmat2x4	glm/fwd.hpp	/^	typedef lowp_f32mat2x4			fmat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x4
fmat2x4	glm/fwd.hpp	/^	typedef mediump_f32mat2x4		fmat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x4
fmat2x4	glm/gtc/type_precision.hpp	/^	typedef tmat2x4<f32, defaultp> fmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,defaultp>
fmat3	glm/fwd.hpp	/^	typedef fmat3x3					fmat3;$/;"	t	namespace:glm	typeref:typename:fmat3x3
fmat3	glm/fwd.hpp	/^	typedef lowp_f32mat3			fmat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3
fmat3	glm/fwd.hpp	/^	typedef mediump_f32mat3			fmat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3
fmat3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> fmat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,defaultp>
fmat3x2	glm/fwd.hpp	/^	typedef highp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x2
fmat3x2	glm/fwd.hpp	/^	typedef lowp_f32mat3x2			fmat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x2
fmat3x2	glm/fwd.hpp	/^	typedef mediump_f32mat3x2		fmat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x2
fmat3x2	glm/gtc/type_precision.hpp	/^	typedef tmat3x2<f32, defaultp> fmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,defaultp>
fmat3x3	glm/fwd.hpp	/^	typedef highp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
fmat3x3	glm/fwd.hpp	/^	typedef lowp_f32mat3x3			fmat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
fmat3x3	glm/fwd.hpp	/^	typedef mediump_f32mat3x3		fmat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
fmat3x3	glm/gtc/type_precision.hpp	/^	typedef tmat3x3<f32, defaultp> fmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,defaultp>
fmat3x4	glm/fwd.hpp	/^	typedef highp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x4
fmat3x4	glm/fwd.hpp	/^	typedef lowp_f32mat3x4			fmat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x4
fmat3x4	glm/fwd.hpp	/^	typedef mediump_f32mat3x4		fmat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x4
fmat3x4	glm/gtc/type_precision.hpp	/^	typedef tmat3x4<f32, defaultp> fmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,defaultp>
fmat4	glm/fwd.hpp	/^	typedef fmat4x4					fmat4;$/;"	t	namespace:glm	typeref:typename:fmat4x4
fmat4	glm/fwd.hpp	/^	typedef lowp_f32mat4			fmat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4
fmat4	glm/fwd.hpp	/^	typedef mediump_f32mat4			fmat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4
fmat4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> fmat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,defaultp>
fmat4x2	glm/fwd.hpp	/^	typedef highp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x2
fmat4x2	glm/fwd.hpp	/^	typedef lowp_f32mat4x2			fmat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x2
fmat4x2	glm/fwd.hpp	/^	typedef mediump_f32mat4x2		fmat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x2
fmat4x2	glm/gtc/type_precision.hpp	/^	typedef tmat4x2<f32, defaultp> fmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,defaultp>
fmat4x3	glm/fwd.hpp	/^	typedef highp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x3
fmat4x3	glm/fwd.hpp	/^	typedef lowp_f32mat4x3			fmat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x3
fmat4x3	glm/fwd.hpp	/^	typedef mediump_f32mat4x3		fmat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x3
fmat4x3	glm/gtc/type_precision.hpp	/^	typedef tmat4x3<f32, defaultp> fmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,defaultp>
fmat4x4	glm/fwd.hpp	/^	typedef highp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
fmat4x4	glm/fwd.hpp	/^	typedef lowp_f32mat4x4			fmat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
fmat4x4	glm/fwd.hpp	/^	typedef mediump_f32mat4x4		fmat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
fmat4x4	glm/gtc/type_precision.hpp	/^	typedef tmat4x4<f32, defaultp> fmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,defaultp>
fmat4x4SIMD	glm/gtx/simd_mat4.inl	/^	GLM_FUNC_QUALIFIER fmat4x4SIMD::fmat4x4SIMD()$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fmat4x4SIMD	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD::fmat4x4SIMD$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fmat4x4SIMD	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD::fmat4x4SIMD(float const & s)$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fmod	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER genType fmod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmod	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fmod(vecType<T, P> const & x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
fmod	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> fmod(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
font	nuklear/nuklear.h	/^    const struct nk_user_font *font;$/;"	m	struct:nk_command_text	typeref:struct:nk_user_font *
font	nuklear/nuklear.h	/^    struct nk_baked_font *font;$/;"	m	struct:nk_font_config	typeref:struct:nk_baked_font *
font	nuklear/nuklear.h	/^    struct nk_user_font font;$/;"	m	struct:nk_style	typeref:struct:nk_user_font
fonts	nuklear/nuklear.h	/^    struct nk_font *fonts;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font *
fontstart	nuklear/nuklear.h	/^    int fontstart;\/* offset of start of font *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
font_num	nuklear/nuklear.h	/^    int font_num;$/;"	m	struct:nk_font_atlas	typeref:typename:int
font_size	nuklear/nuklear.h	/^    float font_size;$/;"	m	struct:nk_tt_pack_range	typeref:typename:float
font_tex	nuklear/nuklear_glfw_gl3.h	/^    GLuint font_tex;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
footer	nuklear/nuklear.h	/^    struct nk_rect footer = {0,0,0,0};$/;"	s	function:nk_panel_end
footer_h	nuklear/nuklear.h	/^    float footer_h;$/;"	m	struct:nk_panel	typeref:typename:float
footer_padding	nuklear/nuklear.h	/^    struct nk_vec2 footer_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
foreground	nuklear/nuklear.h	/^    struct nk_color foreground;$/;"	m	struct:nk_command_text	typeref:struct:nk_color
format	Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap	typeref:typename:Bitmap::Format
Format	Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap
format	glm/gtx/string_cast.inl	/^	GLM_FUNC_QUALIFIER std::string format(const char* msg, ...)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::string
FormatConverterFunc	Bitmap.cpp	/^typedef void(*FormatConverterFunc)(unsigned char*, unsigned char*);$/;"	t	typeref:typename:void (*)(unsigned char *,unsigned char *)	file:
formatted	glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	typeref:typename:bool
formatted	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr>& formatted(std::basic_ios<CTy,CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
Format_Grayscale	Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_GrayscaleAlpha	Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
format_punct	glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io
format_punct	glm/gtx/io.inl	/^	format_punct<CTy>::format_punct(format_punct const& a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_punct	glm/gtx/io.inl	/^	format_punct<CTy>::format_punct(size_t a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
Format_RGB	Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGBA	Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
format_saver	glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<char>
forward	Camera.cpp	/^glm::vec3 Camera::forward() const {$/;"	f	class:Camera	typeref:typename:glm::vec3
four_over_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType four_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
fquat	glm/fwd.hpp	/^	typedef highp_fquat				fquat;$/;"	t	namespace:glm	typeref:typename:highp_fquat
fquat	glm/fwd.hpp	/^	typedef lowp_f32quat			fquat;$/;"	t	namespace:glm	typeref:typename:lowp_f32quat
fquat	glm/fwd.hpp	/^	typedef mediump_f32quat			fquat;$/;"	t	namespace:glm	typeref:typename:mediump_f32quat
fquat	glm/fwd.hpp	/^	typedef quat				fquat;$/;"	t	namespace:glm	typeref:typename:quat
fquatSIMD	glm/gtx/simd_quat.inl	/^	GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD()$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fquatSIMD	glm/gtx/simd_quat.inl	/^	GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD(fquatSIMD const & q) :$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fquatSIMD	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD(float const & w, float const & x, float const & y, float/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fquatSIMD	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD(quat const & q) :$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fquatSIMD	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD(vec3 const & eulerAngles)$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fquatSIMD	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD::fquatSIMD(__m128 const & Data) :$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER
fract	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD fract$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
frag_shdr	nuklear/nuklear_glfw_gl3.h	/^    GLuint frag_shdr;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
free	nuklear/nuklear.h	/^    void(*free)(nk_handle, void*);$/;"	m	struct:nk_allocator	typeref:typename:void (*)(nk_handle,void *)
freelist	nuklear/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_context	typeref:struct:nk_page_element *
freelist	nuklear/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_pool	typeref:struct:nk_page_element *
free_head	nuklear/nuklear.h	/^    struct nk_rp_node *free_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_node *
freq	main.cpp	/^float freq = 1.0e9;\/* float freq = 1.0e15; *\/$/;"	v	typeref:typename:float
frustum	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> frustum$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
ftoi	main.cpp	/^unsigned ftoi(double d)$/;"	f	typeref:typename:unsigned
func	glm/detail/dummy.cpp	/^void func(GLuint LocationMVP, float Translate, glm::vec2 const & Rotate)$/;"	f	typeref:typename:void
functor1	glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec1>$/;"	s	namespace:glm::detail
functor1	glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec2>$/;"	s	namespace:glm::detail
functor1	glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec3>$/;"	s	namespace:glm::detail
functor1	glm/detail/_vectorize.hpp	/^	struct functor1<R, T, P, tvec4>$/;"	s	namespace:glm::detail
functor1	glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec1>$/;"	s	namespace:glm::detail
functor2	glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec2>$/;"	s	namespace:glm::detail
functor2	glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec3>$/;"	s	namespace:glm::detail
functor2	glm/detail/_vectorize.hpp	/^	struct functor2<T, P, tvec4>$/;"	s	namespace:glm::detail
functor2	glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_sca	glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec1>$/;"	s	namespace:glm::detail
functor2_vec_sca	glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec2>$/;"	s	namespace:glm::detail
functor2_vec_sca	glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec3>$/;"	s	namespace:glm::detail
functor2_vec_sca	glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<T, P, tvec4>$/;"	s	namespace:glm::detail
functor2_vec_sca	glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	glm/fwd.hpp	/^	typedef highp_f32vec1			fvec1;$/;"	t	namespace:glm	typeref:typename:highp_f32vec1
fvec1	glm/fwd.hpp	/^	typedef lowp_f32vec1			fvec1;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec1
fvec1	glm/fwd.hpp	/^	typedef mediump_f32vec1			fvec1;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec1
fvec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<float, defaultp> fvec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,defaultp>
fvec2	glm/fwd.hpp	/^	typedef highp_f32vec2			fvec2;$/;"	t	namespace:glm	typeref:typename:highp_f32vec2
fvec2	glm/fwd.hpp	/^	typedef lowp_f32vec2			fvec2;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec2
fvec2	glm/fwd.hpp	/^	typedef mediump_f32vec2			fvec2;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec2
fvec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<float, defaultp> fvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,defaultp>
fvec3	glm/fwd.hpp	/^	typedef highp_f32vec3			fvec3;$/;"	t	namespace:glm	typeref:typename:highp_f32vec3
fvec3	glm/fwd.hpp	/^	typedef lowp_f32vec3			fvec3;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec3
fvec3	glm/fwd.hpp	/^	typedef mediump_f32vec3			fvec3;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec3
fvec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<float, defaultp> fvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,defaultp>
fvec4	glm/fwd.hpp	/^	typedef highp_f32vec4			fvec4;$/;"	t	namespace:glm	typeref:typename:highp_f32vec4
fvec4	glm/fwd.hpp	/^	typedef lowp_f32vec4			fvec4;$/;"	t	namespace:glm	typeref:typename:lowp_f32vec4
fvec4	glm/fwd.hpp	/^	typedef mediump_f32vec4			fvec4;$/;"	t	namespace:glm	typeref:typename:mediump_f32vec4
fvec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<float, defaultp> fvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,defaultp>
fvec4SIMD	glm/gtx/simd_vec4.inl	/^	GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD()$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^	GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(fvec4SIMD const & v) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(float const & s) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(float const & s, vec3 const & v) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(float const & s1, float const & s2, vec2 const & v) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(float const & s1, vec2 const & v, float const & s2) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(float const & x, float const & y, float const & z, float/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(vec2 const & v, float const & s1, float const & s2) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(vec2 const & v1, vec2 const & v2) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(vec3 const & v, float const & s) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(vec4 const & v) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fvec4SIMD	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD::fvec4SIMD(__m128 const & Data) :$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER
fx	nuklear/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
g	glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d030a	typeref:typename:T
g	glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon0c00c97d060c	typeref:typename:T
g	glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe030a	typeref:typename:T
g	glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon0c12e1fe060c	typeref:typename:T
g	glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f030a	typeref:typename:T
g	glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon0c24fa7f060c	typeref:typename:T
G	glm/gtx/simd_vec4.hpp	/^		G = 1,$/;"	e	enum:glm::comp
g	nuklear/nuklear.h	/^    struct nk_colorf {float r,g,b;} out = {0,0,0};$/;"	m	struct:nk_hsva_f::nk_colorf	typeref:typename:float
g	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color	typeref:typename:nk_byte
gaussRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType gaussRand(genType Mean, genType Deviation)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
gaussRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> gaussRand(vecType<T, P> const & Mean, vecType<T, P> const & De/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
gCamera	main.cpp	/^tdogl::Camera gCamera;$/;"	v	typeref:typename:tdogl::Camera
genType	glm/detail/type_gentype.hpp	/^	struct genType$/;"	s	namespace:glm::detail
getPixel	Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap	typeref:typename:unsigned char *
GetPixelOffset	Bitmap.cpp	/^inline unsigned GetPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Bitm/;"	f	typeref:typename:unsigned
get_facet	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER FTy const& get_facet(std::basic_ios<CTy,CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER FTy const &
GLframe	main.cpp	/^int GLframe = 0;$/;"	v	typeref:typename:int
glfw	nuklear/nuklear_glfw_gl3.h	/^} glfw;$/;"	v	typeref:struct:nk_glfw
GLFW_GLEWInit	main.cpp	/^void GLFW_GLEWInit()$/;"	f	typeref:typename:void
glm	glm/detail/func_common.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_common.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/func_exponential.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_exponential.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/func_geometric.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_geometric.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/func_integer.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_integer.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/func_matrix.hpp	/^namespace glm{$/;"	n
glm	glm/detail/func_matrix.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/func_packing.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_packing.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/func_trigonometric.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/func_vector_relational.hpp	/^namespace glm$/;"	n
glm	glm/detail/func_vector_relational.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	glm/detail/intrinsic_common.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_common.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/intrinsic_exponential.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_geometric.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_geometric.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/intrinsic_integer.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_integer.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/intrinsic_matrix.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_matrix.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/intrinsic_trigonometric.hpp	/^namespace glm{$/;"	n
glm	glm/detail/intrinsic_vector_relational.hpp	/^namespace glm{$/;"	n
glm	glm/detail/precision.hpp	/^namespace glm$/;"	n
glm	glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	glm/detail/type_gentype.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_gentype.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	glm/detail/type_half.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_int.hpp	/^namespace glm{$/;"	n
glm	glm/detail/type_mat.hpp	/^namespace glm{$/;"	n
glm	glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat2x2.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat2x3.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat2x4.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat3x2.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat3x3.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat3x4.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat4x2.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat4x3.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_mat4x4.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_vec.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_vec1.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_vec2.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	glm/detail/type_vec3.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_vec4.hpp	/^namespace glm{$/;"	n
glm	glm/detail/type_vec4.inl	/^namespace glm$/;"	n	file:
glm	glm/detail/type_vec4_avx.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_vec4_avx2.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/type_vec4_sse2.inl	/^namespace glm{$/;"	n	file:
glm	glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	glm/fwd.hpp	/^namespace glm$/;"	n
glm	glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	glm/gtc/bitfield.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	glm/gtc/color_space.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	glm/gtc/constants.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	glm/gtc/epsilon.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	glm/gtc/integer.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_access.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_inverse.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/matrix_transform.hpp	/^namespace glm$/;"	n
glm	glm/gtc/matrix_transform.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	glm/gtc/noise.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	glm/gtc/packing.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	glm/gtc/quaternion.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	glm/gtc/random.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/reciprocal.hpp	/^namespace glm$/;"	n
glm	glm/gtc/reciprocal.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	glm/gtc/round.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	glm/gtc/type_precision.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	glm/gtc/type_ptr.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	glm/gtc/ulp.inl	/^namespace glm$/;"	n	file:
glm	glm/gtc/ulp.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtc/vec1.hpp	/^namespace glm$/;"	n
glm	glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	glm/gtx/associated_min_max.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	glm/gtx/bit.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	glm/gtx/closest_point.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	glm/gtx/color_space.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	glm/gtx/color_space_YCoCg.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	glm/gtx/common.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	glm/gtx/compatibility.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	glm/gtx/component_wise.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	glm/gtx/dual_quaternion.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	glm/gtx/euler_angles.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	glm/gtx/extend.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/extented_min_max.hpp	/^namespace glm$/;"	n
glm	glm/gtx/extented_min_max.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_exponential.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_square_root.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	glm/gtx/fast_trigonometry.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	glm/gtx/gradient_paint.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	glm/gtx/handed_coordinate_space.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/hash.inl	/^namespace glm {$/;"	n	file:
glm	glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	glm/gtx/integer.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	glm/gtx/intersect.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	glm/gtx/io.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	glm/gtx/log_base.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_cross_product.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_decompose.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_interpolation.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_major_storage.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_operation.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_query.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	glm/gtx/matrix_transform_2d.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	glm/gtx/mixed_product.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	glm/gtx/norm.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	glm/gtx/normal.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	glm/gtx/normalize_dot.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/number_precision.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/optimum_pow.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/optimum_pow.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	glm/gtx/orthonormalize.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	glm/gtx/perpendicular.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	glm/gtx/polar_coordinates.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	glm/gtx/projection.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	glm/gtx/quaternion.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/range.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	glm/gtx/rotate_normalized_axis.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	glm/gtx/rotate_vector.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	glm/gtx/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/simd_mat4.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/simd_mat4.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/simd_quat.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/simd_quat.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/simd_vec4.hpp	/^namespace glm$/;"	n
glm	glm/gtx/simd_vec4.hpp	/^namespace glm{$/;"	n
glm	glm/gtx/simd_vec4.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	glm/gtx/spline.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	glm/gtx/std_based_type.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	glm/gtx/string_cast.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	glm/gtx/transform.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	glm/gtx/transform2.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	glm/gtx/type_aligned.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vector_angle.inl	/^namespace glm$/;"	n	file:
glm	glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	glm/gtx/vector_query.inl	/^namespace glm{$/;"	n	file:
glm	glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	glm/gtx/wrap.inl	/^namespace glm$/;"	n	file:
glm	glm/mat2x2.hpp	/^namespace glm$/;"	n
glm	glm/mat2x3.hpp	/^namespace glm$/;"	n
glm	glm/mat2x4.hpp	/^namespace glm$/;"	n
glm	glm/mat3x2.hpp	/^namespace glm$/;"	n
glm	glm/mat3x3.hpp	/^namespace glm$/;"	n
glm	glm/mat3x4.hpp	/^namespace glm$/;"	n
glm	glm/mat4x2.hpp	/^namespace glm$/;"	n
glm	glm/mat4x3.hpp	/^namespace glm$/;"	n
glm	glm/mat4x4.hpp	/^namespace glm$/;"	n
GLM_ALIGN	glm/detail/setup.hpp	/^#	define GLM_ALIGN$/;"	d
GLM_ALIGN	glm/detail/setup.hpp	/^#	define GLM_ALIGN(/;"	d
GLM_ALIGNED_STRUCT	glm/detail/setup.hpp	/^#	define GLM_ALIGNED_STRUCT(/;"	d
GLM_ALIGNED_TYPEDEF	glm/detail/setup.hpp	/^#	define GLM_ALIGNED_TYPEDEF(/;"	d
GLM_ARCH	glm/detail/setup.hpp	/^#			define GLM_ARCH /;"	d
GLM_ARCH	glm/detail/setup.hpp	/^#		define GLM_ARCH /;"	d
GLM_ARCH	glm/detail/setup.hpp	/^#	define GLM_ARCH /;"	d
GLM_ARCH_ARM	glm/detail/setup.hpp	/^#define GLM_ARCH_ARM	/;"	d
GLM_ARCH_AVX	glm/detail/setup.hpp	/^#define GLM_ARCH_AVX	/;"	d
GLM_ARCH_AVX2	glm/detail/setup.hpp	/^#define GLM_ARCH_AVX2	/;"	d
GLM_ARCH_AVX512	glm/detail/setup.hpp	/^#define GLM_ARCH_AVX512	/;"	d
GLM_ARCH_PURE	glm/detail/setup.hpp	/^#define GLM_ARCH_PURE	/;"	d
GLM_ARCH_SSE2	glm/detail/setup.hpp	/^#define GLM_ARCH_SSE2	/;"	d
GLM_ARCH_SSE3	glm/detail/setup.hpp	/^#define GLM_ARCH_SSE3	/;"	d
GLM_ARCH_SSE4	glm/detail/setup.hpp	/^#define GLM_ARCH_SSE4	/;"	d
GLM_ARCH_X86	glm/detail/setup.hpp	/^#define GLM_ARCH_X86	/;"	d
GLM_COMPILER	glm/detail/setup.hpp	/^#			define GLM_COMPILER /;"	d
GLM_COMPILER	glm/detail/setup.hpp	/^#		define GLM_COMPILER /;"	d
GLM_COMPILER	glm/detail/setup.hpp	/^#	define GLM_COMPILER /;"	d
GLM_COMPILER	glm/simd/platform.h	/^#			define GLM_COMPILER /;"	d
GLM_COMPILER	glm/simd/platform.h	/^#		define GLM_COMPILER /;"	d
GLM_COMPILER	glm/simd/platform.h	/^#	define GLM_COMPILER /;"	d
GLM_COMPILER_APPLE_CLANG	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG	/;"	d
GLM_COMPILER_APPLE_CLANG40	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG40	/;"	d
GLM_COMPILER_APPLE_CLANG41	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG41	/;"	d
GLM_COMPILER_APPLE_CLANG42	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG42	/;"	d
GLM_COMPILER_APPLE_CLANG50	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG50	/;"	d
GLM_COMPILER_APPLE_CLANG51	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG51	/;"	d
GLM_COMPILER_APPLE_CLANG60	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG60	/;"	d
GLM_COMPILER_APPLE_CLANG61	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG61	/;"	d
GLM_COMPILER_APPLE_CLANG70	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG70	/;"	d
GLM_COMPILER_APPLE_CLANG73	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG73	/;"	d
GLM_COMPILER_APPLE_CLANG80	glm/detail/setup.hpp	/^#define GLM_COMPILER_APPLE_CLANG80	/;"	d
GLM_COMPILER_CUDA	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA	/;"	d
GLM_COMPILER_CUDA	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA	/;"	d
GLM_COMPILER_CUDA40	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA40	/;"	d
GLM_COMPILER_CUDA40	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA40	/;"	d
GLM_COMPILER_CUDA41	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA41	/;"	d
GLM_COMPILER_CUDA41	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA41	/;"	d
GLM_COMPILER_CUDA42	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA42	/;"	d
GLM_COMPILER_CUDA42	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA42	/;"	d
GLM_COMPILER_CUDA50	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA50	/;"	d
GLM_COMPILER_CUDA50	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA50	/;"	d
GLM_COMPILER_CUDA60	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA60	/;"	d
GLM_COMPILER_CUDA60	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA60	/;"	d
GLM_COMPILER_CUDA65	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA65	/;"	d
GLM_COMPILER_CUDA65	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA65	/;"	d
GLM_COMPILER_CUDA70	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA70	/;"	d
GLM_COMPILER_CUDA70	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA70	/;"	d
GLM_COMPILER_CUDA75	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA75	/;"	d
GLM_COMPILER_CUDA75	glm/simd/platform.h	/^#define GLM_COMPILER_CUDA75	/;"	d
GLM_COMPILER_CUDA80	glm/detail/setup.hpp	/^#define GLM_COMPILER_CUDA80	/;"	d
GLM_COMPILER_GCC	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC	/;"	d
GLM_COMPILER_GCC	glm/simd/platform.h	/^#define GLM_COMPILER_GCC	/;"	d
GLM_COMPILER_GCC44	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC44	/;"	d
GLM_COMPILER_GCC44	glm/simd/platform.h	/^#define GLM_COMPILER_GCC44	/;"	d
GLM_COMPILER_GCC45	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC45	/;"	d
GLM_COMPILER_GCC45	glm/simd/platform.h	/^#define GLM_COMPILER_GCC45	/;"	d
GLM_COMPILER_GCC46	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC46	/;"	d
GLM_COMPILER_GCC46	glm/simd/platform.h	/^#define GLM_COMPILER_GCC46	/;"	d
GLM_COMPILER_GCC47	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC47	/;"	d
GLM_COMPILER_GCC47	glm/simd/platform.h	/^#define GLM_COMPILER_GCC47	/;"	d
GLM_COMPILER_GCC48	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC48	/;"	d
GLM_COMPILER_GCC48	glm/simd/platform.h	/^#define GLM_COMPILER_GCC48	/;"	d
GLM_COMPILER_GCC49	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC49	/;"	d
GLM_COMPILER_GCC49	glm/simd/platform.h	/^#define GLM_COMPILER_GCC49	/;"	d
GLM_COMPILER_GCC50	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC50	/;"	d
GLM_COMPILER_GCC50	glm/simd/platform.h	/^#define GLM_COMPILER_GCC50	/;"	d
GLM_COMPILER_GCC51	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC51	/;"	d
GLM_COMPILER_GCC51	glm/simd/platform.h	/^#define GLM_COMPILER_GCC51	/;"	d
GLM_COMPILER_GCC52	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC52	/;"	d
GLM_COMPILER_GCC52	glm/simd/platform.h	/^#define GLM_COMPILER_GCC52	/;"	d
GLM_COMPILER_GCC53	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC53	/;"	d
GLM_COMPILER_GCC53	glm/simd/platform.h	/^#define GLM_COMPILER_GCC53	/;"	d
GLM_COMPILER_GCC54	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC54	/;"	d
GLM_COMPILER_GCC60	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC60	/;"	d
GLM_COMPILER_GCC60	glm/simd/platform.h	/^#define GLM_COMPILER_GCC60	/;"	d
GLM_COMPILER_GCC61	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC61	/;"	d
GLM_COMPILER_GCC62	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC62	/;"	d
GLM_COMPILER_GCC70	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC70	/;"	d
GLM_COMPILER_GCC71	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC71	/;"	d
GLM_COMPILER_GCC72	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC72	/;"	d
GLM_COMPILER_GCC80	glm/detail/setup.hpp	/^#define GLM_COMPILER_GCC80	/;"	d
GLM_COMPILER_INTEL	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL	/;"	d
GLM_COMPILER_INTEL	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL	/;"	d
GLM_COMPILER_INTEL12	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL12	/;"	d
GLM_COMPILER_INTEL12	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL12	/;"	d
GLM_COMPILER_INTEL12_1	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL12_1	/;"	d
GLM_COMPILER_INTEL12_1	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL12_1	/;"	d
GLM_COMPILER_INTEL13	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL13	/;"	d
GLM_COMPILER_INTEL13	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL13	/;"	d
GLM_COMPILER_INTEL14	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL14	/;"	d
GLM_COMPILER_INTEL14	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL14	/;"	d
GLM_COMPILER_INTEL15	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL15	/;"	d
GLM_COMPILER_INTEL15	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL15	/;"	d
GLM_COMPILER_INTEL16	glm/detail/setup.hpp	/^#define GLM_COMPILER_INTEL16	/;"	d
GLM_COMPILER_INTEL16	glm/simd/platform.h	/^#define GLM_COMPILER_INTEL16	/;"	d
GLM_COMPILER_LLVM	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM	/;"	d
GLM_COMPILER_LLVM	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM	/;"	d
GLM_COMPILER_LLVM32	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM32	/;"	d
GLM_COMPILER_LLVM32	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM32	/;"	d
GLM_COMPILER_LLVM33	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM33	/;"	d
GLM_COMPILER_LLVM33	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM33	/;"	d
GLM_COMPILER_LLVM34	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM34	/;"	d
GLM_COMPILER_LLVM34	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM34	/;"	d
GLM_COMPILER_LLVM35	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM35	/;"	d
GLM_COMPILER_LLVM35	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM35	/;"	d
GLM_COMPILER_LLVM36	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM36	/;"	d
GLM_COMPILER_LLVM36	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM36	/;"	d
GLM_COMPILER_LLVM37	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM37	/;"	d
GLM_COMPILER_LLVM37	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM37	/;"	d
GLM_COMPILER_LLVM38	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM38	/;"	d
GLM_COMPILER_LLVM38	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM38	/;"	d
GLM_COMPILER_LLVM39	glm/detail/setup.hpp	/^#define GLM_COMPILER_LLVM39	/;"	d
GLM_COMPILER_LLVM39	glm/simd/platform.h	/^#define GLM_COMPILER_LLVM39	/;"	d
GLM_COMPILER_UNKNOWN	glm/detail/setup.hpp	/^#define GLM_COMPILER_UNKNOWN	/;"	d
GLM_COMPILER_UNKNOWN	glm/simd/platform.h	/^#define GLM_COMPILER_UNKNOWN	/;"	d
GLM_COMPILER_VC	glm/detail/setup.hpp	/^#define GLM_COMPILER_VC	/;"	d
GLM_COMPILER_VC	glm/simd/platform.h	/^#define GLM_COMPILER_VC	/;"	d
GLM_COMPILER_VC2010	glm/detail/setup.hpp	/^#define GLM_COMPILER_VC2010	/;"	d
GLM_COMPILER_VC2010	glm/simd/platform.h	/^#define GLM_COMPILER_VC2010	/;"	d
GLM_COMPILER_VC2012	glm/detail/setup.hpp	/^#define GLM_COMPILER_VC2012	/;"	d
GLM_COMPILER_VC2012	glm/simd/platform.h	/^#define GLM_COMPILER_VC2012	/;"	d
GLM_COMPILER_VC2013	glm/detail/setup.hpp	/^#define GLM_COMPILER_VC2013	/;"	d
GLM_COMPILER_VC2013	glm/simd/platform.h	/^#define GLM_COMPILER_VC2013	/;"	d
GLM_COMPILER_VC2015	glm/detail/setup.hpp	/^#define GLM_COMPILER_VC2015	/;"	d
GLM_COMPILER_VC2015	glm/simd/platform.h	/^#define GLM_COMPILER_VC2015	/;"	d
GLM_CONSTEXPR	glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR /;"	d
GLM_CONSTEXPR	glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR$/;"	d
GLM_COUNTOF	glm/detail/setup.hpp	/^#	define GLM_COUNTOF(/;"	d
GLM_CUDA_FUNC_DECL	glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL /;"	d
GLM_CUDA_FUNC_DECL	glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL$/;"	d
GLM_CUDA_FUNC_DEF	glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF /;"	d
GLM_CUDA_FUNC_DEF	glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF$/;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	glm/detail/_features.hpp	/^#		define GLM_CXX11_ACCESS_CONTROL_SFINAE$/;"	d
GLM_CXX11_ALIAS_TEMPLATE	glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIAS_TEMPLATE$/;"	d
GLM_CXX11_ALIGNAS	glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIGNAS$/;"	d
GLM_CXX11_ATTRIBUTES	glm/detail/_features.hpp	/^#		define GLM_CXX11_ATTRIBUTES$/;"	d
GLM_CXX11_AUTO_TYPE	glm/detail/_features.hpp	/^#		define GLM_CXX11_AUTO_TYPE$/;"	d
GLM_CXX11_CONSTEXPR	glm/detail/_features.hpp	/^#		define GLM_CXX11_CONSTEXPR$/;"	d
GLM_CXX11_DECLTYPE	glm/detail/_features.hpp	/^#		define GLM_CXX11_DECLTYPE$/;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULTED_FUNCTIONS$/;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS$/;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	glm/detail/_features.hpp	/^#		define GLM_CXX11_DELEGATING_CONSTRUCTORS$/;"	d
GLM_CXX11_DELETED_FUNCTIONS	glm/detail/_features.hpp	/^#		define GLM_CXX11_DELETED_FUNCTIONS$/;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	glm/detail/_features.hpp	/^#		define GLM_CXX11_EXPLICIT_CONVERSIONS$/;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	glm/detail/_features.hpp	/^#		define GLM_CXX11_GENERALIZED_INITIALIZERS$/;"	d
GLM_CXX11_IMPLICIT_MOVES	glm/detail/_features.hpp	/^#		define GLM_CXX11_IMPLICIT_MOVES$/;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	glm/detail/_features.hpp	/^#		define GLM_CXX11_INHERITING_CONSTRUCTORS$/;"	d
GLM_CXX11_INLINE_NAMESPACES	glm/detail/_features.hpp	/^#		define GLM_CXX11_INLINE_NAMESPACES$/;"	d
GLM_CXX11_LAMBDAS	glm/detail/_features.hpp	/^#		define GLM_CXX11_LAMBDAS$/;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	glm/detail/_features.hpp	/^#		define GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS$/;"	d
GLM_CXX11_NOEXCEPT	glm/detail/_features.hpp	/^#		define GLM_CXX11_NOEXCEPT$/;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	glm/detail/_features.hpp	/^#		define GLM_CXX11_NONSTATIC_MEMBER_INIT$/;"	d
GLM_CXX11_NULLPTR	glm/detail/_features.hpp	/^#		define GLM_CXX11_NULLPTR$/;"	d
GLM_CXX11_OVERRIDE_CONTROL	glm/detail/_features.hpp	/^#		define GLM_CXX11_OVERRIDE_CONTROL$/;"	d
GLM_CXX11_RANGE_FOR	glm/detail/_features.hpp	/^#		define GLM_CXX11_RANGE_FOR$/;"	d
GLM_CXX11_RAW_STRING_LITERALS	glm/detail/_features.hpp	/^#		define GLM_CXX11_RAW_STRING_LITERALS$/;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	glm/detail/_features.hpp	/^#		define GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS$/;"	d
GLM_CXX11_RVALUE_REFERENCES	glm/detail/_features.hpp	/^#		define GLM_CXX11_RVALUE_REFERENCES$/;"	d
GLM_CXX11_STATIC_ASSERT	glm/detail/_features.hpp	/^#		define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STRONG_ENUMS	glm/detail/_features.hpp	/^#		define GLM_CXX11_STRONG_ENUMS$/;"	d
GLM_CXX11_TRAILING_RETURN	glm/detail/_features.hpp	/^#		define GLM_CXX11_TRAILING_RETURN$/;"	d
GLM_CXX11_UNICODE_LITERALS	glm/detail/_features.hpp	/^#		define GLM_CXX11_UNICODE_LITERALS$/;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	glm/detail/_features.hpp	/^#		define GLM_CXX11_UNRESTRICTED_UNIONS$/;"	d
GLM_CXX11_USER_LITERALS	glm/detail/_features.hpp	/^#		define GLM_CXX11_USER_LITERALS$/;"	d
GLM_CXX11_VARIADIC_TEMPLATES	glm/detail/_features.hpp	/^#		define GLM_CXX11_VARIADIC_TEMPLATES$/;"	d
GLM_CXX98_EXCEPTIONS	glm/detail/_features.hpp	/^#		define GLM_CXX98_EXCEPTIONS$/;"	d
GLM_CXX98_RTTI	glm/detail/_features.hpp	/^#		define GLM_CXX98_RTTI$/;"	d
GLM_DEFAULT	glm/detail/setup.hpp	/^#	define GLM_DEFAULT /;"	d
GLM_DEFAULT	glm/detail/setup.hpp	/^#	define GLM_DEFAULT$/;"	d
GLM_DEFAULT_CTOR	glm/detail/setup.hpp	/^#		define GLM_DEFAULT_CTOR /;"	d
GLM_DEFAULT_CTOR	glm/detail/setup.hpp	/^#		define GLM_DEFAULT_CTOR$/;"	d
GLM_DEFAULT_CTOR	glm/detail/setup.hpp	/^#	define GLM_DEFAULT_CTOR$/;"	d
GLM_DEPRECATED	glm/detail/setup.hpp	/^#	define GLM_DEPRECATED /;"	d
GLM_DEPRECATED	glm/detail/setup.hpp	/^#	define GLM_DEPRECATED$/;"	d
GLM_EXPLICIT	glm/detail/setup.hpp	/^#	define GLM_EXPLICIT /;"	d
GLM_EXPLICIT	glm/detail/setup.hpp	/^#	define GLM_EXPLICIT$/;"	d
GLM_EXTRACT_WORDS	glm/gtc/ulp.inl	/^#define GLM_EXTRACT_WORDS(/;"	d	file:
GLM_FORCE_PURE	glm/detail/setup.hpp	/^#			define GLM_FORCE_PURE$/;"	d
GLM_FUNC_DECL	glm/detail/setup.hpp	/^#define GLM_FUNC_DECL /;"	d
GLM_FUNC_QUALIFIER	glm/detail/setup.hpp	/^#define GLM_FUNC_QUALIFIER /;"	d
GLM_GET_FLOAT_WORD	glm/gtc/ulp.inl	/^#define GLM_GET_FLOAT_WORD(/;"	d	file:
GLM_HAS_ANONYMOUS_UNION	glm/detail/setup.hpp	/^#define GLM_HAS_ANONYMOUS_UNION /;"	d
GLM_HAS_ASSIGNABLE	glm/detail/setup.hpp	/^#	define GLM_HAS_ASSIGNABLE /;"	d
GLM_HAS_BITSCAN_WINDOWS	glm/detail/setup.hpp	/^#	define GLM_HAS_BITSCAN_WINDOWS /;"	d
GLM_HAS_CONSTEXPR	glm/detail/setup.hpp	/^#	define GLM_HAS_CONSTEXPR /;"	d
GLM_HAS_CONSTEXPR_PARTIAL	glm/detail/setup.hpp	/^#	define GLM_HAS_CONSTEXPR_PARTIAL /;"	d
GLM_HAS_CXX11_STL	glm/detail/setup.hpp	/^#		define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_CXX11_STL	glm/detail/setup.hpp	/^#	define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	glm/detail/setup.hpp	/^#	define GLM_HAS_DEFAULTED_FUNCTIONS /;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	glm/detail/setup.hpp	/^#	define GLM_HAS_EXPLICIT_CONVERSION_OPERATORS /;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	glm/detail/setup.hpp	/^#	define GLM_HAS_EXTENDED_INTEGER_TYPE /;"	d
GLM_HAS_INITIALIZER_LISTS	glm/detail/setup.hpp	/^#	define GLM_HAS_INITIALIZER_LISTS /;"	d
GLM_HAS_MAKE_SIGNED	glm/detail/setup.hpp	/^#	define GLM_HAS_MAKE_SIGNED /;"	d
GLM_HAS_OPENMP	glm/detail/setup.hpp	/^#			define GLM_HAS_OPENMP /;"	d
GLM_HAS_RANGE_FOR	glm/detail/setup.hpp	/^#	define GLM_HAS_RANGE_FOR /;"	d
GLM_HAS_RVALUE_REFERENCES	glm/detail/setup.hpp	/^#	define GLM_HAS_RVALUE_REFERENCES /;"	d
GLM_HAS_STATIC_ASSERT	glm/detail/setup.hpp	/^#	define GLM_HAS_STATIC_ASSERT /;"	d
GLM_HAS_TEMPLATE_ALIASES	glm/detail/setup.hpp	/^#	define GLM_HAS_TEMPLATE_ALIASES /;"	d
GLM_HAS_TRIVIAL_QUERIES	glm/detail/setup.hpp	/^#define GLM_HAS_TRIVIAL_QUERIES /;"	d
GLM_HAS_UNRESTRICTED_UNIONS	glm/detail/setup.hpp	/^#	define GLM_HAS_UNRESTRICTED_UNIONS /;"	d
GLM_IMPLEMENT_SCAL_MULT	glm/gtx/scalar_multiplication.hpp	/^#define GLM_IMPLEMENT_SCAL_MULT(/;"	d
GLM_INLINE	glm/detail/setup.hpp	/^#		define GLM_INLINE /;"	d
GLM_INLINE	glm/detail/setup.hpp	/^#	define GLM_INLINE /;"	d
GLM_INSERT_WORDS	glm/gtc/ulp.inl	/^#define GLM_INSERT_WORDS(/;"	d	file:
GLM_LANG	glm/detail/setup.hpp	/^#				define GLM_LANG /;"	d
GLM_LANG	glm/detail/setup.hpp	/^#			define GLM_LANG /;"	d
GLM_LANG	glm/detail/setup.hpp	/^#	define GLM_LANG /;"	d
GLM_LANG_CXX03	glm/detail/setup.hpp	/^#define GLM_LANG_CXX03	/;"	d
GLM_LANG_CXX03_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX03_FLAG	/;"	d
GLM_LANG_CXX0X	glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X	/;"	d
GLM_LANG_CXX0X_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X_FLAG	/;"	d
GLM_LANG_CXX11	glm/detail/setup.hpp	/^#define GLM_LANG_CXX11	/;"	d
GLM_LANG_CXX11_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX11_FLAG	/;"	d
GLM_LANG_CXX14	glm/detail/setup.hpp	/^#define GLM_LANG_CXX14	/;"	d
GLM_LANG_CXX14_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX14_FLAG	/;"	d
GLM_LANG_CXX1Y	glm/detail/setup.hpp	/^#define GLM_LANG_CXX1Y	/;"	d
GLM_LANG_CXX1Y_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX1Y_FLAG	/;"	d
GLM_LANG_CXX1Z	glm/detail/setup.hpp	/^#define GLM_LANG_CXX1Z	/;"	d
GLM_LANG_CXX1Z_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX1Z_FLAG	/;"	d
GLM_LANG_CXX98	glm/detail/setup.hpp	/^#define GLM_LANG_CXX98	/;"	d
GLM_LANG_CXX98_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXX98_FLAG	/;"	d
GLM_LANG_CXXGNU	glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU	/;"	d
GLM_LANG_CXXGNU_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU_FLAG	/;"	d
GLM_LANG_CXXMS	glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS	/;"	d
GLM_LANG_CXXMS_FLAG	glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS_FLAG	/;"	d
GLM_MESSAGES	glm/detail/dummy.cpp	/^#define GLM_MESSAGES$/;"	d	file:
GLM_MESSAGE_ARCH_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_ARCH_DISPLAYED$/;"	d
GLM_MESSAGE_COMPILER_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_COMPILER_DISPLAYED$/;"	d
GLM_MESSAGE_CORE_INCLUDED_DISPLAYED	glm/glm.hpp	/^#	define GLM_MESSAGE_CORE_INCLUDED_DISPLAYED$/;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	glm/ext.hpp	/^#	define GLM_MESSAGE_EXT_INCLUDED_DISPLAYED$/;"	d
GLM_MESSAGE_FORCE_SIZE_T_LENGTH	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_FORCE_SIZE_T_LENGTH$/;"	d
GLM_MESSAGE_LANG_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_LANG_DISPLAYED$/;"	d
GLM_MESSAGE_MODEL_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_MODEL_DISPLAYED$/;"	d
GLM_MESSAGE_PLATFORM_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_PLATFORM_DISPLAYED$/;"	d
GLM_MESSAGE_PLATFORM_DISPLAYED	glm/simd/platform.h	/^#	define GLM_MESSAGE_PLATFORM_DISPLAYED$/;"	d
GLM_MESSAGE_SWIZZLE_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_SWIZZLE_DISPLAYED$/;"	d
GLM_MESSAGE_VERSION_DISPLAYED	glm/detail/setup.hpp	/^#	define GLM_MESSAGE_VERSION_DISPLAYED$/;"	d
GLM_MODEL	glm/detail/setup.hpp	/^#		define GLM_MODEL	/;"	d
GLM_MODEL	glm/detail/setup.hpp	/^#	define GLM_MODEL	/;"	d
GLM_MODEL_32	glm/detail/setup.hpp	/^#define GLM_MODEL_32	/;"	d
GLM_MODEL_32	glm/simd/platform.h	/^#define GLM_MODEL_32	/;"	d
GLM_MODEL_64	glm/detail/setup.hpp	/^#define GLM_MODEL_64	/;"	d
GLM_MODEL_64	glm/simd/platform.h	/^#define GLM_MODEL_64	/;"	d
GLM_MSC_EXT	glm/detail/setup.hpp	/^#			define GLM_MSC_EXT /;"	d
GLM_MUTABLE	glm/detail/_swizzle_func.hpp	/^#define GLM_MUTABLE$/;"	d
GLM_NEVER_INLINE	glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE /;"	d
GLM_NEVER_INLINE	glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE$/;"	d
GLM_NEVER_INLINE	glm/detail/setup.hpp	/^#	define GLM_NEVER_INLINE$/;"	d
GLM_NOT_BUGGY_VC32BITS	glm/detail/type_vec4.hpp	/^#	define GLM_NOT_BUGGY_VC32BITS /;"	d
GLM_PLATFORM	glm/detail/setup.hpp	/^#	define GLM_PLATFORM /;"	d
GLM_PLATFORM	glm/simd/platform.h	/^#	define GLM_PLATFORM /;"	d
GLM_PLATFORM_ANDROID	glm/detail/setup.hpp	/^#define GLM_PLATFORM_ANDROID	/;"	d
GLM_PLATFORM_ANDROID	glm/simd/platform.h	/^#define GLM_PLATFORM_ANDROID	/;"	d
GLM_PLATFORM_APPLE	glm/detail/setup.hpp	/^#define GLM_PLATFORM_APPLE	/;"	d
GLM_PLATFORM_APPLE	glm/simd/platform.h	/^#define GLM_PLATFORM_APPLE	/;"	d
GLM_PLATFORM_CHROME_NACL	glm/detail/setup.hpp	/^#define GLM_PLATFORM_CHROME_NACL	/;"	d
GLM_PLATFORM_CHROME_NACL	glm/simd/platform.h	/^#define GLM_PLATFORM_CHROME_NACL	/;"	d
GLM_PLATFORM_CYGWIN	glm/detail/setup.hpp	/^#define GLM_PLATFORM_CYGWIN	/;"	d
GLM_PLATFORM_CYGWIN	glm/simd/platform.h	/^#define GLM_PLATFORM_CYGWIN	/;"	d
GLM_PLATFORM_LINUX	glm/detail/setup.hpp	/^#define GLM_PLATFORM_LINUX	/;"	d
GLM_PLATFORM_LINUX	glm/simd/platform.h	/^#define GLM_PLATFORM_LINUX	/;"	d
GLM_PLATFORM_QNXNTO	glm/detail/setup.hpp	/^#define GLM_PLATFORM_QNXNTO	/;"	d
GLM_PLATFORM_QNXNTO	glm/simd/platform.h	/^#define GLM_PLATFORM_QNXNTO	/;"	d
GLM_PLATFORM_UNIX	glm/detail/setup.hpp	/^#define GLM_PLATFORM_UNIX	/;"	d
GLM_PLATFORM_UNIX	glm/simd/platform.h	/^#define GLM_PLATFORM_UNIX	/;"	d
GLM_PLATFORM_UNKNOWN	glm/detail/setup.hpp	/^#define GLM_PLATFORM_UNKNOWN	/;"	d
GLM_PLATFORM_UNKNOWN	glm/simd/platform.h	/^#define GLM_PLATFORM_UNKNOWN	/;"	d
GLM_PLATFORM_WINCE	glm/detail/setup.hpp	/^#define GLM_PLATFORM_WINCE	/;"	d
GLM_PLATFORM_WINCE	glm/simd/platform.h	/^#define GLM_PLATFORM_WINCE	/;"	d
GLM_PLATFORM_WINDOWS	glm/detail/setup.hpp	/^#define GLM_PLATFORM_WINDOWS	/;"	d
GLM_PLATFORM_WINDOWS	glm/simd/platform.h	/^#define GLM_PLATFORM_WINDOWS	/;"	d
GLM_RELAXED_CONSTEXPR	glm/detail/setup.hpp	/^#	define GLM_RELAXED_CONSTEXPR /;"	d
GLM_RESTRICT	glm/detail/setup.hpp	/^#	define GLM_RESTRICT /;"	d
GLM_RESTRICT	glm/detail/setup.hpp	/^#	define GLM_RESTRICT$/;"	d
GLM_RESTRICT_VAR	glm/detail/setup.hpp	/^#	define GLM_RESTRICT_VAR /;"	d
GLM_RESTRICT_VAR	glm/detail/setup.hpp	/^#	define GLM_RESTRICT_VAR$/;"	d
GLM_SET_FLOAT_WORD	glm/gtc/ulp.inl	/^#define GLM_SET_FLOAT_WORD(/;"	d	file:
GLM_STATIC_ASSERT	glm/detail/setup.hpp	/^#	define GLM_STATIC_ASSERT(/;"	d
GLM_STATIC_ASSERT_NULL	glm/detail/setup.hpp	/^#	define GLM_STATIC_ASSERT_NULL$/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP(/;"	d
GLM_TEMPLATE_GENTYPE	glm/detail/dummy.cpp	/^#define GLM_TEMPLATE_GENTYPE /;"	d	file:
GLM_VAR_USED	glm/detail/setup.hpp	/^#	define GLM_VAR_USED /;"	d
GLM_VAR_USED	glm/detail/setup.hpp	/^#	define GLM_VAR_USED$/;"	d
GLM_VERSION	glm/detail/setup.hpp	/^#define GLM_VERSION	/;"	d
GLM_VERSION_MAJOR	glm/detail/setup.hpp	/^#define GLM_VERSION_MAJOR	/;"	d
GLM_VERSION_MINOR	glm/detail/setup.hpp	/^#define GLM_VERSION_MINOR	/;"	d
GLM_VERSION_PATCH	glm/detail/setup.hpp	/^#define GLM_VERSION_PATCH	/;"	d
GLM_VERSION_REVISION	glm/detail/setup.hpp	/^#define GLM_VERSION_REVISION	/;"	d
global_alpha	nuklear/nuklear.h	/^    float global_alpha; \/* global alpha value *\/$/;"	m	struct:nk_convert_config	typeref:typename:float
global_alpha	nuklear/nuklear.h	/^    float global_alpha;$/;"	m	struct:nk_draw_list	typeref:typename:float
GLtimebase	main.cpp	/^int GLtimebase = 0;$/;"	v	typeref:typename:int
GLtimenow	main.cpp	/^int GLtimenow = 0;$/;"	v	typeref:typename:int
GLuint	glm/detail/dummy.cpp	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int	file:
glUniformMatrix4fv	glm/detail/dummy.cpp	/^void glUniformMatrix4fv(GLuint, int, int, float*){}$/;"	f	typeref:typename:void
glyf	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
glyphs	nuklear/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font	typeref:struct:nk_font_glyph *
glyphs	nuklear/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_glyph *
glyph_count	nuklear/nuklear.h	/^    int glyph_count;$/;"	m	struct:nk_font_atlas	typeref:typename:int
glyph_count	nuklear/nuklear.h	/^    nk_rune glyph_count;$/;"	m	struct:nk_baked_font	typeref:typename:nk_rune
glyph_offset	nuklear/nuklear.h	/^    nk_rune glyph_offset;$/;"	m	struct:nk_baked_font	typeref:typename:nk_rune
GL_FALSE	glm/detail/dummy.cpp	/^#define GL_FALSE /;"	d	file:
golden_ratio	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType golden_ratio()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
gProgram	main.cpp	/^tdogl::Program *gProgram = NULL;$/;"	v	typeref:typename:tdogl::Program *
grab	nuklear/nuklear.h	/^    unsigned char grab;$/;"	m	struct:nk_mouse	typeref:typename:unsigned char
grabbed	nuklear/nuklear.h	/^    unsigned char grabbed;$/;"	m	struct:nk_mouse	typeref:typename:unsigned char
grad4	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> grad4(T const & j, tvec4<T, P> const & ip)$/;"	f	namespace:glm::gtc	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
Grayscale2GrayscaleAlpha	Bitmap.cpp	/^static void Grayscale2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
Grayscale2RGB	Bitmap.cpp	/^static void Grayscale2RGB(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
Grayscale2RGBA	Bitmap.cpp	/^static void Grayscale2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
GrayscaleAlpha2Grayscale	Bitmap.cpp	/^static void GrayscaleAlpha2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
GrayscaleAlpha2RGB	Bitmap.cpp	/^static void GrayscaleAlpha2RGB(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
GrayscaleAlpha2RGBA	Bitmap.cpp	/^static void GrayscaleAlpha2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
greaterThan	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> greaterThan(vecType<T, P> const & x, vecType<T, P> const & /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
greaterThan	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> greaterThan(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
greaterThan	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
greaterThanEqual	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> greaterThanEqual(vecType<T, P> const & x, vecType<T, P> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
greaterThanEqual	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> greaterThanEqual(tquat<T, P> const & x, tquat<T, P> const & y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
greaterThanEqual	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
GRID_SIZE	main.cpp	/^const glm::vec2 GRID_SIZE(256, 256);$/;"	v	typeref:typename:const glm::vec2
group_border	nuklear/nuklear.h	/^    float group_border;$/;"	m	struct:nk_style_window	typeref:typename:float
group_border_color	nuklear/nuklear.h	/^    struct nk_color group_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
grow_factor	nuklear/nuklear.h	/^    float grow_factor;$/;"	m	struct:nk_buffer	typeref:typename:float
gScrollY	main.cpp	/^float gScrollY = 0.0;$/;"	v	typeref:typename:float
gtc	glm/gtc/noise.inl	/^namespace gtc$/;"	n	namespace:glm	file:
gTexture	main.cpp	/^tdogl::Texture *gTexture = NULL;$/;"	v	typeref:typename:tdogl::Texture *
gtx	glm/gtx/number_precision.hpp	/^namespace gtx$/;"	n	namespace:glm
gtx	glm/gtx/optimum_pow.hpp	/^namespace gtx$/;"	n	namespace:glm
GUIRender	main.cpp	/^void GUIRender(struct nk_context *ctx)$/;"	f	typeref:typename:void
gVAO	main.cpp	/^GLuint gVAO = 0;$/;"	v	typeref:typename:GLuint
gVBO	main.cpp	/^GLuint gVBO = 0;$/;"	v	typeref:typename:GLuint
gWindow	main.cpp	/^GLFWwindow *gWindow = NULL;$/;"	v	typeref:typename:GLFWwindow *
h	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart	typeref:typename:float
h	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state	typeref:typename:float
h	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
h	nuklear/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect	typeref:typename:nk_rp_coord
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap	typeref:typename:int
h	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image	typeref:typename:unsigned short
h	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect	typeref:typename:float
h	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti	typeref:typename:short
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
half2float	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint half2float(glm::uint h)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
halfVector	glm/detail/dummy.cpp	/^	glm::vec4 halfVector; \/\/ Derived: Hi$/;"	m	struct:light	typeref:typename:glm::vec4	file:
half_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
handle	nuklear/nuklear.h	/^    struct nk_user_font handle;$/;"	m	struct:nk_font	typeref:struct:nk_user_font
handle	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image	typeref:typename:nk_handle
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x2<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x3<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat2x4<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x2<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x3<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat3x4<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x2<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x3<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tmat4x4<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tquat<T,P>>$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tvec1<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tvec2<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tvec3<T,P> >$/;"	s	namespace:std
hash	glm/gtx/hash.hpp	/^	struct hash<glm::tvec4<T,P> >$/;"	s	namespace:std
hash_combine	glm/gtx/hash.inl	/^	GLM_INLINE void hash_combine(size_t &seed, size_t hash)$/;"	f	namespace:glm::detail	typeref:typename:GLM_INLINE void
has_preferred_x	nuklear/nuklear.h	/^    unsigned char has_preferred_x;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
has_scrolling	nuklear/nuklear.h	/^    unsigned int has_scrolling;$/;"	m	struct:nk_panel	typeref:typename:unsigned int
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
hdata	glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail	typeref:typename:short
head	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
head	nuklear/nuklear.h	/^    struct nk_tt__hheap_chunk *head;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_tt__hheap_chunk *
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_image	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_line	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_scissor	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_text	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command
header	nuklear/nuklear.h	/^    struct nk_rect header = {0,0,0,0};$/;"	s	function:nk_tree_base
header	nuklear/nuklear.h	/^    struct nk_style_window_header header;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window_header
header_h	nuklear/nuklear.h	/^    float header_h;$/;"	m	struct:nk_panel	typeref:typename:float
height	Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap	typeref:typename:unsigned int
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_baked_font	typeref:typename:float
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_command_text	typeref:typename:float
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_row_layout	typeref:typename:float
height	nuklear/nuklear.h	/^    float height;$/;"	m	struct:nk_user_font	typeref:typename:float
height	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_panel	typeref:typename:float
height	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph	typeref:typename:float
height	nuklear/nuklear.h	/^    int   height;$/;"	m	struct:nk_tt_pack_context	typeref:typename:int
height	nuklear/nuklear.h	/^    int height;$/;"	m	struct:nk_rp_context	typeref:typename:int
height	nuklear/nuklear.h	/^   float height; \/* height of line *\/$/;"	m	struct:nk_text_find	typeref:typename:float
height	nuklear/nuklear_glfw_gl3.h	/^    int width, height;$/;"	m	struct:nk_glfw	typeref:typename:int
hermite	glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType hermite$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
heuristic	nuklear/nuklear.h	/^    int heuristic;$/;"	m	struct:nk_rp_context	typeref:typename:int
hhea	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
highestBitValue	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType highestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
highestBitValue	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> highestBitValue(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
highlight	nuklear/nuklear.h	/^    struct nk_color highlight;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_color
highp	glm/detail/precision.hpp	/^		highp,$/;"	e	enum:glm::precision
highp_bvec1	glm/gtc/vec1.hpp	/^	typedef highp_bvec1_t			highp_bvec1;$/;"	t	namespace:glm	typeref:typename:highp_bvec1_t
highp_bvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<bool, highp>		highp_bvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<bool,highp>
highp_bvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<bool,highp>
highp_bvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<bool,highp>
highp_bvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<bool,highp>
highp_ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,highp>
highp_dmat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, highp>		highp_dmat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,highp>
highp_dmat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, highp>		highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,highp>
highp_dmat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, highp>		highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<double,highp>
highp_dmat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, highp>		highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<double,highp>
highp_dmat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, highp>		highp_dmat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<double,highp>
highp_dmat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, highp>		highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<double,highp>
highp_dmat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, highp>		highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<double,highp>
highp_dmat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, highp>		highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<double,highp>
highp_dmat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, highp>		highp_dmat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,highp>
highp_dmat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, highp>		highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<double,highp>
highp_dmat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, highp>		highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<double,highp>
highp_dmat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, highp>		highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,highp>
highp_dquat	glm/fwd.hpp	/^	typedef tquat<double, highp>	highp_dquat;$/;"	t	namespace:glm	typeref:typename:tquat<double,highp>
highp_dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_dvec1	glm/gtc/vec1.hpp	/^	typedef highp_dvec1_t			highp_dvec1;$/;"	t	namespace:glm	typeref:typename:highp_dvec1_t
highp_dvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<double, highp>	highp_dvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<double,highp>
highp_dvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<double, highp>	highp_dvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<double,highp>
highp_dvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<double, highp>	highp_dvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<double,highp>
highp_dvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<double, highp>	highp_dvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<double,highp>
highp_f32	glm/fwd.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm	typeref:typename:float32
highp_f32mat2	glm/fwd.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
highp_f32mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,highp>
highp_f32mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,highp>
highp_f32mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,highp>
highp_f32mat3	glm/fwd.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
highp_f32mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,highp>
highp_f32mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,highp>
highp_f32mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,highp>
highp_f32mat4	glm/fwd.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
highp_f32mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,highp>
highp_f32mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,highp>
highp_f32mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,highp>
highp_f32quat	glm/fwd.hpp	/^	typedef tquat<f32, highp> highp_f32quat;$/;"	t	namespace:glm	typeref:typename:tquat<f32,highp>
highp_f32vec1	glm/fwd.hpp	/^	typedef tvec1<f32, highp> highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f32,highp>
highp_f32vec2	glm/fwd.hpp	/^	typedef tvec2<f32, highp> highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f32,highp>
highp_f32vec3	glm/fwd.hpp	/^	typedef tvec3<f32, highp> highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f32,highp>
highp_f32vec4	glm/fwd.hpp	/^	typedef tvec4<f32, highp> highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f32,highp>
highp_f64	glm/fwd.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm	typeref:typename:float64
highp_f64mat2	glm/fwd.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x2
highp_f64mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f64,highp>
highp_f64mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f64,highp>
highp_f64mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f64,highp>
highp_f64mat3	glm/fwd.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x3
highp_f64mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f64,highp>
highp_f64mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f64,highp>
highp_f64mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f64,highp>
highp_f64mat4	glm/fwd.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x4
highp_f64mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f64,highp>
highp_f64mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f64,highp>
highp_f64mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f64,highp>
highp_f64quat	glm/fwd.hpp	/^	typedef tquat<f64, highp> highp_f64quat;$/;"	t	namespace:glm	typeref:typename:tquat<f64,highp>
highp_f64vec1	glm/fwd.hpp	/^	typedef tvec1<f64, highp> highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f64,highp>
highp_f64vec2	glm/fwd.hpp	/^	typedef tvec2<f64, highp> highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f64,highp>
highp_f64vec3	glm/fwd.hpp	/^	typedef tvec3<f64, highp> highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f64,highp>
highp_f64vec4	glm/fwd.hpp	/^	typedef tvec4<f64, highp> highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f64,highp>
highp_fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_float	glm/detail/type_float.hpp	/^	typedef highp_float_t		highp_float;$/;"	t	namespace:glm	typeref:typename:highp_float_t
highp_float32	glm/fwd.hpp	/^	typedef detail::float32 highp_float32;$/;"	t	namespace:glm	typeref:typename:detail::float32
highp_float32_t	glm/fwd.hpp	/^	typedef detail::float32 highp_float32_t;$/;"	t	namespace:glm	typeref:typename:detail::float32
highp_float64	glm/fwd.hpp	/^	typedef detail::float64 highp_float64;$/;"	t	namespace:glm	typeref:typename:detail::float64
highp_float64_t	glm/fwd.hpp	/^	typedef detail::float64 highp_float64_t;$/;"	t	namespace:glm	typeref:typename:detail::float64
highp_float_t	glm/detail/type_float.hpp	/^	typedef double				highp_float_t;$/;"	t	namespace:glm	typeref:typename:double
highp_fmat2	glm/fwd.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm	typeref:typename:highp_fmat2x2
highp_fmat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, highp> highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,highp>
highp_fmat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, highp> highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,highp>
highp_fmat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, highp> highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,highp>
highp_fmat3	glm/fwd.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm	typeref:typename:highp_fmat3x3
highp_fmat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, highp> highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,highp>
highp_fmat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, highp> highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,highp>
highp_fmat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, highp> highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,highp>
highp_fmat4	glm/fwd.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm	typeref:typename:highp_fmat4x4
highp_fmat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, highp> highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,highp>
highp_fmat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, highp> highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,highp>
highp_fmat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, highp> highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,highp>
highp_fquat	glm/fwd.hpp	/^	typedef highp_quat			highp_fquat;$/;"	t	namespace:glm	typeref:typename:highp_quat
highp_fvec1	glm/fwd.hpp	/^	typedef tvec1<float, highp> highp_fvec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,highp>
highp_fvec2	glm/fwd.hpp	/^	typedef tvec2<float, highp> highp_fvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,highp>
highp_fvec3	glm/fwd.hpp	/^	typedef tvec3<float, highp> highp_fvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,highp>
highp_fvec4	glm/fwd.hpp	/^	typedef tvec4<float, highp> highp_fvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,highp>
highp_i16	glm/fwd.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_i16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_i16vec1	glm/fwd.hpp	/^	typedef tvec1<i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i16,highp>
highp_i16vec2	glm/fwd.hpp	/^	typedef tvec2<i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i16,highp>
highp_i16vec3	glm/fwd.hpp	/^	typedef tvec3<i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i16,highp>
highp_i16vec4	glm/fwd.hpp	/^	typedef tvec4<i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i16,highp>
highp_i32	glm/fwd.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_i32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_i32vec1	glm/fwd.hpp	/^	typedef tvec1<i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i32,highp>
highp_i32vec2	glm/fwd.hpp	/^	typedef tvec2<i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i32,highp>
highp_i32vec3	glm/fwd.hpp	/^	typedef tvec3<i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i32,highp>
highp_i32vec4	glm/fwd.hpp	/^	typedef tvec4<i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i32,highp>
highp_i64	glm/fwd.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_i64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_i64vec1	glm/fwd.hpp	/^	typedef tvec1<i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i64,highp>
highp_i64vec2	glm/fwd.hpp	/^	typedef tvec2<i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i64,highp>
highp_i64vec3	glm/fwd.hpp	/^	typedef tvec3<i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i64,highp>
highp_i64vec4	glm/fwd.hpp	/^	typedef tvec4<i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i64,highp>
highp_i8	glm/fwd.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_i8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_i8vec1	glm/fwd.hpp	/^	typedef tvec1<i8, highp> highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i8,highp>
highp_i8vec2	glm/fwd.hpp	/^	typedef tvec2<i8, highp> highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i8,highp>
highp_i8vec3	glm/fwd.hpp	/^	typedef tvec3<i8, highp> highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i8,highp>
highp_i8vec4	glm/fwd.hpp	/^	typedef tvec4<i8, highp> highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i8,highp>
highp_imat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, highp>				highp_imat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,highp>
highp_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, highp>				highp_imat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,highp>
highp_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, highp>				highp_imat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<int,highp>
highp_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, highp>				highp_imat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<int,highp>
highp_imat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, highp>				highp_imat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,highp>
highp_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, highp>				highp_imat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<int,highp>
highp_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, highp>				highp_imat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,highp>
highp_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, highp>				highp_imat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<int,highp>
highp_imat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, highp>				highp_imat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,highp>
highp_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, highp>				highp_imat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<int,highp>
highp_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, highp>				highp_imat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<int,highp>
highp_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, highp>				highp_imat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,highp>
highp_int	glm/detail/type_int.hpp	/^	typedef detail::highp_int_t				highp_int;$/;"	t	namespace:glm	typeref:typename:detail::highp_int_t
highp_int16	glm/fwd.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16_t	glm/fwd.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16_t	glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int32	glm/fwd.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32_t	glm/fwd.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32_t	glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int64	glm/fwd.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64_t	glm/fwd.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64_t	glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int8	glm/fwd.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8_t	glm/fwd.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8_t	glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int_t	glm/detail/type_int.hpp	/^	typedef signed int						highp_int_t;$/;"	t	namespace:glm::detail	typeref:typename:signed int
highp_ivec1	glm/gtc/vec1.hpp	/^	typedef highp_ivec1_t			highp_ivec1;$/;"	t	namespace:glm	typeref:typename:highp_ivec1_t
highp_ivec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<int, highp>		highp_ivec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<int,highp>
highp_ivec2	glm/detail/type_vec.hpp	/^	typedef tvec2<int, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:tvec2<int,highp>
highp_ivec3	glm/detail/type_vec.hpp	/^	typedef tvec3<int, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:tvec3<int,highp>
highp_ivec4	glm/detail/type_vec.hpp	/^	typedef tvec4<int, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:tvec4<int,highp>
highp_mat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,highp>
highp_mat2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,highp>
highp_mat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,highp>
highp_mat2x2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,highp>
highp_mat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,highp>
highp_mat2x3	glm/mat2x3.hpp	/^	typedef tmat2x3<float, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,highp>
highp_mat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,highp>
highp_mat2x4	glm/mat2x4.hpp	/^	typedef tmat2x4<float, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,highp>
highp_mat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,highp>
highp_mat3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,highp>
highp_mat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,highp>
highp_mat3x2	glm/mat3x2.hpp	/^	typedef tmat3x2<float, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,highp>
highp_mat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,highp>
highp_mat3x3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,highp>
highp_mat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,highp>
highp_mat3x4	glm/mat3x4.hpp	/^	typedef tmat3x4<float, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,highp>
highp_mat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,highp>
highp_mat4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,highp>
highp_mat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,highp>
highp_mat4x2	glm/mat4x2.hpp	/^	typedef tmat4x2<float, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,highp>
highp_mat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,highp>
highp_mat4x3	glm/mat4x3.hpp	/^	typedef tmat4x3<float, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,highp>
highp_mat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,highp>
highp_mat4x4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,highp>
highp_quat	glm/fwd.hpp	/^	typedef tquat<float, highp>		highp_quat;$/;"	t	namespace:glm	typeref:typename:tquat<float,highp>
highp_u16	glm/fwd.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_u16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_u16vec1	glm/fwd.hpp	/^	typedef tvec1<u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u16,highp>
highp_u16vec2	glm/fwd.hpp	/^	typedef tvec2<u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u16,highp>
highp_u16vec3	glm/fwd.hpp	/^	typedef tvec3<u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u16,highp>
highp_u16vec4	glm/fwd.hpp	/^	typedef tvec4<u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u16,highp>
highp_u32	glm/fwd.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_u32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_u32vec1	glm/fwd.hpp	/^	typedef tvec1<u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u32,highp>
highp_u32vec2	glm/fwd.hpp	/^	typedef tvec2<u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u32,highp>
highp_u32vec3	glm/fwd.hpp	/^	typedef tvec3<u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u32,highp>
highp_u32vec4	glm/fwd.hpp	/^	typedef tvec4<u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u32,highp>
highp_u64	glm/fwd.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_u64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_u64vec1	glm/fwd.hpp	/^	typedef tvec1<u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u64,highp>
highp_u64vec2	glm/fwd.hpp	/^	typedef tvec2<u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u64,highp>
highp_u64vec3	glm/fwd.hpp	/^	typedef tvec3<u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u64,highp>
highp_u64vec4	glm/fwd.hpp	/^	typedef tvec4<u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u64,highp>
highp_u8	glm/fwd.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_u8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_u8vec1	glm/fwd.hpp	/^	typedef tvec1<u8, highp> highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u8,highp>
highp_u8vec2	glm/fwd.hpp	/^	typedef tvec2<u8, highp> highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u8,highp>
highp_u8vec3	glm/fwd.hpp	/^	typedef tvec3<u8, highp> highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u8,highp>
highp_u8vec4	glm/fwd.hpp	/^	typedef tvec4<u8, highp> highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u8,highp>
highp_uint	glm/detail/type_int.hpp	/^	typedef detail::highp_uint_t			highp_uint;$/;"	t	namespace:glm	typeref:typename:detail::highp_uint_t
highp_uint16	glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16_t	glm/fwd.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint32	glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32_t	glm/fwd.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint64	glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64_t	glm/fwd.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint8	glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8_t	glm/fwd.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint_t	glm/detail/type_int.hpp	/^	typedef unsigned int					highp_uint_t;$/;"	t	namespace:glm::detail	typeref:typename:unsigned int
highp_umat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, highp>				highp_umat2;	$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,highp>
highp_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, highp>				highp_umat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,highp>
highp_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, highp>				highp_umat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<uint,highp>
highp_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, highp>				highp_umat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<uint,highp>
highp_umat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, highp>				highp_umat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,highp>
highp_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, highp>				highp_umat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<uint,highp>
highp_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, highp>				highp_umat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,highp>
highp_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, highp>				highp_umat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<uint,highp>
highp_umat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, highp>				highp_umat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,highp>
highp_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, highp>				highp_umat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<uint,highp>
highp_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, highp>				highp_umat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<uint,highp>
highp_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, highp>				highp_umat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,highp>
highp_uvec1	glm/gtc/vec1.hpp	/^	typedef highp_uvec1_t			highp_uvec1;$/;"	t	namespace:glm	typeref:typename:highp_uvec1_t
highp_uvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<uint, highp>		highp_uvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<uint,highp>
highp_uvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<uint, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<uint,highp>
highp_uvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<uint, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<uint,highp>
highp_uvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<uint, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<uint,highp>
highp_vec1	glm/fwd.hpp	/^	typedef tvec1<float, highp> highp_vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,highp>
highp_vec1	glm/gtc/vec1.hpp	/^	typedef highp_vec1_t			highp_vec1;$/;"	t	namespace:glm	typeref:typename:highp_vec1_t
highp_vec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<float, highp>		highp_vec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<float,highp>
highp_vec2	glm/detail/type_vec.hpp	/^	typedef tvec2<float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,highp>
highp_vec2	glm/fwd.hpp	/^	typedef tvec2<float, highp> highp_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,highp>
highp_vec3	glm/detail/type_vec.hpp	/^	typedef tvec3<float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,highp>
highp_vec3	glm/fwd.hpp	/^	typedef tvec3<float, highp> highp_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,highp>
highp_vec4	glm/detail/type_vec.hpp	/^	typedef tvec4<float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,highp>
highp_vec4	glm/fwd.hpp	/^	typedef tvec4<float, highp> highp_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,highp>
hmtx	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_item
hover	nuklear/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_item
hover_active	nuklear/nuklear.h	/^    struct nk_style_item hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon84e4e886080a	typeref:typename:int
hsvColor	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> hsvColor(const tvec3<T, P>& rgbColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
hue_colors	nuklear/nuklear.h	/^        NK_GLOBAL const struct nk_color hue_colors[] = {$/;"	s	function:nk_draw_color_picker
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon84e4e886060a	typeref:typename:stbi__huffman[4]
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon84e4e886060a	typeref:typename:stbi__huffman[4]
hundred_eighty	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED hundred_eighty = _mm_set_ps1(180.f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
hundred_eighty_over_pi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED hundred_eighty_over_pi = _mm_set_ps1(57.2957795130823208767981/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
Hx	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float ****
HXY	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v	typeref:typename:float ******
Hy	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float ******
HYX	main.cpp	/^float **EZX, **EZY, **HXY, **HYX;$/;"	v	typeref:typename:float ********
h_g_data	main.cpp	/^GLubyte *h_g_data;$/;"	v	typeref:typename:GLubyte *
h_oversample	nuklear/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range	typeref:typename:unsigned char
h_oversample	nuklear/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context	typeref:typename:unsigned int
i	glm/detail/intrinsic_common.inl	/^		struct i$/;"	s	union:glm::detail::ieee754_QNAN	file:
i	glm/detail/type_half.inl	/^		uint32 i;$/;"	m	union:glm::detail::uif32	typeref:typename:uint32	file:
i	glm/gtc/bitfield.inl	/^			int16 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int16	file:
i	glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int32	file:
i	glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:int32	file:
i	glm/gtc/bitfield.inl	/^			int64 i;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:int64	file:
i	glm/gtc/bitfield.inl	/^			int8 i;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:int8	file:
i	main.cpp	/^int i, j;$/;"	v	typeref:typename:int
i	nuklear/nuklear.h	/^    union {const nk_uint *i; const nk_byte *b;} conv = {0};$/;"	m	union:nk_murmur_hash::__anon9874a1ee070c	typeref:typename:const nk_uint *
i	nuklear/nuklear.h	/^    union {nk_uint i; float f;} conv = {0};$/;"	m	union:nk_inv_sqrt::__anon9874a1ee060c	typeref:typename:nk_uint
i	nuklear/nuklear.h	/^    union {struct nk_scroll *s; nk_uint *i;} value;$/;"	m	union:nk_group_begin::__anon9874a1ee100c	typeref:typename:nk_uint *
i10i10i10i2	glm/gtc/packing.inl	/^	union i10i10i10i2$/;"	u	namespace:glm::detail	file:
i16	glm/fwd.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
i16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
i16vec1	glm/fwd.hpp	/^	typedef highp_i16vec1			i16vec1;$/;"	t	namespace:glm	typeref:typename:highp_i16vec1
i16vec1	glm/fwd.hpp	/^	typedef lowp_i16vec1			i16vec1;$/;"	t	namespace:glm	typeref:typename:lowp_i16vec1
i16vec1	glm/fwd.hpp	/^	typedef mediump_i16vec1			i16vec1;$/;"	t	namespace:glm	typeref:typename:mediump_i16vec1
i16vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<i16, defaultp> i16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i16,defaultp>
i16vec2	glm/fwd.hpp	/^	typedef highp_i16vec2			i16vec2;$/;"	t	namespace:glm	typeref:typename:highp_i16vec2
i16vec2	glm/fwd.hpp	/^	typedef lowp_i16vec2			i16vec2;$/;"	t	namespace:glm	typeref:typename:lowp_i16vec2
i16vec2	glm/fwd.hpp	/^	typedef mediump_i16vec2			i16vec2;$/;"	t	namespace:glm	typeref:typename:mediump_i16vec2
i16vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<i16, defaultp> i16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i16,defaultp>
i16vec3	glm/fwd.hpp	/^	typedef highp_i16vec3			i16vec3;$/;"	t	namespace:glm	typeref:typename:highp_i16vec3
i16vec3	glm/fwd.hpp	/^	typedef lowp_i16vec3			i16vec3;$/;"	t	namespace:glm	typeref:typename:lowp_i16vec3
i16vec3	glm/fwd.hpp	/^	typedef mediump_i16vec3			i16vec3;$/;"	t	namespace:glm	typeref:typename:mediump_i16vec3
i16vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<i16, defaultp> i16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i16,defaultp>
i16vec4	glm/fwd.hpp	/^	typedef highp_i16vec4			i16vec4;$/;"	t	namespace:glm	typeref:typename:highp_i16vec4
i16vec4	glm/fwd.hpp	/^	typedef lowp_i16vec4			i16vec4;$/;"	t	namespace:glm	typeref:typename:lowp_i16vec4
i16vec4	glm/fwd.hpp	/^	typedef mediump_i16vec4			i16vec4;$/;"	t	namespace:glm	typeref:typename:mediump_i16vec4
i16vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<i16, defaultp> i16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i16,defaultp>
i32	glm/fwd.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
i32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
i32vec1	glm/fwd.hpp	/^	typedef highp_i32vec1			i32vec1;$/;"	t	namespace:glm	typeref:typename:highp_i32vec1
i32vec1	glm/fwd.hpp	/^	typedef lowp_i32vec1			i32vec1;$/;"	t	namespace:glm	typeref:typename:lowp_i32vec1
i32vec1	glm/fwd.hpp	/^	typedef mediump_i32vec1			i32vec1;$/;"	t	namespace:glm	typeref:typename:mediump_i32vec1
i32vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<i32, defaultp> i32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i32,defaultp>
i32vec2	glm/fwd.hpp	/^	typedef highp_i32vec2			i32vec2;$/;"	t	namespace:glm	typeref:typename:highp_i32vec2
i32vec2	glm/fwd.hpp	/^	typedef lowp_i32vec2			i32vec2;$/;"	t	namespace:glm	typeref:typename:lowp_i32vec2
i32vec2	glm/fwd.hpp	/^	typedef mediump_i32vec2			i32vec2;$/;"	t	namespace:glm	typeref:typename:mediump_i32vec2
i32vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<i32, defaultp> i32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i32,defaultp>
i32vec3	glm/fwd.hpp	/^	typedef highp_i32vec3			i32vec3;$/;"	t	namespace:glm	typeref:typename:highp_i32vec3
i32vec3	glm/fwd.hpp	/^	typedef lowp_i32vec3			i32vec3;$/;"	t	namespace:glm	typeref:typename:lowp_i32vec3
i32vec3	glm/fwd.hpp	/^	typedef mediump_i32vec3			i32vec3;$/;"	t	namespace:glm	typeref:typename:mediump_i32vec3
i32vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<i32, defaultp> i32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i32,defaultp>
i32vec4	glm/fwd.hpp	/^	typedef highp_i32vec4			i32vec4;$/;"	t	namespace:glm	typeref:typename:highp_i32vec4
i32vec4	glm/fwd.hpp	/^	typedef lowp_i32vec4			i32vec4;$/;"	t	namespace:glm	typeref:typename:lowp_i32vec4
i32vec4	glm/fwd.hpp	/^	typedef mediump_i32vec4			i32vec4;$/;"	t	namespace:glm	typeref:typename:mediump_i32vec4
i32vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<i32, defaultp> i32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i32,defaultp>
i64	glm/fwd.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
i64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
i64vec1	glm/fwd.hpp	/^	typedef highp_i64vec1			i64vec1;$/;"	t	namespace:glm	typeref:typename:highp_i64vec1
i64vec1	glm/fwd.hpp	/^	typedef lowp_i64vec1			i64vec1;$/;"	t	namespace:glm	typeref:typename:lowp_i64vec1
i64vec1	glm/fwd.hpp	/^	typedef mediump_i64vec1			i64vec1;$/;"	t	namespace:glm	typeref:typename:mediump_i64vec1
i64vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<i64, defaultp> i64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i64,defaultp>
i64vec2	glm/fwd.hpp	/^	typedef highp_i64vec2			i64vec2;$/;"	t	namespace:glm	typeref:typename:highp_i64vec2
i64vec2	glm/fwd.hpp	/^	typedef lowp_i64vec2			i64vec2;$/;"	t	namespace:glm	typeref:typename:lowp_i64vec2
i64vec2	glm/fwd.hpp	/^	typedef mediump_i64vec2			i64vec2;$/;"	t	namespace:glm	typeref:typename:mediump_i64vec2
i64vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<i64, defaultp> i64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i64,defaultp>
i64vec3	glm/fwd.hpp	/^	typedef highp_i64vec3			i64vec3;$/;"	t	namespace:glm	typeref:typename:highp_i64vec3
i64vec3	glm/fwd.hpp	/^	typedef lowp_i64vec3			i64vec3;$/;"	t	namespace:glm	typeref:typename:lowp_i64vec3
i64vec3	glm/fwd.hpp	/^	typedef mediump_i64vec3			i64vec3;$/;"	t	namespace:glm	typeref:typename:mediump_i64vec3
i64vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<i64, defaultp> i64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i64,defaultp>
i64vec4	glm/fwd.hpp	/^	typedef highp_i64vec4			i64vec4;$/;"	t	namespace:glm	typeref:typename:highp_i64vec4
i64vec4	glm/fwd.hpp	/^	typedef lowp_i64vec4			i64vec4;$/;"	t	namespace:glm	typeref:typename:lowp_i64vec4
i64vec4	glm/fwd.hpp	/^	typedef mediump_i64vec4			i64vec4;$/;"	t	namespace:glm	typeref:typename:mediump_i64vec4
i64vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<i64, defaultp> i64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i64,defaultp>
i8	glm/fwd.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
i8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
i8vec1	glm/fwd.hpp	/^	typedef highp_i8vec1			i8vec1;$/;"	t	namespace:glm	typeref:typename:highp_i8vec1
i8vec1	glm/fwd.hpp	/^	typedef lowp_i8vec1				i8vec1;$/;"	t	namespace:glm	typeref:typename:lowp_i8vec1
i8vec1	glm/fwd.hpp	/^	typedef mediump_i8vec1			i8vec1;$/;"	t	namespace:glm	typeref:typename:mediump_i8vec1
i8vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<i8, defaultp> i8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i8,defaultp>
i8vec2	glm/fwd.hpp	/^	typedef highp_i8vec2			i8vec2;$/;"	t	namespace:glm	typeref:typename:highp_i8vec2
i8vec2	glm/fwd.hpp	/^	typedef lowp_i8vec2				i8vec2;$/;"	t	namespace:glm	typeref:typename:lowp_i8vec2
i8vec2	glm/fwd.hpp	/^	typedef mediump_i8vec2			i8vec2;$/;"	t	namespace:glm	typeref:typename:mediump_i8vec2
i8vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<i8, defaultp> i8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i8,defaultp>
i8vec3	glm/fwd.hpp	/^	typedef highp_i8vec3			i8vec3;$/;"	t	namespace:glm	typeref:typename:highp_i8vec3
i8vec3	glm/fwd.hpp	/^	typedef lowp_i8vec3				i8vec3;$/;"	t	namespace:glm	typeref:typename:lowp_i8vec3
i8vec3	glm/fwd.hpp	/^	typedef mediump_i8vec3			i8vec3;$/;"	t	namespace:glm	typeref:typename:mediump_i8vec3
i8vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<i8, defaultp> i8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i8,defaultp>
i8vec4	glm/fwd.hpp	/^	typedef highp_i8vec4			i8vec4;$/;"	t	namespace:glm	typeref:typename:highp_i8vec4
i8vec4	glm/fwd.hpp	/^	typedef lowp_i8vec4				i8vec4;$/;"	t	namespace:glm	typeref:typename:lowp_i8vec4
i8vec4	glm/fwd.hpp	/^	typedef mediump_i8vec4			i8vec4;	$/;"	t	namespace:glm	typeref:typename:mediump_i8vec4
i8vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<i8, defaultp> i8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i8,defaultp>
id	glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	typeref:typename:std::locale::id
id	glm/gtx/io.inl	/^	template <typename CTy> std::locale::id format_punct<CTy>::id;$/;"	m	class:glm::io::format_punct<CTy>	typeref:typename:std::locale::id
id	nuklear/nuklear.h	/^    int id;$/;"	m	struct:nk_rp_rect	typeref:typename:int
id	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon9874a1ee020c	typeref:typename:int
id	stb_image.h	/^      int id;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c0a	typeref:typename:stbi_uc *
ieee754_QNAN	glm/detail/intrinsic_common.inl	/^		ieee754_QNAN() : f(0.0)\/*, mantissa(0x7FFFFF), exp(0xFF), sign(0x0)*\/ {}$/;"	f	union:glm::detail::ieee754_QNAN	file:
ieee754_QNAN	glm/detail/intrinsic_common.inl	/^	union ieee754_QNAN$/;"	u	namespace:glm::detail	file:
ieee_double_shape_type	glm/gtc/ulp.inl	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anon2dbcfbc3020c	file:
ieee_float_shape_type	glm/gtc/ulp.inl	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anon2dbcfbc3010c	file:
image	nuklear/nuklear.h	/^    struct nk_image image;$/;"	m	union:nk_style_item_data	typeref:struct:nk_image
image_padding	nuklear/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_vec2
image_padding	nuklear/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_vec2
imat2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:highp_imat2
imat2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2								imat2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2
imat2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2							imat2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:highp_imat2x2
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x2
imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x2							imat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x2
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:highp_imat2x3
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x3
imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x3							imat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x3
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:highp_imat2x4
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat2x4
imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat2x4							imat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat2x4
imat3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:highp_imat3
imat3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3								imat3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3
imat3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3							imat3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:highp_imat3x2
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x2
imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x2							imat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x2
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:highp_imat3x3
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x3
imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x3							imat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x3
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:highp_imat3x4
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat3x4
imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat3x4							imat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat3x4
imat4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:highp_imat4
imat4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4								imat4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4
imat4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4							imat4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:highp_imat4x2
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x2
imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x2							imat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x2
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:highp_imat4x3
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x3
imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x3							imat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x3
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:highp_imat4x4
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_imat4x4
imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_imat4x4							imat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_imat4x4
img	nuklear/nuklear.h	/^    struct nk_image img;$/;"	m	struct:nk_command_image	typeref:struct:nk_image
img	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_image
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi_uc *
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi_uc **
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi_uc *
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon84e4e886060a	typeref:struct:__anon84e4e886060a::__anon84e4e886070a[4]
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon84e4e886030a	typeref:typename:int
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon84e4e886030a	typeref:typename:int
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi__uint32
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi__uint32
imulExtended	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(int x, int y, int & msb, int & lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
imulExtended	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(vecType<int, P> const & x, vecType<int, P> const & y, vecT/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
in	glm/detail/func_packing.inl	/^			double in;$/;"	m	union:glm::unpackDouble2x32::__anone26ffacf0a0c	typeref:typename:double	file:
in	glm/detail/func_packing.inl	/^			i16  in[2];$/;"	m	union:glm::packHalf2x16::__anone26ffacf0b0c	typeref:typename:i16[2]	file:
in	glm/detail/func_packing.inl	/^			i16  in[2];$/;"	m	union:glm::packSnorm2x16::__anone26ffacf030c	typeref:typename:i16[2]	file:
in	glm/detail/func_packing.inl	/^			i8   in[4];$/;"	m	union:glm::packSnorm4x8::__anone26ffacf070c	typeref:typename:i8[4]	file:
in	glm/detail/func_packing.inl	/^			u16  in[2];$/;"	m	union:glm::packUnorm2x16::__anone26ffacf010c	typeref:typename:u16[2]	file:
in	glm/detail/func_packing.inl	/^			u8   in[4];$/;"	m	union:glm::packUnorm4x8::__anone26ffacf050c	typeref:typename:u8[4]	file:
in	glm/detail/func_packing.inl	/^			uint   in[2];$/;"	m	union:glm::packDouble2x32::__anone26ffacf090c	typeref:typename:uint[2]	file:
in	glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackHalf2x16::__anone26ffacf0c0c	typeref:typename:uint	file:
in	glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm2x16::__anone26ffacf040c	typeref:typename:uint	file:
in	glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm4x8::__anone26ffacf080c	typeref:typename:uint	file:
in	glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm2x16::__anone26ffacf020c	typeref:typename:uint	file:
in	glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm4x8::__anone26ffacf060c	typeref:typename:uint	file:
incrt	main.cpp	/^int incrt = 1;$/;"	v	typeref:typename:int
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_button
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_button
inc_button	nuklear/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_button
inc_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_symbol_type
inc_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_symbol_type
indent	nuklear/nuklear.h	/^    float indent;$/;"	m	struct:nk_style_tab	typeref:typename:float
index	nuklear/nuklear.h	/^    int index;$/;"	m	struct:nk_chart_slot	typeref:typename:int
index	nuklear/nuklear.h	/^    int index;$/;"	m	struct:nk_row_layout	typeref:typename:int
indexToLocFormat	nuklear/nuklear.h	/^    int indexToLocFormat; \/* format needed to map from glyph index to glyph *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
index_map	nuklear/nuklear.h	/^    int index_map; \/* a cmap mapping for our chosen character encoding *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
infinitePerspective	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> infinitePerspective$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
info	nuklear/nuklear.h	/^    struct nk_baked_font info;$/;"	m	struct:nk_font	typeref:struct:nk_baked_font
info	nuklear/nuklear.h	/^    struct nk_tt_fontinfo info;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_tt_fontinfo
initialized	nuklear/nuklear.h	/^    unsigned char initialized;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
init_mode	nuklear/nuklear.h	/^    int init_mode;$/;"	m	struct:nk_rp_context	typeref:typename:int
input	nuklear/nuklear.h	/^    struct nk_input input;$/;"	m	struct:nk_context	typeref:struct:nk_input
insert_length	nuklear/nuklear.h	/^   short insert_length;$/;"	m	struct:nk_text_undo_record	typeref:typename:short
int1	glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compati/;"	t	namespace:glm	typeref:typename:int
int16	glm/detail/type_int.hpp	/^		typedef std::int16_t				int16;$/;"	t	namespace:glm::detail	typeref:typename:std::int16_t
int16	glm/detail/type_int.hpp	/^	typedef detail::int16					int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16	glm/fwd.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16_t	glm/fwd.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16_t	glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
int1x1	glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compa/;"	t	namespace:glm	typeref:typename:int
int2	glm/gtx/compatibility.hpp	/^	typedef tvec2<int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec2<int,highp>
int2x2	glm/gtx/compatibility.hpp	/^	typedef tmat2x2<int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat2x2<int,highp>
int2x3	glm/gtx/compatibility.hpp	/^	typedef tmat2x3<int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat2x3<int,highp>
int2x4	glm/gtx/compatibility.hpp	/^	typedef tmat2x4<int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat2x4<int,highp>
int3	glm/gtx/compatibility.hpp	/^	typedef tvec3<int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec3<int,highp>
int32	glm/detail/type_int.hpp	/^		typedef std::int32_t				int32;$/;"	t	namespace:glm::detail	typeref:typename:std::int32_t
int32	glm/detail/type_int.hpp	/^	typedef detail::int32					int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32	glm/fwd.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32_t	glm/fwd.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32_t	glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
int3x2	glm/gtx/compatibility.hpp	/^	typedef tmat3x2<int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat3x2<int,highp>
int3x3	glm/gtx/compatibility.hpp	/^	typedef tmat3x3<int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat3x3<int,highp>
int3x4	glm/gtx/compatibility.hpp	/^	typedef tmat3x4<int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat3x4<int,highp>
int4	glm/gtx/compatibility.hpp	/^	typedef tvec4<int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM_/;"	t	namespace:glm	typeref:typename:tvec4<int,highp>
int4x2	glm/gtx/compatibility.hpp	/^	typedef tmat4x2<int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat4x2<int,highp>
int4x3	glm/gtx/compatibility.hpp	/^	typedef tmat4x3<int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat4x3<int,highp>
int4x4	glm/gtx/compatibility.hpp	/^	typedef tmat4x4<int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (Fr/;"	t	namespace:glm	typeref:typename:tmat4x4<int,highp>
int64	glm/detail/type_int.hpp	/^		typedef std::int64_t				int64;$/;"	t	namespace:glm::detail	typeref:typename:std::int64_t
int64	glm/detail/type_int.hpp	/^	typedef detail::int64					int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64	glm/fwd.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64_t	glm/fwd.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64_t	glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
int8	glm/detail/type_int.hpp	/^		typedef std::int8_t					int8;$/;"	t	namespace:glm::detail	typeref:typename:std::int8_t
int8	glm/detail/type_int.hpp	/^	typedef detail::int8					int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8	glm/fwd.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8_t	glm/fwd.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8_t	glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
intermediate	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> intermediate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
interpolate	glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> interpolate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
intersection	glm/detail/dummy.cpp	/^struct intersection$/;"	s	file:
intersectLineSphere	glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineSphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectLineTriangle	glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayPlane	glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayPlane$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRaySphere	glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRaySphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayTriangle	glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
int_t	glm/detail/type_int.hpp	/^	typedef highp_int					int_t;$/;"	t	namespace:glm	typeref:typename:highp_int
int_t	glm/detail/type_int.hpp	/^	typedef lowp_int					int_t;$/;"	t	namespace:glm	typeref:typename:lowp_int
int_t	glm/detail/type_int.hpp	/^	typedef mediump_int					int_t;$/;"	t	namespace:glm	typeref:typename:mediump_int
inverse	glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER matType<T, P> inverse(matType<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER matType<T,P>
inverse	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> inverse(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
inverse	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> inverse(tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
inverse	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER detail::fmat4x4SIMD inverse(detail::fmat4x4SIMD const & m)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER detail::fmat4x4SIMD
inverse	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD inverse$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
inversesqrt	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType inversesqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
inversesqrt	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> inversesqrt(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
inversesqrt	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD inversesqrt(detail::fvec4SIMD const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
inverseTranspose	glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> inverseTranspose(tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
inverseTranspose	glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> inverseTranspose(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
inverseTranspose	glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> inverseTranspose(tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
invert	nuklear/nuklear.h	/^    int invert;$/;"	m	struct:nk_tt__edge	typeref:typename:int
io	glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
io	glm/gtx/io.inl	/^namespace io$/;"	n	namespace:glm	file:
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon84e4e886030a	typeref:typename:stbi_io_callbacks
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon84e4e886030a	typeref:typename:void *
isCompNull	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER tvec2<bool, P> isCompNull$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<bool,P>
isCompNull	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER tvec3<bool, P> isCompNull$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<bool,P>
isCompNull	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> isCompNull$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
isCompNull	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> isCompNull$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
isdenormal	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER bool isdenormal(T const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isdenormal	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename tvec1<T, P>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tvec1<T,P>::bool_type
isdenormal	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename tvec2<T, P>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tvec2<T,P>::bool_type
isdenormal	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename tvec3<T, P>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tvec3<T,P>::bool_type
isdenormal	glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename tvec4<T, P>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tvec4<T,P>::bool_type
isfinite	glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER bool isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isfinite	glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER tvec1<bool, P> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<bool,P>
isfinite	glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER tvec2<bool, P> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<bool,P>
isfinite	glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER tvec3<bool, P> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<bool,P>
isfinite	glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
isIdentity	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isIdentity(matType<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isInUse	Program.cpp	/^bool Program::isInUse() const {$/;"	f	class:Program	typeref:typename:bool
isMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER bool isMultiple(genType Value, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> isMultiple(vecType<T, P> const & Value, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
isMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> isMultiple(vecType<T, P> const & Value, vecType<T, P> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
isNormalized	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(tmat2x2<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(tmat3x3<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(tmat4x4<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(tmat2x2<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(tmat3x3<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(tmat4x4<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isOrthogonal	glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isOrthogonal(matType<T, P> const & m, T const & epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER bool isPowerOfTwo(genType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> isPowerOfTwo(vecType<T, P> const & Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
is_matrix	glm/detail/type_gentype.inl	/^bool base<vT, cT, rT, pT>::is_matrix()$/;"	f	class:glm::detail::base	typeref:typename:bool
is_scalar	glm/detail/type_gentype.inl	/^bool base<vT, cT, rT, pT>::is_scalar()$/;"	f	class:glm::detail::base	typeref:typename:bool
is_vector	glm/detail/type_gentype.hpp	/^	bool genType<VALTYPE, TYPE>::is_vector()$/;"	f	class:glm::detail::genType	typeref:typename:bool
is_vector	glm/detail/type_gentype.inl	/^bool base<vT, cT, rT, pT>::is_vector()$/;"	f	class:glm::detail::base	typeref:typename:bool
item	nuklear/nuklear.h	/^    struct nk_rect item = {0,0,0,0};$/;"	s	function:nk_chart_push_column
item	nuklear/nuklear.h	/^    struct nk_rect item;$/;"	m	struct:nk_row_layout	typeref:struct:nk_rect
item_height	nuklear/nuklear.h	/^    float item_width, item_height;$/;"	m	struct:nk_row_layout	typeref:typename:float
item_offset	nuklear/nuklear.h	/^    float item_offset;$/;"	m	struct:nk_row_layout	typeref:typename:float
item_width	nuklear/nuklear.h	/^    float item_width, item_height;$/;"	m	struct:nk_row_layout	typeref:typename:float
ivec1	glm/gtc/vec1.hpp	/^	typedef highp_ivec1			ivec1;$/;"	t	namespace:glm	typeref:typename:highp_ivec1
ivec1	glm/gtc/vec1.hpp	/^	typedef lowp_ivec1			ivec1;$/;"	t	namespace:glm	typeref:typename:lowp_ivec1
ivec1	glm/gtc/vec1.hpp	/^	typedef mediump_ivec1		ivec1;$/;"	t	namespace:glm	typeref:typename:mediump_ivec1
ivec2	glm/detail/type_vec.hpp	/^	typedef highp_ivec2			ivec2;$/;"	t	namespace:glm	typeref:typename:highp_ivec2
ivec2	glm/detail/type_vec.hpp	/^	typedef lowp_ivec2			ivec2;$/;"	t	namespace:glm	typeref:typename:lowp_ivec2
ivec2	glm/detail/type_vec.hpp	/^	typedef mediump_ivec2		ivec2;$/;"	t	namespace:glm	typeref:typename:mediump_ivec2
ivec3	glm/detail/type_vec.hpp	/^	typedef highp_ivec3			ivec3;$/;"	t	namespace:glm	typeref:typename:highp_ivec3
ivec3	glm/detail/type_vec.hpp	/^	typedef lowp_ivec3			ivec3;$/;"	t	namespace:glm	typeref:typename:lowp_ivec3
ivec3	glm/detail/type_vec.hpp	/^	typedef mediump_ivec3		ivec3;$/;"	t	namespace:glm	typeref:typename:mediump_ivec3
ivec4	glm/detail/type_vec.hpp	/^	typedef highp_ivec4			ivec4;$/;"	t	namespace:glm	typeref:typename:highp_ivec4
ivec4	glm/detail/type_vec.hpp	/^	typedef lowp_ivec4			ivec4;$/;"	t	namespace:glm	typeref:typename:lowp_ivec4
ivec4	glm/detail/type_vec.hpp	/^	typedef mediump_ivec4		ivec4;$/;"	t	namespace:glm	typeref:typename:mediump_ivec4
j	main.cpp	/^int i, j;$/;"	v	typeref:typename:int
kern	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
keyboard	nuklear/nuklear.h	/^    struct nk_keyboard keyboard;$/;"	m	struct:nk_input	typeref:struct:nk_keyboard
keys	nuklear/nuklear.h	/^    nk_hash keys[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table	typeref:typename:nk_hash[]
keys	nuklear/nuklear.h	/^    struct nk_key keys[NK_KEY_MAX];$/;"	m	struct:nk_keyboard	typeref:struct:nk_key[]
kt	main.cpp	/^int kt = 1;$/;"	v	typeref:typename:int
L	main.cpp	/^int L = 12;$/;"	v	typeref:typename:int
l1Norm	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
label	nuklear/nuklear.h	/^            struct nk_rect label = {0,0,0,0};$/;"	s	function:nk_panel_begin
LabelFalse	glm/gtx/string_cast.inl	/^	static const char* LabelFalse = "false";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LabelTrue	glm/gtx/string_cast.inl	/^	static const char* LabelTrue = "true";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_property	typeref:struct:nk_color
label_active	nuklear/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_color
label_hover	nuklear/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_color
label_normal	nuklear/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_color
label_padding	nuklear/nuklear.h	/^    struct nk_vec2 label_padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_vec2
lambda	main.cpp	/^float lambda;$/;"	v	typeref:typename:float
last	nuklear/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer	typeref:typename:nk_size
last	nuklear/nuklear.h	/^    nk_size last;$/;"	m	struct:nk_popup_buffer	typeref:typename:nk_size
last	nuklear/nuklear.h	/^    struct nk_vec2 last;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_vec2
last_widget_state	nuklear/nuklear.h	/^    nk_flags last_widget_state;$/;"	m	struct:nk_context	typeref:typename:nk_flags
LaunchCPUKernel	main.cpp	/^void LaunchCPUKernel()$/;"	f	typeref:typename:void
layout	nuklear/nuklear.h	/^    struct nk_panel *layout;$/;"	m	struct:nk_window	typeref:struct:nk_panel *
left	nuklear/nuklear.h	/^    struct nk_color left;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_color
leftHanded	glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool leftHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
len	nuklear/nuklear.h	/^    int len; \/* in codepoints\/runes\/glyphs *\/$/;"	m	struct:nk_str	typeref:typename:int
length	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType length(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x2<T, P>::length_type tmat2x2<T, P>::length() c/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x2<T,P>::length_type
length	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x3<T, P>::length_type tmat2x3<T, P>::length() c/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x3<T,P>::length_type
length	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x4<T, P>::length_type tmat2x4<T, P>::length() c/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x4<T,P>::length_type
length	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x2<T, P>::length_type tmat3x2<T, P>::length() c/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x2<T,P>::length_type
length	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x3<T, P>::length_type tmat3x3<T, P>::length() c/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x3<T,P>::length_type
length	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x4<T, P>::length_type tmat3x4<T, P>::length() c/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x4<T,P>::length_type
length	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x2<T, P>::length_type tmat4x2<T, P>::length() c/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x2<T,P>::length_type
length	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x3<T, P>::length_type tmat4x3<T, P>::length() c/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x3<T,P>::length_type
length	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x4<T, P>::length_type tmat4x4<T, P>::length() c/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x4<T,P>::length_type
length	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec1<T, P>::length_type tvec1<T, P>::length() const$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec1<T,P>::length_type
length	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec2<T, P>::length_type tvec2<T, P>::length() const$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec2<T,P>::length_type
length	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec3<T, P>::length_type tvec3<T, P>::length() const$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec3<T,P>::length_type
length	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec4<T, P>::length_type tvec4<T, P>::length() const$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec4<T,P>::length_type
length	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tquat<T, P>::length_type tquat<T, P>::length() const$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tquat<T,P>::length_type
length	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T length(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER length_t fmat4x4SIMD::length() const$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER length_t
length	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER float length$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
length	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER float length$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
length	nuklear/nuklear.h	/^    int length;$/;"	m	struct:nk_command_text	typeref:typename:int
length	nuklear/nuklear.h	/^    int length;$/;"	m	struct:nk_property_state	typeref:typename:int
length	nuklear/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find	typeref:typename:int
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon84e4e8860b0a	typeref:typename:stbi__uint32
length2	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER genType length2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length2	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T length2(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length2	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T length2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length4	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD length4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
length_t	glm/detail/setup.hpp	/^		typedef int length_t;$/;"	t	namespace:glm	typeref:typename:int
length_t	glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm	typeref:typename:size_t
length_type	glm/detail/type_mat2x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:length_t
length_type	glm/detail/type_mat2x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:length_t
length_type	glm/detail/type_mat2x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:length_t
length_type	glm/detail/type_mat3x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:length_t
length_type	glm/detail/type_mat3x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:length_t
length_type	glm/detail/type_mat3x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:length_t
length_type	glm/detail/type_mat4x2.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:length_t
length_type	glm/detail/type_mat4x3.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:length_t
length_type	glm/detail/type_mat4x4.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:length_t
length_type	glm/detail/type_vec1.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tvec1	typeref:typename:length_t
length_type	glm/gtc/quaternion.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tquat	typeref:typename:length_t
length_type	glm/gtx/dual_quaternion.hpp	/^			typedef length_t length_type;$/;"	t	struct:glm::tdualquat	typeref:typename:length_t
lerp	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> lerp(tquat<T, P> const & x, tquat<T, P> const & y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
lerp	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> lerp(const tvec2<T, P>& x, co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
lerp	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> lerp(const tvec3<T, P>& x, co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
lerp	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> lerp(const tvec4<T, P>& x, co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
lerp	glm/gtx/compatibility.hpp	/^	template <typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}											/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lerp	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> lerp(tdualquat<T, P> const & x, tdualquat<T, P> const & y, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
lerp	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD lerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
lessThan	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> lessThan(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
lessThan	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> lessThan(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
lessThan	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
lessThanEqual	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> lessThanEqual(vecType<T, P> const & x, vecType<T, P> const /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
lessThanEqual	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> lessThanEqual(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
lessThanEqual	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
light	glm/detail/dummy.cpp	/^struct light$/;"	s	file:
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon84e4e886080a	typeref:typename:stbi_uc *
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon84e4e886080a	typeref:typename:stbi_uc **
linearAttenuation	glm/detail/dummy.cpp	/^	float linearAttenuation; \/\/ K1$/;"	m	struct:light	typeref:typename:float	file:
linearGradient	glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T linearGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
linearRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType linearRand(genType Min, genType Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> linearRand(vecType<T, P> const & Min, vecType<T, P> const & Ma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:stbi_uc *
line_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing line_AA; \/* line anti-aliasing flag can be turned off if you are tigh/;"	m	struct:nk_convert_config	typeref:enum:nk_anti_aliasing
line_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing line_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_anti_aliasing
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_arc	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_circle	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_curve	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_line	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polygon	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polyline	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_rect	typeref:typename:unsigned short
line_thickness	nuklear/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_triangle	typeref:typename:unsigned short
literal	glm/gtx/string_cast.inl	/^	struct literal$/;"	s	namespace:glm::detail	file:
literal	glm/gtx/string_cast.inl	/^	struct literal<int64_t, false>$/;"	s	namespace:glm::detail	file:
literal	glm/gtx/string_cast.inl	/^	struct literal<T, true>$/;"	s	namespace:glm::detail	file:
literal	glm/gtx/string_cast.inl	/^	struct literal<uint64_t, false>$/;"	s	namespace:glm::detail	file:
ln_ln_two	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_ten	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ten()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_two	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
LoadShaders	main.cpp	/^void LoadShaders()$/;"	f	typeref:typename:void
LoadTexture	main.cpp	/^void LoadTexture()$/;"	f	typeref:typename:void
LoadTriangle	main.cpp	/^void LoadTriangle()$/;"	f	typeref:typename:void
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
loca	nuklear/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
locale_	glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:locale_type
locale_type	glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::locale const
log	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> log(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
log	glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER genType log(genType const & x, genType const & base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log	glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> log(vecType<T, P> const & x, vecType<T, P> const & base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
log	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> log$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
log2	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType log2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log2	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> log2(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
lookAt	Camera.cpp	/^void Camera::lookAt(glm::vec3 position) {$/;"	f	class:Camera	typeref:typename:void
lookAt	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> lookAt$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
lookAtLH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> lookAtLH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
lookAtRH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> lookAtRH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
lowp	glm/detail/precision.hpp	/^		lowp,$/;"	e	enum:glm::precision
lowp_bvec1	glm/gtc/vec1.hpp	/^	typedef lowp_bvec1_t			lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:lowp_bvec1_t
lowp_bvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<bool, lowp>		lowp_bvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<bool,lowp>
lowp_bvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<bool,lowp>
lowp_bvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<bool,lowp>
lowp_bvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<bool,lowp>
lowp_ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,lowp>
lowp_dmat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,lowp>
lowp_dmat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,lowp>
lowp_dmat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<double,lowp>
lowp_dmat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<double,lowp>
lowp_dmat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,lowp>
lowp_dmat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<double,lowp>
lowp_dmat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<double,lowp>
lowp_dmat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<double,lowp>
lowp_dmat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,lowp>
lowp_dmat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<double,lowp>
lowp_dmat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<double,lowp>
lowp_dmat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,lowp>
lowp_dquat	glm/fwd.hpp	/^	typedef tquat<double, lowp>		lowp_dquat;$/;"	t	namespace:glm	typeref:typename:tquat<double,lowp>
lowp_dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_dvec1	glm/gtc/vec1.hpp	/^	typedef lowp_dvec1_t			lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:lowp_dvec1_t
lowp_dvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<double, lowp>		lowp_dvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<double,lowp>
lowp_dvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<double, lowp>		lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<double,lowp>
lowp_dvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<double, lowp>		lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<double,lowp>
lowp_dvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<double, lowp>		lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<double,lowp>
lowp_f32	glm/fwd.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_f32mat2	glm/fwd.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
lowp_f32mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,lowp>
lowp_f32mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,lowp>
lowp_f32mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,lowp>
lowp_f32mat3	glm/fwd.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
lowp_f32mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,lowp>
lowp_f32mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,lowp>
lowp_f32mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,lowp>
lowp_f32mat4	glm/fwd.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
lowp_f32mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,lowp>
lowp_f32mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,lowp>
lowp_f32mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,lowp>
lowp_f32quat	glm/fwd.hpp	/^	typedef tquat<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:tquat<f32,lowp>
lowp_f32vec1	glm/fwd.hpp	/^	typedef tvec1<f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f32,lowp>
lowp_f32vec2	glm/fwd.hpp	/^	typedef tvec2<f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f32,lowp>
lowp_f32vec3	glm/fwd.hpp	/^	typedef tvec3<f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f32,lowp>
lowp_f32vec4	glm/fwd.hpp	/^	typedef tvec4<f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f32,lowp>
lowp_f64	glm/fwd.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_f64mat2	glm/fwd.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x2
lowp_f64mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f64,lowp>
lowp_f64mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f64,lowp>
lowp_f64mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f64,lowp>
lowp_f64mat3	glm/fwd.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x3
lowp_f64mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f64,lowp>
lowp_f64mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f64,lowp>
lowp_f64mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f64,lowp>
lowp_f64mat4	glm/fwd.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x4
lowp_f64mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f64,lowp>
lowp_f64mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f64,lowp>
lowp_f64mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f64,lowp>
lowp_f64quat	glm/fwd.hpp	/^	typedef tquat<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:tquat<f64,lowp>
lowp_f64vec1	glm/fwd.hpp	/^	typedef tvec1<f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f64,lowp>
lowp_f64vec2	glm/fwd.hpp	/^	typedef tvec2<f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f64,lowp>
lowp_f64vec3	glm/fwd.hpp	/^	typedef tvec3<f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f64,lowp>
lowp_f64vec4	glm/fwd.hpp	/^	typedef tvec4<f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f64,lowp>
lowp_fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_float	glm/detail/type_float.hpp	/^	typedef lowp_float_t		lowp_float;$/;"	t	namespace:glm	typeref:typename:lowp_float_t
lowp_float32	glm/fwd.hpp	/^	typedef detail::float32 lowp_float32;$/;"	t	namespace:glm	typeref:typename:detail::float32
lowp_float32_t	glm/fwd.hpp	/^	typedef detail::float32 lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:detail::float32
lowp_float64	glm/fwd.hpp	/^	typedef detail::float64 lowp_float64;$/;"	t	namespace:glm	typeref:typename:detail::float64
lowp_float64_t	glm/fwd.hpp	/^	typedef detail::float64 lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:detail::float64
lowp_float_t	glm/detail/type_float.hpp	/^	typedef float				lowp_float_t;$/;"	t	namespace:glm	typeref:typename:float
lowp_fmat2	glm/fwd.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:lowp_fmat2x2
lowp_fmat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,lowp>
lowp_fmat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,lowp>
lowp_fmat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,lowp>
lowp_fmat3	glm/fwd.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:lowp_fmat3x3
lowp_fmat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,lowp>
lowp_fmat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,lowp>
lowp_fmat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,lowp>
lowp_fmat4	glm/fwd.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:lowp_fmat4x4
lowp_fmat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,lowp>
lowp_fmat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,lowp>
lowp_fmat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,lowp>
lowp_fquat	glm/fwd.hpp	/^	typedef lowp_quat			lowp_fquat;$/;"	t	namespace:glm	typeref:typename:lowp_quat
lowp_fvec1	glm/fwd.hpp	/^	typedef tvec1<float, lowp> lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,lowp>
lowp_fvec2	glm/fwd.hpp	/^	typedef tvec2<float, lowp> lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,lowp>
lowp_fvec3	glm/fwd.hpp	/^	typedef tvec3<float, lowp> lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,lowp>
lowp_fvec4	glm/fwd.hpp	/^	typedef tvec4<float, lowp> lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,lowp>
lowp_i16	glm/fwd.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_i16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_i16vec1	glm/fwd.hpp	/^	typedef tvec1<i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i16,lowp>
lowp_i16vec2	glm/fwd.hpp	/^	typedef tvec2<i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i16,lowp>
lowp_i16vec3	glm/fwd.hpp	/^	typedef tvec3<i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i16,lowp>
lowp_i16vec4	glm/fwd.hpp	/^	typedef tvec4<i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i16,lowp>
lowp_i32	glm/fwd.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_i32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_i32vec1	glm/fwd.hpp	/^	typedef tvec1<i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i32,lowp>
lowp_i32vec2	glm/fwd.hpp	/^	typedef tvec2<i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i32,lowp>
lowp_i32vec3	glm/fwd.hpp	/^	typedef tvec3<i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i32,lowp>
lowp_i32vec4	glm/fwd.hpp	/^	typedef tvec4<i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i32,lowp>
lowp_i64	glm/fwd.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_i64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_i64vec1	glm/fwd.hpp	/^	typedef tvec1<i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i64,lowp>
lowp_i64vec2	glm/fwd.hpp	/^	typedef tvec2<i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i64,lowp>
lowp_i64vec3	glm/fwd.hpp	/^	typedef tvec3<i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i64,lowp>
lowp_i64vec4	glm/fwd.hpp	/^	typedef tvec4<i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i64,lowp>
lowp_i8	glm/fwd.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_i8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_i8vec1	glm/fwd.hpp	/^	typedef tvec1<i8, lowp> lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i8,lowp>
lowp_i8vec2	glm/fwd.hpp	/^	typedef tvec2<i8, lowp> lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i8,lowp>
lowp_i8vec3	glm/fwd.hpp	/^	typedef tvec3<i8, lowp> lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i8,lowp>
lowp_i8vec4	glm/fwd.hpp	/^	typedef tvec4<i8, lowp> lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i8,lowp>
lowp_imat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, lowp>				lowp_imat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,lowp>
lowp_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,lowp>
lowp_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<int,lowp>
lowp_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<int,lowp>
lowp_imat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, lowp>				lowp_imat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,lowp>
lowp_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<int,lowp>
lowp_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,lowp>
lowp_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<int,lowp>
lowp_imat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, lowp>				lowp_imat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,lowp>
lowp_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<int,lowp>
lowp_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<int,lowp>
lowp_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,lowp>
lowp_int	glm/detail/type_int.hpp	/^	typedef detail::lowp_int_t				lowp_int;$/;"	t	namespace:glm	typeref:typename:detail::lowp_int_t
lowp_int16	glm/fwd.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16_t	glm/fwd.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16_t	glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int32	glm/fwd.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32_t	glm/fwd.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32_t	glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int64	glm/fwd.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64_t	glm/fwd.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64_t	glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int8	glm/fwd.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8_t	glm/fwd.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8_t	glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int_t	glm/detail/type_int.hpp	/^	typedef signed int						lowp_int_t;$/;"	t	namespace:glm::detail	typeref:typename:signed int
lowp_ivec1	glm/gtc/vec1.hpp	/^	typedef lowp_ivec1_t			lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:lowp_ivec1_t
lowp_ivec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<int, lowp>		lowp_ivec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<int,lowp>
lowp_ivec2	glm/detail/type_vec.hpp	/^	typedef tvec2<int, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:tvec2<int,lowp>
lowp_ivec3	glm/detail/type_vec.hpp	/^	typedef tvec3<int, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:tvec3<int,lowp>
lowp_ivec4	glm/detail/type_vec.hpp	/^	typedef tvec4<int, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:tvec4<int,lowp>
lowp_mat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,lowp>
lowp_mat2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,lowp>
lowp_mat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,lowp>
lowp_mat2x2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,lowp>
lowp_mat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,lowp>
lowp_mat2x3	glm/mat2x3.hpp	/^	typedef tmat2x3<float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,lowp>
lowp_mat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,lowp>
lowp_mat2x4	glm/mat2x4.hpp	/^	typedef tmat2x4<float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,lowp>
lowp_mat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,lowp>
lowp_mat3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,lowp>
lowp_mat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,lowp>
lowp_mat3x2	glm/mat3x2.hpp	/^	typedef tmat3x2<float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,lowp>
lowp_mat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,lowp>
lowp_mat3x3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,lowp>
lowp_mat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,lowp>
lowp_mat3x4	glm/mat3x4.hpp	/^	typedef tmat3x4<float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,lowp>
lowp_mat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,lowp>
lowp_mat4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,lowp>
lowp_mat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,lowp>
lowp_mat4x2	glm/mat4x2.hpp	/^	typedef tmat4x2<float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,lowp>
lowp_mat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,lowp>
lowp_mat4x3	glm/mat4x3.hpp	/^	typedef tmat4x3<float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,lowp>
lowp_mat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,lowp>
lowp_mat4x4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,lowp>
lowp_quat	glm/fwd.hpp	/^	typedef tquat<float, lowp>		lowp_quat;$/;"	t	namespace:glm	typeref:typename:tquat<float,lowp>
lowp_u16	glm/fwd.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_u16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_u16vec1	glm/fwd.hpp	/^	typedef tvec1<u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u16,lowp>
lowp_u16vec2	glm/fwd.hpp	/^	typedef tvec2<u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u16,lowp>
lowp_u16vec3	glm/fwd.hpp	/^	typedef tvec3<u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u16,lowp>
lowp_u16vec4	glm/fwd.hpp	/^	typedef tvec4<u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u16,lowp>
lowp_u32	glm/fwd.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_u32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_u32vec1	glm/fwd.hpp	/^	typedef tvec1<u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u32,lowp>
lowp_u32vec2	glm/fwd.hpp	/^	typedef tvec2<u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u32,lowp>
lowp_u32vec3	glm/fwd.hpp	/^	typedef tvec3<u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u32,lowp>
lowp_u32vec4	glm/fwd.hpp	/^	typedef tvec4<u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u32,lowp>
lowp_u64	glm/fwd.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_u64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_u64vec1	glm/fwd.hpp	/^	typedef tvec1<u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u64,lowp>
lowp_u64vec2	glm/fwd.hpp	/^	typedef tvec2<u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u64,lowp>
lowp_u64vec3	glm/fwd.hpp	/^	typedef tvec3<u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u64,lowp>
lowp_u64vec4	glm/fwd.hpp	/^	typedef tvec4<u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u64,lowp>
lowp_u8	glm/fwd.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_u8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_u8vec1	glm/fwd.hpp	/^	typedef tvec1<u8, lowp> lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u8,lowp>
lowp_u8vec2	glm/fwd.hpp	/^	typedef tvec2<u8, lowp> lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u8,lowp>
lowp_u8vec3	glm/fwd.hpp	/^	typedef tvec3<u8, lowp> lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u8,lowp>
lowp_u8vec4	glm/fwd.hpp	/^	typedef tvec4<u8, lowp> lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u8,lowp>
lowp_uint	glm/detail/type_int.hpp	/^	typedef detail::lowp_uint_t				lowp_uint;$/;"	t	namespace:glm	typeref:typename:detail::lowp_uint_t
lowp_uint16	glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16_t	glm/fwd.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint32	glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32_t	glm/fwd.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint64	glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64_t	glm/fwd.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint8	glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8_t	glm/fwd.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint_t	glm/detail/type_int.hpp	/^	typedef unsigned int					lowp_uint_t;$/;"	t	namespace:glm::detail	typeref:typename:unsigned int
lowp_umat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, lowp>				lowp_umat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,lowp>
lowp_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,lowp>
lowp_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<uint,lowp>
lowp_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<uint,lowp>
lowp_umat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, lowp>				lowp_umat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,lowp>
lowp_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<uint,lowp>
lowp_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,lowp>
lowp_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<uint,lowp>
lowp_umat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, lowp>				lowp_umat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,lowp>
lowp_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<uint,lowp>
lowp_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<uint,lowp>
lowp_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,lowp>
lowp_uvec1	glm/gtc/vec1.hpp	/^	typedef lowp_uvec1_t			lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:lowp_uvec1_t
lowp_uvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<uint, lowp>		lowp_uvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<uint,lowp>
lowp_uvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<uint,lowp>
lowp_uvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<uint,lowp>
lowp_uvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<uint,lowp>
lowp_vec1	glm/fwd.hpp	/^	typedef tvec1<float, lowp> lowp_vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,lowp>
lowp_vec1	glm/gtc/vec1.hpp	/^	typedef lowp_vec1_t				lowp_vec1;$/;"	t	namespace:glm	typeref:typename:lowp_vec1_t
lowp_vec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<float, lowp>		lowp_vec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<float,lowp>
lowp_vec2	glm/detail/type_vec.hpp	/^	typedef tvec2<float, lowp>		lowp_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,lowp>
lowp_vec2	glm/fwd.hpp	/^	typedef tvec2<float, lowp> lowp_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,lowp>
lowp_vec3	glm/detail/type_vec.hpp	/^	typedef tvec3<float, lowp>		lowp_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,lowp>
lowp_vec3	glm/fwd.hpp	/^	typedef tvec3<float, lowp> lowp_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,lowp>
lowp_vec4	glm/detail/type_vec.hpp	/^	typedef tvec4<float, lowp>		lowp_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,lowp>
lowp_vec4	glm/fwd.hpp	/^	typedef tvec4<float, lowp> lowp_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,lowp>
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon84e4e886100a	typeref:typename:stbi_uc[256][4]
lsw	glm/gtc/ulp.inl	/^		glm::detail::int32 lsw;$/;"	m	struct:__anon2dbcfbc3020c::__anon2dbcfbc3030a	typeref:typename:glm::detail::int32	file:
luminosity	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER T luminosity(const tvec3<T, P>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
M	main.cpp	/^int M = 4;$/;"	v	typeref:typename:int
main	glm/detail/dummy.cpp	/^int main()$/;"	f	typeref:typename:int
main	main.cpp	/^int main(int argc, char const* argv[])$/;"	f	typeref:typename:int
make_mat2	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, defaultp> make_mat2(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,defaultp>
make_mat2x2	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, defaultp> make_mat2x2(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,defaultp>
make_mat2x3	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, defaultp> make_mat2x3(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,defaultp>
make_mat2x4	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, defaultp> make_mat2x4(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,defaultp>
make_mat3	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, defaultp> make_mat3(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,defaultp>
make_mat3x2	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, defaultp> make_mat3x2(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,defaultp>
make_mat3x3	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, defaultp> make_mat3x3(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,defaultp>
make_mat3x4	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, defaultp> make_mat3x4(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,defaultp>
make_mat4	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> make_mat4(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
make_mat4x2	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, defaultp> make_mat4x2(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,defaultp>
make_mat4x3	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, defaultp> make_mat4x3(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,defaultp>
make_mat4x4	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> make_mat4x4(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
make_quat	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tquat<T, defaultp> make_quat(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,defaultp>
make_signed	glm/detail/type_int.hpp	/^		struct make_signed$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<char>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<int>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<long long>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<long>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<short>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<unsigned char>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<unsigned int>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<unsigned long long>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<unsigned long>$/;"	s	namespace:glm::detail
make_signed	glm/detail/type_int.hpp	/^		struct make_signed<unsigned short>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<char>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<int>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<long long>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<long>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<short>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<unsigned char>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<unsigned int>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<unsigned long long>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<unsigned long>$/;"	s	namespace:glm::detail
make_unsigned	glm/detail/type_int.hpp	/^		struct make_unsigned<unsigned short>$/;"	s	namespace:glm::detail
make_vec2	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, defaultp> make_vec2(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,defaultp>
make_vec3	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, defaultp> make_vec3(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,defaultp>
make_vec4	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, defaultp> make_vec4(T const * const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,defaultp>
mantissa	glm/detail/intrinsic_common.inl	/^			const unsigned int mantissa:23, exp:8, sign:1;$/;"	m	struct:glm::detail::ieee754_QNAN::i	typeref:typename:const unsigned int:23	file:
mapping	main.cpp	/^double mapping(double value, double istart, double istop, double ostart, double ostop)$/;"	f	typeref:typename:double
marker	nuklear/nuklear.h	/^    struct nk_buffer_marker marker[NK_BUFFER_MAX];$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer_marker[]
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon84e4e886060a	typeref:typename:unsigned char
mask	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER T mask(T Bits)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
mask	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType mask(genIUType Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
mask	glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vecIUType<T, P> mask(vecIUType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecIUType<T,P>
mat2	glm/detail/type_mat.hpp	/^	typedef mat2x2					mat2;$/;"	t	namespace:glm	typeref:typename:mat2x2
mat2x2	glm/detail/type_mat.hpp	/^	typedef highp_mat2x2			mat2x2;$/;"	t	namespace:glm	typeref:typename:highp_mat2x2
mat2x2	glm/detail/type_mat.hpp	/^	typedef lowp_mat2x2			mat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_mat2x2
mat2x2	glm/detail/type_mat.hpp	/^	typedef mediump_mat2x2		mat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_mat2x2
mat2x3	glm/detail/type_mat.hpp	/^	typedef highp_mat2x3			mat2x3;$/;"	t	namespace:glm	typeref:typename:highp_mat2x3
mat2x3	glm/detail/type_mat.hpp	/^	typedef lowp_mat2x3			mat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_mat2x3
mat2x3	glm/detail/type_mat.hpp	/^	typedef mediump_mat2x3		mat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_mat2x3
mat2x4	glm/detail/type_mat.hpp	/^	typedef highp_mat2x4			mat2x4;$/;"	t	namespace:glm	typeref:typename:highp_mat2x4
mat2x4	glm/detail/type_mat.hpp	/^	typedef lowp_mat2x4			mat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_mat2x4
mat2x4	glm/detail/type_mat.hpp	/^	typedef mediump_mat2x4		mat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_mat2x4
mat2x4_cast	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> mat2x4_cast(tdualquat<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
mat3	glm/detail/type_mat.hpp	/^	typedef mat3x3					mat3;$/;"	t	namespace:glm	typeref:typename:mat3x3
mat3x2	glm/detail/type_mat.hpp	/^	typedef highp_mat3x2			mat3x2;$/;"	t	namespace:glm	typeref:typename:highp_mat3x2
mat3x2	glm/detail/type_mat.hpp	/^	typedef lowp_mat3x2			mat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_mat3x2
mat3x2	glm/detail/type_mat.hpp	/^	typedef mediump_mat3x2		mat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_mat3x2
mat3x3	glm/detail/type_mat.hpp	/^	typedef highp_mat3x3			mat3x3;$/;"	t	namespace:glm	typeref:typename:highp_mat3x3
mat3x3	glm/detail/type_mat.hpp	/^	typedef lowp_mat3x3			mat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_mat3x3
mat3x3	glm/detail/type_mat.hpp	/^	typedef mediump_mat3x3		mat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_mat3x3
mat3x4	glm/detail/type_mat.hpp	/^	typedef highp_mat3x4			mat3x4;$/;"	t	namespace:glm	typeref:typename:highp_mat3x4
mat3x4	glm/detail/type_mat.hpp	/^	typedef lowp_mat3x4			mat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_mat3x4
mat3x4	glm/detail/type_mat.hpp	/^	typedef mediump_mat3x4		mat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_mat3x4
mat3x4_cast	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> mat3x4_cast(tdualquat<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
mat3_cast	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> mat3_cast(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
mat4	glm/detail/type_mat.hpp	/^	typedef mat4x4					mat4;$/;"	t	namespace:glm	typeref:typename:mat4x4
mat4SIMD_cast	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fmat4x4SIMD mat4SIMD_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fmat4x4SIMD
mat4x2	glm/detail/type_mat.hpp	/^	typedef highp_mat4x2			mat4x2;$/;"	t	namespace:glm	typeref:typename:highp_mat4x2
mat4x2	glm/detail/type_mat.hpp	/^	typedef lowp_mat4x2			mat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_mat4x2
mat4x2	glm/detail/type_mat.hpp	/^	typedef mediump_mat4x2		mat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_mat4x2
mat4x3	glm/detail/type_mat.hpp	/^	typedef highp_mat4x3			mat4x3;$/;"	t	namespace:glm	typeref:typename:highp_mat4x3
mat4x3	glm/detail/type_mat.hpp	/^	typedef lowp_mat4x3			mat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_mat4x3
mat4x3	glm/detail/type_mat.hpp	/^	typedef mediump_mat4x3		mat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_mat4x3
mat4x4	glm/detail/type_mat.hpp	/^	typedef highp_mat4x4			mat4x4;$/;"	t	namespace:glm	typeref:typename:highp_mat4x4
mat4x4	glm/detail/type_mat.hpp	/^	typedef lowp_mat4x4			mat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_mat4x4
mat4x4	glm/detail/type_mat.hpp	/^	typedef mediump_mat4x4		mat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_mat4x4
mat4_cast	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> mat4_cast(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
mat4_cast	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER mat4 mat4_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat4
mat4_cast	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER mat4 mat4_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat4
material	glm/detail/dummy.cpp	/^struct material$/;"	s	file:
matrix	Camera.cpp	/^glm::mat4 Camera::matrix() const {$/;"	f	class:Camera	typeref:typename:glm::mat4
matrixCompMult	glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER matType<T, P> matrixCompMult(matType<T, P> const & x, matType<T, P> const & /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER matType<T,P>
matrixCompMult	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER detail::fmat4x4SIMD matrixCompMult$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fmat4x4SIMD
matrixCross3	glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> matrixCross3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
matrixCross4	glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> matrixCross4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
max	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
max	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER T max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER T max($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
max	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot	typeref:typename:float
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon84e4e886090a	typeref:typename:int[17]
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon84e4e886050a	typeref:typename:unsigned int[18]
maximize_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type maximize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_symbol_type
MaxVerticalAngle	Camera.cpp	/^static const float MaxVerticalAngle = 85.0f; \/\/must be less than 90 to avoid gimbal lock$/;"	v	typeref:typename:const float	file:
MAX_ELEMENT_BUFFER	main.cpp	/^#define MAX_ELEMENT_BUFFER /;"	d	file:
MAX_VERTEX_BUFFER	main.cpp	/^#define MAX_VERTEX_BUFFER /;"	d	file:
max_x	nuklear/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel	typeref:typename:float
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
mediump	glm/detail/precision.hpp	/^		mediump,$/;"	e	enum:glm::precision
mediump_bvec1	glm/gtc/vec1.hpp	/^	typedef mediump_bvec1_t			mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:mediump_bvec1_t
mediump_bvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<bool, mediump>	mediump_bvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<bool,mediump>
mediump_bvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<bool,mediump>
mediump_bvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<bool,mediump>
mediump_bvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<bool,mediump>
mediump_ddualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,mediump>
mediump_dmat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, mediump>	mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,mediump>
mediump_dmat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<double,mediump>
mediump_dmat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<double,mediump>
mediump_dmat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<double,mediump>
mediump_dmat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, mediump>	mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<double,mediump>
mediump_dmat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<double,mediump>
mediump_dmat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<double,mediump>
mediump_dmat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<double,mediump>
mediump_dmat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, mediump>	mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,mediump>
mediump_dmat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<double,mediump>
mediump_dmat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<double,mediump>
mediump_dmat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<double,mediump>
mediump_dquat	glm/fwd.hpp	/^	typedef tquat<double, mediump>	mediump_dquat;$/;"	t	namespace:glm	typeref:typename:tquat<double,mediump>
mediump_dualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_dvec1	glm/gtc/vec1.hpp	/^	typedef mediump_dvec1_t			mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:mediump_dvec1_t
mediump_dvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<double, mediump>	mediump_dvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<double,mediump>
mediump_dvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<double, mediump>	mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<double,mediump>
mediump_dvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<double, mediump>	mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<double,mediump>
mediump_dvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<double, mediump>	mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<double,mediump>
mediump_f32	glm/fwd.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_f32mat2	glm/fwd.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
mediump_f32mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,mediump>
mediump_f32mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,mediump>
mediump_f32mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,mediump>
mediump_f32mat3	glm/fwd.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
mediump_f32mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,mediump>
mediump_f32mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,mediump>
mediump_f32mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,mediump>
mediump_f32mat4	glm/fwd.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
mediump_f32mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,mediump>
mediump_f32mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,mediump>
mediump_f32mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,mediump>
mediump_f32quat	glm/fwd.hpp	/^	typedef tquat<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:tquat<f32,mediump>
mediump_f32vec1	glm/fwd.hpp	/^	typedef tvec1<f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f32,mediump>
mediump_f32vec2	glm/fwd.hpp	/^	typedef tvec2<f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f32,mediump>
mediump_f32vec3	glm/fwd.hpp	/^	typedef tvec3<f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f32,mediump>
mediump_f32vec4	glm/fwd.hpp	/^	typedef tvec4<f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f32,mediump>
mediump_f64	glm/fwd.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_f64mat2	glm/fwd.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x2
mediump_f64mat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f64,mediump>
mediump_f64mat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f64,mediump>
mediump_f64mat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f64,mediump>
mediump_f64mat3	glm/fwd.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x3
mediump_f64mat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f64,mediump>
mediump_f64mat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f64,mediump>
mediump_f64mat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f64,mediump>
mediump_f64mat4	glm/fwd.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x4
mediump_f64mat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f64,mediump>
mediump_f64mat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f64,mediump>
mediump_f64mat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f64,mediump>
mediump_f64quat	glm/fwd.hpp	/^	typedef tquat<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:tquat<f64,mediump>
mediump_f64vec1	glm/fwd.hpp	/^	typedef tvec1<f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<f64,mediump>
mediump_f64vec2	glm/fwd.hpp	/^	typedef tvec2<f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<f64,mediump>
mediump_f64vec3	glm/fwd.hpp	/^	typedef tvec3<f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<f64,mediump>
mediump_f64vec4	glm/fwd.hpp	/^	typedef tvec4<f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<f64,mediump>
mediump_fdualquat	glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_float	glm/detail/type_float.hpp	/^	typedef mediump_float_t		mediump_float;$/;"	t	namespace:glm	typeref:typename:mediump_float_t
mediump_float32	glm/fwd.hpp	/^	typedef detail::float32 mediump_float32;$/;"	t	namespace:glm	typeref:typename:detail::float32
mediump_float32_t	glm/fwd.hpp	/^	typedef detail::float32 mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:detail::float32
mediump_float64	glm/fwd.hpp	/^	typedef detail::float64 mediump_float64;$/;"	t	namespace:glm	typeref:typename:detail::float64
mediump_float64_t	glm/fwd.hpp	/^	typedef detail::float64 mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:detail::float64
mediump_float_t	glm/detail/type_float.hpp	/^	typedef float				mediump_float_t;$/;"	t	namespace:glm	typeref:typename:float
mediump_fmat2	glm/fwd.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mediump_fmat2x2
mediump_fmat2x2	glm/fwd.hpp	/^	typedef tmat2x2<f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<f32,mediump>
mediump_fmat2x3	glm/fwd.hpp	/^	typedef tmat2x3<f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<f32,mediump>
mediump_fmat2x4	glm/fwd.hpp	/^	typedef tmat2x4<f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<f32,mediump>
mediump_fmat3	glm/fwd.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mediump_fmat3x3
mediump_fmat3x2	glm/fwd.hpp	/^	typedef tmat3x2<f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<f32,mediump>
mediump_fmat3x3	glm/fwd.hpp	/^	typedef tmat3x3<f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<f32,mediump>
mediump_fmat3x4	glm/fwd.hpp	/^	typedef tmat3x4<f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<f32,mediump>
mediump_fmat4	glm/fwd.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mediump_fmat4x4
mediump_fmat4x2	glm/fwd.hpp	/^	typedef tmat4x2<f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<f32,mediump>
mediump_fmat4x3	glm/fwd.hpp	/^	typedef tmat4x3<f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<f32,mediump>
mediump_fmat4x4	glm/fwd.hpp	/^	typedef tmat4x4<f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<f32,mediump>
mediump_fquat	glm/fwd.hpp	/^	typedef mediump_quat		mediump_fquat;$/;"	t	namespace:glm	typeref:typename:mediump_quat
mediump_fvec1	glm/fwd.hpp	/^	typedef tvec1<float, mediump> mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,mediump>
mediump_fvec2	glm/fwd.hpp	/^	typedef tvec2<float, mediump> mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,mediump>
mediump_fvec3	glm/fwd.hpp	/^	typedef tvec3<float, mediump> mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,mediump>
mediump_fvec4	glm/fwd.hpp	/^	typedef tvec4<float, mediump> mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,mediump>
mediump_i16	glm/fwd.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_i16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_i16vec1	glm/fwd.hpp	/^	typedef tvec1<i16, mediump>		mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i16,mediump>
mediump_i16vec2	glm/fwd.hpp	/^	typedef tvec2<i16, mediump>		mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i16,mediump>
mediump_i16vec3	glm/fwd.hpp	/^	typedef tvec3<i16, mediump>		mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i16,mediump>
mediump_i16vec4	glm/fwd.hpp	/^	typedef tvec4<i16, mediump>		mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i16,mediump>
mediump_i32	glm/fwd.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_i32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_i32vec1	glm/fwd.hpp	/^	typedef tvec1<i32, mediump>		mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i32,mediump>
mediump_i32vec2	glm/fwd.hpp	/^	typedef tvec2<i32, mediump>		mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i32,mediump>
mediump_i32vec3	glm/fwd.hpp	/^	typedef tvec3<i32, mediump>		mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i32,mediump>
mediump_i32vec4	glm/fwd.hpp	/^	typedef tvec4<i32, mediump>		mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i32,mediump>
mediump_i64	glm/fwd.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_i64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_i64vec1	glm/fwd.hpp	/^	typedef tvec1<i64, mediump>		mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i64,mediump>
mediump_i64vec2	glm/fwd.hpp	/^	typedef tvec2<i64, mediump>		mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i64,mediump>
mediump_i64vec3	glm/fwd.hpp	/^	typedef tvec3<i64, mediump>		mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i64,mediump>
mediump_i64vec4	glm/fwd.hpp	/^	typedef tvec4<i64, mediump>		mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i64,mediump>
mediump_i8	glm/fwd.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_i8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_i8vec1	glm/fwd.hpp	/^	typedef tvec1<i8, mediump> mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<i8,mediump>
mediump_i8vec2	glm/fwd.hpp	/^	typedef tvec2<i8, mediump> mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<i8,mediump>
mediump_i8vec3	glm/fwd.hpp	/^	typedef tvec3<i8, mediump> mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<i8,mediump>
mediump_i8vec4	glm/fwd.hpp	/^	typedef tvec4<i8, mediump> mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<i8,mediump>
mediump_imat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, mediump>			mediump_imat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,mediump>
mediump_imat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<int,mediump>
mediump_imat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<int,mediump>
mediump_imat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<int,mediump>
mediump_imat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, mediump>			mediump_imat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,mediump>
mediump_imat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<int,mediump>
mediump_imat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<int,mediump>
mediump_imat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<int,mediump>
mediump_imat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, mediump>			mediump_imat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,mediump>
mediump_imat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<int,mediump>
mediump_imat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<int,mediump>
mediump_imat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<int,mediump>
mediump_int	glm/detail/type_int.hpp	/^	typedef detail::mediump_int_t			mediump_int;$/;"	t	namespace:glm	typeref:typename:detail::mediump_int_t
mediump_int16	glm/fwd.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16	glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16_t	glm/fwd.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16_t	glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int32	glm/fwd.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32	glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32_t	glm/fwd.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32_t	glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int64	glm/fwd.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64	glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64_t	glm/fwd.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64_t	glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int8	glm/fwd.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8	glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8_t	glm/fwd.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8_t	glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int_t	glm/detail/type_int.hpp	/^	typedef signed int						mediump_int_t;$/;"	t	namespace:glm::detail	typeref:typename:signed int
mediump_ivec1	glm/gtc/vec1.hpp	/^	typedef mediump_ivec1_t			mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:mediump_ivec1_t
mediump_ivec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<int, mediump>		mediump_ivec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<int,mediump>
mediump_ivec2	glm/detail/type_vec.hpp	/^	typedef tvec2<int, mediump>		mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:tvec2<int,mediump>
mediump_ivec3	glm/detail/type_vec.hpp	/^	typedef tvec3<int, mediump>		mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:tvec3<int,mediump>
mediump_ivec4	glm/detail/type_vec.hpp	/^	typedef tvec4<int, mediump>		mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:tvec4<int,mediump>
mediump_mat2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,mediump>
mediump_mat2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,mediump>
mediump_mat2x2	glm/detail/type_mat.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,mediump>
mediump_mat2x2	glm/mat2x2.hpp	/^	typedef tmat2x2<float, mediump>		mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<float,mediump>
mediump_mat2x3	glm/detail/type_mat.hpp	/^	typedef tmat2x3<float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,mediump>
mediump_mat2x3	glm/mat2x3.hpp	/^	typedef tmat2x3<float, mediump>		mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<float,mediump>
mediump_mat2x4	glm/detail/type_mat.hpp	/^	typedef tmat2x4<float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,mediump>
mediump_mat2x4	glm/mat2x4.hpp	/^	typedef tmat2x4<float, mediump>		mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<float,mediump>
mediump_mat3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,mediump>
mediump_mat3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,mediump>
mediump_mat3x2	glm/detail/type_mat.hpp	/^	typedef tmat3x2<float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,mediump>
mediump_mat3x2	glm/mat3x2.hpp	/^	typedef tmat3x2<float, mediump>		mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<float,mediump>
mediump_mat3x3	glm/detail/type_mat.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,mediump>
mediump_mat3x3	glm/mat3x3.hpp	/^	typedef tmat3x3<float, mediump>		mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<float,mediump>
mediump_mat3x4	glm/detail/type_mat.hpp	/^	typedef tmat3x4<float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,mediump>
mediump_mat3x4	glm/mat3x4.hpp	/^	typedef tmat3x4<float, mediump>		mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<float,mediump>
mediump_mat4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,mediump>
mediump_mat4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,mediump>
mediump_mat4x2	glm/detail/type_mat.hpp	/^	typedef tmat4x2<float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,mediump>
mediump_mat4x2	glm/mat4x2.hpp	/^	typedef tmat4x2<float, mediump>		mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<float,mediump>
mediump_mat4x3	glm/detail/type_mat.hpp	/^	typedef tmat4x3<float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,mediump>
mediump_mat4x3	glm/mat4x3.hpp	/^	typedef tmat4x3<float, mediump>		mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<float,mediump>
mediump_mat4x4	glm/detail/type_mat.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,mediump>
mediump_mat4x4	glm/mat4x4.hpp	/^	typedef tmat4x4<float, mediump>		mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<float,mediump>
mediump_quat	glm/fwd.hpp	/^	typedef tquat<float, mediump>	mediump_quat;$/;"	t	namespace:glm	typeref:typename:tquat<float,mediump>
mediump_u16	glm/fwd.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_u16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_u16vec1	glm/fwd.hpp	/^	typedef tvec1<u16, mediump>		mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u16,mediump>
mediump_u16vec2	glm/fwd.hpp	/^	typedef tvec2<u16, mediump>		mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u16,mediump>
mediump_u16vec3	glm/fwd.hpp	/^	typedef tvec3<u16, mediump>		mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u16,mediump>
mediump_u16vec4	glm/fwd.hpp	/^	typedef tvec4<u16, mediump>		mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u16,mediump>
mediump_u32	glm/fwd.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_u32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_u32vec1	glm/fwd.hpp	/^	typedef tvec1<u32, mediump>		mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u32,mediump>
mediump_u32vec2	glm/fwd.hpp	/^	typedef tvec2<u32, mediump>		mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u32,mediump>
mediump_u32vec3	glm/fwd.hpp	/^	typedef tvec3<u32, mediump>		mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u32,mediump>
mediump_u32vec4	glm/fwd.hpp	/^	typedef tvec4<u32, mediump>		mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u32,mediump>
mediump_u64	glm/fwd.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_u64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_u64vec1	glm/fwd.hpp	/^	typedef tvec1<u64, mediump>		mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u64,mediump>
mediump_u64vec2	glm/fwd.hpp	/^	typedef tvec2<u64, mediump>		mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u64,mediump>
mediump_u64vec3	glm/fwd.hpp	/^	typedef tvec3<u64, mediump>		mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u64,mediump>
mediump_u64vec4	glm/fwd.hpp	/^	typedef tvec4<u64, mediump>		mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u64,mediump>
mediump_u8	glm/fwd.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_u8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_u8vec1	glm/fwd.hpp	/^	typedef tvec1<u8, mediump> mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u8,mediump>
mediump_u8vec2	glm/fwd.hpp	/^	typedef tvec2<u8, mediump> mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u8,mediump>
mediump_u8vec3	glm/fwd.hpp	/^	typedef tvec3<u8, mediump> mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u8,mediump>
mediump_u8vec4	glm/fwd.hpp	/^	typedef tvec4<u8, mediump> mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u8,mediump>
mediump_uint	glm/detail/type_int.hpp	/^	typedef detail::mediump_uint_t			mediump_uint;$/;"	t	namespace:glm	typeref:typename:detail::mediump_uint_t
mediump_uint16	glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16_t	glm/fwd.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint32	glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32_t	glm/fwd.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint64	glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64_t	glm/fwd.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint8	glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8_t	glm/fwd.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint_t	glm/detail/type_int.hpp	/^	typedef unsigned int					mediump_uint_t;$/;"	t	namespace:glm::detail	typeref:typename:unsigned int
mediump_umat2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, mediump>			mediump_umat2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,mediump>
mediump_umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x2<uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm	typeref:typename:tmat2x2<uint,mediump>
mediump_umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x3<uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm	typeref:typename:tmat2x3<uint,mediump>
mediump_umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat2x4<uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm	typeref:typename:tmat2x4<uint,mediump>
mediump_umat3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, mediump>			mediump_umat3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,mediump>
mediump_umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x2<uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm	typeref:typename:tmat3x2<uint,mediump>
mediump_umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x3<uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm	typeref:typename:tmat3x3<uint,mediump>
mediump_umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat3x4<uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm	typeref:typename:tmat3x4<uint,mediump>
mediump_umat4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, mediump>			mediump_umat4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,mediump>
mediump_umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x2<uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm	typeref:typename:tmat4x2<uint,mediump>
mediump_umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x3<uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm	typeref:typename:tmat4x3<uint,mediump>
mediump_umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef tmat4x4<uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm	typeref:typename:tmat4x4<uint,mediump>
mediump_uvec1	glm/gtc/vec1.hpp	/^	typedef mediump_uvec1_t			mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:mediump_uvec1_t
mediump_uvec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<uint, mediump>	mediump_uvec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<uint,mediump>
mediump_uvec2	glm/detail/type_vec.hpp	/^	typedef tvec2<uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:tvec2<uint,mediump>
mediump_uvec3	glm/detail/type_vec.hpp	/^	typedef tvec3<uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:tvec3<uint,mediump>
mediump_uvec4	glm/detail/type_vec.hpp	/^	typedef tvec4<uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:tvec4<uint,mediump>
mediump_vec1	glm/fwd.hpp	/^	typedef tvec1<float, mediump> mediump_vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<float,mediump>
mediump_vec1	glm/gtc/vec1.hpp	/^	typedef mediump_vec1_t			mediump_vec1;$/;"	t	namespace:glm	typeref:typename:mediump_vec1_t
mediump_vec1_t	glm/detail/type_vec.hpp	/^	typedef tvec1<float, mediump>	mediump_vec1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<float,mediump>
mediump_vec2	glm/detail/type_vec.hpp	/^	typedef tvec2<float, mediump>	mediump_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,mediump>
mediump_vec2	glm/fwd.hpp	/^	typedef tvec2<float, mediump> mediump_vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<float,mediump>
mediump_vec3	glm/detail/type_vec.hpp	/^	typedef tvec3<float, mediump>	mediump_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,mediump>
mediump_vec3	glm/fwd.hpp	/^	typedef tvec3<float, mediump> mediump_vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<float,mediump>
mediump_vec4	glm/detail/type_vec.hpp	/^	typedef tvec4<float, mediump>	mediump_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,mediump>
mediump_vec4	glm/fwd.hpp	/^	typedef tvec4<float, mediump> mediump_vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<float,mediump>
memory	nuklear/nuklear.h	/^    struct nk_buffer memory;$/;"	m	struct:nk_context	typeref:struct:nk_buffer
memory	nuklear/nuklear.h	/^    struct nk_memory memory;$/;"	m	struct:nk_buffer	typeref:struct:nk_memory
memory	nuklear/nuklear.h	/^    void *memory;$/;"	m	struct:nk_memory_status	typeref:typename:void *
menu	nuklear/nuklear.h	/^    struct nk_menu_state menu;$/;"	m	struct:nk_panel	typeref:struct:nk_menu_state
menu_border	nuklear/nuklear.h	/^    float menu_border;$/;"	m	struct:nk_style_window	typeref:typename:float
menu_border_color	nuklear/nuklear.h	/^    struct nk_color menu_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
menu_button	nuklear/nuklear.h	/^    struct nk_style_button menu_button;$/;"	m	struct:nk_style	typeref:struct:nk_style_button
merge_mode	nuklear/nuklear.h	/^    unsigned char merge_mode;$/;"	m	struct:nk_font_config	typeref:typename:unsigned char
min	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
min	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER T min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	glm/gtx/extented_min_max.inl	/^	GLM_FUNC_QUALIFIER T min($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
min	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot	typeref:typename:float
minimize_button	nuklear/nuklear.h	/^    struct nk_style_button minimize_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_button
minimize_symbol	nuklear/nuklear.h	/^    enum nk_symbol_type minimize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_symbol_type
minus_one	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED minus_one = _mm_set_ps1(-1.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
min_size	nuklear/nuklear.h	/^    struct nk_vec2 min_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
mirrorClamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorClamp(genType const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorClamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> mirrorClamp(tvec2<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
mirrorClamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> mirrorClamp(tvec3<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
mirrorClamp	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> mirrorClamp(tvec4<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
mirrorRepeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType mirrorRepeat(genType const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorRepeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> mirrorRepeat(tvec2<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
mirrorRepeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> mirrorRepeat(tvec3<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
mirrorRepeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> mirrorRepeat(tvec4<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
mix	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> mix(tquat<T, P> const & x, tquat<T, P> const & y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
mix	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD mix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
mix	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD mix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
mixedProduct	glm/gtx/mixed_product.inl	/^	GLM_FUNC_QUALIFIER T mixedProduct$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
mod	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int mod(int x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
mod	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint mod(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
mod	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD mod$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
mod289	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
mode	nuklear/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_edit_state	typeref:typename:unsigned char
mode	nuklear/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
mouse	nuklear/nuklear.h	/^    struct nk_mouse mouse;$/;"	m	struct:nk_input	typeref:struct:nk_mouse
MouseInit	main.cpp	/^void MouseInit(void)$/;"	f	typeref:typename:void
msw	glm/gtc/ulp.inl	/^		glm::detail::int32 msw;$/;"	m	struct:__anon2dbcfbc3020c::__anon2dbcfbc3030a	typeref:typename:glm::detail::int32	file:
mu0	main.cpp	/^float mu0;$/;"	v	typeref:typename:float
mu_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float ************
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_edit_state	typeref:typename:nk_hash
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_popup_state	typeref:typename:nk_hash
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_property_state	typeref:typename:nk_hash
name	nuklear/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_window	typeref:typename:nk_hash
nearPlane	Camera.cpp	/^float Camera::nearPlane() const {$/;"	f	class:Camera	typeref:typename:float
needed	nuklear/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_buffer	typeref:typename:nk_size
needed	nuklear/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_memory_status	typeref:typename:nk_size
newline	glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
next	nuklear/nuklear.h	/^    nk_size next;$/;"	m	struct:nk_command	typeref:typename:nk_size
next	nuklear/nuklear.h	/^    struct nk_font *next;$/;"	m	struct:nk_font	typeref:struct:nk_font *
next	nuklear/nuklear.h	/^    struct nk_font_config *next;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config *
next	nuklear/nuklear.h	/^    struct nk_page *next;$/;"	m	struct:nk_page	typeref:struct:nk_page *
next	nuklear/nuklear.h	/^    struct nk_page_element *next;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element *
next	nuklear/nuklear.h	/^    struct nk_rp_node  *next;$/;"	m	struct:nk_rp_node	typeref:struct:nk_rp_node *
next	nuklear/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table *
next	nuklear/nuklear.h	/^    struct nk_tt__active_edge *next;$/;"	m	struct:nk_tt__active_edge	typeref:struct:nk_tt__active_edge *
next	nuklear/nuklear.h	/^    struct nk_tt__hheap_chunk *next;$/;"	m	struct:nk_tt__hheap_chunk	typeref:struct:nk_tt__hheap_chunk *
next	nuklear/nuklear.h	/^    struct nk_window *next;$/;"	m	struct:nk_window	typeref:struct:nk_window *
nextafter	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double nextafter(double x, double y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER double
nextafterf	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float nextafterf(float x, float y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
next_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double next_float(double const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
next_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float next_float(float const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
next_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T next_float(T const & x, uint const & ulps)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
next_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> next_float(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
next_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> next_float(vecType<T, P> const & x, vecType<uint, P> const & u/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
nice	glm/detail/type_gentype.hpp	/^		nice,$/;"	e	enum:glm::profile
niceLength	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER float niceLength$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
niceLength4	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD niceLength4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
niceSqrt	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD niceSqrt(detail::fvec4SIMD const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
NK_ABS	nuklear/nuklear.h	/^#define NK_ABS(/;"	d
nk_add_value	nuklear/nuklear.h	/^nk_add_value(struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN nk_uint *
NK_ADJACENCY_BONUS	nuklear/nuklear.h	/^    #define NK_ADJACENCY_BONUS /;"	d
nk_adler32	nuklear/nuklear.h	/^nk_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen)$/;"	f	typeref:typename:NK_INTERN unsigned int
NK_ALIGNOF	nuklear/nuklear.h	/^#define NK_ALIGNOF(/;"	d
nk_alignof	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s
NK_ALIGN_PTR	nuklear/nuklear.h	/^#define NK_ALIGN_PTR(/;"	d
NK_ALIGN_PTR_BACK	nuklear/nuklear.h	/^#define NK_ALIGN_PTR_BACK(/;"	d
nk_allocation_type	nuklear/nuklear.h	/^enum nk_allocation_type {$/;"	g
nk_allocator	nuklear/nuklear.h	/^struct nk_allocator {$/;"	s
nk_anti_aliasing	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	g
NK_ANTI_ALIASING_OFF	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_ANTI_ALIASING_ON	nuklear/nuklear.h	/^enum nk_anti_aliasing   {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_API	nuklear/nuklear.h	/^#define NK_API /;"	d
NK_ASSERT	nuklear/nuklear.h	/^#define NK_ASSERT(/;"	d
nk_baked_font	nuklear/nuklear.h	/^struct nk_baked_font {$/;"	s
nk_baker_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_baker_align = NK_ALIGNOF(struct nk_font_baker);$/;"	v	typeref:typename:NK_GLOBAL const nk_size
nk_begin	nuklear/nuklear.h	/^nk_begin(struct nk_context *ctx, struct nk_panel *layout, const char *title,$/;"	f	typeref:typename:NK_API int
NK_BETWEEN	nuklear/nuklear.h	/^#define NK_BETWEEN(/;"	d
nk_buffer	nuklear/nuklear.h	/^struct nk_buffer {$/;"	s
nk_buffer_align	nuklear/nuklear.h	/^nk_buffer_align(void *unaligned, nk_size align, nk_size *alignment,$/;"	f	typeref:typename:NK_INTERN void *
nk_buffer_alloc	nuklear/nuklear.h	/^nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f	typeref:typename:NK_INTERN void *
nk_buffer_allocation_type	nuklear/nuklear.h	/^enum nk_buffer_allocation_type {$/;"	g
NK_BUFFER_BACK	nuklear/nuklear.h	/^    NK_BUFFER_BACK,$/;"	e	enum:nk_buffer_allocation_type
nk_buffer_clear	nuklear/nuklear.h	/^nk_buffer_clear(struct nk_buffer *b)$/;"	f	typeref:typename:NK_API void
NK_BUFFER_DEFAULT_INITIAL_SIZE	nuklear/nuklear.h	/^#define NK_BUFFER_DEFAULT_INITIAL_SIZE /;"	d
NK_BUFFER_DYNAMIC	nuklear/nuklear.h	/^    NK_BUFFER_DYNAMIC$/;"	e	enum:nk_allocation_type
NK_BUFFER_FIXED	nuklear/nuklear.h	/^    NK_BUFFER_FIXED,$/;"	e	enum:nk_allocation_type
nk_buffer_free	nuklear/nuklear.h	/^nk_buffer_free(struct nk_buffer *b)$/;"	f	typeref:typename:NK_API void
NK_BUFFER_FRONT	nuklear/nuklear.h	/^    NK_BUFFER_FRONT,$/;"	e	enum:nk_buffer_allocation_type
nk_buffer_info	nuklear/nuklear.h	/^nk_buffer_info(struct nk_memory_status *s, struct nk_buffer *b)$/;"	f	typeref:typename:NK_API void
nk_buffer_init	nuklear/nuklear.h	/^nk_buffer_init(struct nk_buffer *b, const struct nk_allocator *a,$/;"	f	typeref:typename:NK_API void
nk_buffer_init_default	nuklear/nuklear.h	/^nk_buffer_init_default(struct nk_buffer *buffer)$/;"	f	typeref:typename:NK_API void
nk_buffer_init_fixed	nuklear/nuklear.h	/^nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)$/;"	f	typeref:typename:NK_API void
nk_buffer_mark	nuklear/nuklear.h	/^nk_buffer_mark(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f	typeref:typename:NK_API void
nk_buffer_marker	nuklear/nuklear.h	/^struct nk_buffer_marker {$/;"	s
NK_BUFFER_MAX	nuklear/nuklear.h	/^    NK_BUFFER_MAX$/;"	e	enum:nk_buffer_allocation_type
nk_buffer_memory	nuklear/nuklear.h	/^nk_buffer_memory(struct nk_buffer *buffer)$/;"	f	typeref:typename:NK_API void *
nk_buffer_memory_const	nuklear/nuklear.h	/^nk_buffer_memory_const(const struct nk_buffer *buffer)$/;"	f	typeref:typename:NK_API const void *
nk_buffer_push	nuklear/nuklear.h	/^nk_buffer_push(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f	typeref:typename:NK_API void
nk_buffer_realloc	nuklear/nuklear.h	/^nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)$/;"	f	typeref:typename:NK_INTERN void *
nk_buffer_reset	nuklear/nuklear.h	/^nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f	typeref:typename:NK_API void
nk_buffer_total	nuklear/nuklear.h	/^nk_buffer_total(struct nk_buffer *buffer)$/;"	f	typeref:typename:NK_API nk_size
nk_build	nuklear/nuklear.h	/^nk_build(struct nk_context *ctx)$/;"	f	typeref:typename:NK_INTERN void
nk_build_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_build_align = NK_ALIGNOF(struct nk_font_bake_data);$/;"	v	typeref:typename:NK_GLOBAL const nk_size
nk_buttons	nuklear/nuklear.h	/^enum nk_buttons {$/;"	g
nk_button_behavior	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	g
nk_button_behavior	nuklear/nuklear.h	/^nk_button_behavior(nk_flags *state, struct nk_rect r,$/;"	f	typeref:typename:NK_INTERN int
nk_button_color	nuklear/nuklear.h	/^nk_button_color(struct nk_context *ctx, struct nk_color color)$/;"	f	typeref:typename:NK_API int
NK_BUTTON_DEFAULT	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
nk_button_image	nuklear/nuklear.h	/^nk_button_image(struct nk_context *ctx, struct nk_image img)$/;"	f	typeref:typename:NK_API int
nk_button_image_label	nuklear/nuklear.h	/^NK_API int nk_button_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_button_image_text	nuklear/nuklear.h	/^nk_button_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_button_label	nuklear/nuklear.h	/^NK_API int nk_button_label(struct nk_context *ctx, const char *title)$/;"	f	typeref:typename:NK_API int
NK_BUTTON_LEFT	nuklear/nuklear.h	/^    NK_BUTTON_LEFT,$/;"	e	enum:nk_buttons
NK_BUTTON_MAX	nuklear/nuklear.h	/^    NK_BUTTON_MAX$/;"	e	enum:nk_buttons
NK_BUTTON_MIDDLE	nuklear/nuklear.h	/^    NK_BUTTON_MIDDLE,$/;"	e	enum:nk_buttons
NK_BUTTON_REPEATER	nuklear/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
NK_BUTTON_RIGHT	nuklear/nuklear.h	/^    NK_BUTTON_RIGHT,$/;"	e	enum:nk_buttons
nk_button_set_behavior	nuklear/nuklear.h	/^nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)$/;"	f	typeref:typename:NK_API void
nk_button_symbol	nuklear/nuklear.h	/^nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)$/;"	f	typeref:typename:NK_API int
nk_button_symbol_label	nuklear/nuklear.h	/^NK_API int nk_button_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f	typeref:typename:NK_API int
nk_button_symbol_text	nuklear/nuklear.h	/^nk_button_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f	typeref:typename:NK_API int
nk_button_text	nuklear/nuklear.h	/^nk_button_text(struct nk_context *ctx, const char *title, int len)$/;"	f	typeref:typename:NK_API int
nk_byte	nuklear/nuklear.h	/^typedef uint8_t nk_byte;$/;"	t	typeref:typename:uint8_t
NK_CAMEL_BONUS	nuklear/nuklear.h	/^    #define NK_CAMEL_BONUS /;"	d
nk_chart	nuklear/nuklear.h	/^struct nk_chart {$/;"	s
nk_chart_add_slot	nuklear/nuklear.h	/^nk_chart_add_slot(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f	typeref:typename:NK_API void
nk_chart_add_slot_colored	nuklear/nuklear.h	/^nk_chart_add_slot_colored(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f	typeref:typename:NK_API void
nk_chart_begin	nuklear/nuklear.h	/^nk_chart_begin(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f	typeref:typename:NK_API int
nk_chart_begin_colored	nuklear/nuklear.h	/^nk_chart_begin_colored(struct nk_context *ctx, enum nk_chart_type type,$/;"	f	typeref:typename:NK_API int
NK_CHART_CLICKED	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_COLUMN	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
nk_chart_end	nuklear/nuklear.h	/^nk_chart_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_chart_event	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	g
NK_CHART_HOVERING	nuklear/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_LINES	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX_SLOT	nuklear/nuklear.h	/^#define NK_CHART_MAX_SLOT /;"	d
nk_chart_push	nuklear/nuklear.h	/^nk_chart_push(struct nk_context *ctx, float value)$/;"	f	typeref:typename:NK_API nk_flags
nk_chart_push_column	nuklear/nuklear.h	/^nk_chart_push_column(const struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN nk_flags
nk_chart_push_line	nuklear/nuklear.h	/^nk_chart_push_line(struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN nk_flags
nk_chart_push_slot	nuklear/nuklear.h	/^nk_chart_push_slot(struct nk_context *ctx, float value, int slot)$/;"	f	typeref:typename:NK_API nk_flags
nk_chart_slot	nuklear/nuklear.h	/^struct nk_chart_slot {$/;"	s
nk_chart_type	nuklear/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	g
nk_char_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_char_align = NK_ALIGNOF(struct nk_tt_packedchar);$/;"	v	typeref:typename:NK_GLOBAL const nk_size
nk_checkbox_flags_label	nuklear/nuklear.h	/^NK_API int nk_checkbox_flags_label(struct nk_context *ctx, const char *label,$/;"	f	typeref:typename:NK_API int
nk_checkbox_flags_text	nuklear/nuklear.h	/^nk_checkbox_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f	typeref:typename:NK_API int
nk_checkbox_label	nuklear/nuklear.h	/^NK_API int nk_checkbox_label(struct nk_context *ctx, const char *label, int *active)$/;"	f	typeref:typename:NK_API int
nk_checkbox_text	nuklear/nuklear.h	/^nk_checkbox_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f	typeref:typename:NK_API int
nk_check_flags_label	nuklear/nuklear.h	/^NK_API unsigned int nk_check_flags_label(struct nk_context *ctx, const char *label,$/;"	f	typeref:typename:NK_API unsigned int
nk_check_flags_text	nuklear/nuklear.h	/^nk_check_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f	typeref:typename:NK_API unsigned int
nk_check_label	nuklear/nuklear.h	/^NK_API int nk_check_label(struct nk_context *ctx, const char *label, int active)$/;"	f	typeref:typename:NK_API int
nk_check_text	nuklear/nuklear.h	/^nk_check_text(struct nk_context *ctx, const char *text, int len, int active)$/;"	f	typeref:typename:NK_API int
NK_CLAMP	nuklear/nuklear.h	/^#define NK_CLAMP(/;"	d
nk_clear	nuklear/nuklear.h	/^nk_clear(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_clipboard	nuklear/nuklear.h	/^struct nk_clipboard {$/;"	s
NK_CLIPPING_OFF	nuklear/nuklear.h	/^    NK_CLIPPING_OFF = nk_false,$/;"	e	enum:nk_command_clipping
NK_CLIPPING_ON	nuklear/nuklear.h	/^    NK_CLIPPING_ON = nk_true$/;"	e	enum:nk_command_clipping
nk_collapse_states	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	g
NK_COLOR	nuklear/nuklear.h	/^#define NK_COLOR(/;"	d
nk_color	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	s
nk_colorf	nuklear/nuklear.h	/^    struct nk_colorf {float r,g,b;} out = {0,0,0};$/;"	s	function:nk_hsva_f
NK_COLOR_BORDER	nuklear/nuklear.h	/^    NK_COLOR_BORDER,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON	nuklear/nuklear.h	/^    NK_COLOR_BUTTON,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_BUTTON_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_HOVER	nuklear/nuklear.h	/^    NK_COLOR_BUTTON_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART	nuklear/nuklear.h	/^    NK_COLOR_CHART,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR	nuklear/nuklear.h	/^    NK_COLOR_CHART_COLOR,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR_HIGHLIGHT	nuklear/nuklear.h	/^    NK_COLOR_CHART_COLOR_HIGHLIGHT,$/;"	e	enum:nk_style_colors
NK_COLOR_COMBO	nuklear/nuklear.h	/^    NK_COLOR_COMBO,$/;"	e	enum:nk_style_colors
NK_COLOR_COUNT	nuklear/nuklear.h	/^    NK_COLOR_COUNT$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT	nuklear/nuklear.h	/^    NK_COLOR_EDIT,$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_EDIT_CURSOR,$/;"	e	enum:nk_style_colors
nk_color_f	nuklear/nuklear.h	/^nk_color_f(float *r, float *g, float *b, float *a, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_format	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	g
nk_color_fv	nuklear/nuklear.h	/^nk_color_fv(float *c, struct nk_color in)$/;"	f	typeref:typename:NK_API void
NK_COLOR_HEADER	nuklear/nuklear.h	/^    NK_COLOR_HEADER,$/;"	e	enum:nk_style_colors
nk_color_hex_rgb	nuklear/nuklear.h	/^nk_color_hex_rgb(char *output, struct nk_color col)$/;"	f	typeref:typename:NK_API void
nk_color_hex_rgba	nuklear/nuklear.h	/^nk_color_hex_rgba(char *output, struct nk_color col)$/;"	f	typeref:typename:NK_API void
nk_color_hsva_b	nuklear/nuklear.h	/^nk_color_hsva_b(nk_byte *h, nk_byte *s, nk_byte *v, nk_byte *a, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsva_bv	nuklear/nuklear.h	/^nk_color_hsva_bv(nk_byte *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsva_f	nuklear/nuklear.h	/^nk_color_hsva_f(float *out_h, float *out_s,$/;"	f	typeref:typename:NK_API void
nk_color_hsva_fv	nuklear/nuklear.h	/^nk_color_hsva_fv(float *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsva_i	nuklear/nuklear.h	/^nk_color_hsva_i(int *out_h, int *out_s, int *out_v,$/;"	f	typeref:typename:NK_API void
nk_color_hsva_iv	nuklear/nuklear.h	/^nk_color_hsva_iv(int *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_b	nuklear/nuklear.h	/^nk_color_hsv_b(nk_byte *out_h, nk_byte *out_s, nk_byte *out_v, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_bv	nuklear/nuklear.h	/^nk_color_hsv_bv(nk_byte *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_f	nuklear/nuklear.h	/^nk_color_hsv_f(float *out_h, float *out_s, float *out_v, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_fv	nuklear/nuklear.h	/^nk_color_hsv_fv(float *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_i	nuklear/nuklear.h	/^nk_color_hsv_i(int *out_h, int *out_s, int *out_v, struct nk_color in)$/;"	f	typeref:typename:NK_API void
nk_color_hsv_iv	nuklear/nuklear.h	/^nk_color_hsv_iv(int *out, struct nk_color in)$/;"	f	typeref:typename:NK_API void
NK_COLOR_MAP	nuklear/nuklear.h	/^#define NK_COLOR_MAP(/;"	d
nk_color_names	nuklear/nuklear.h	/^NK_GLOBAL const char *nk_color_names[NK_COLOR_COUNT] = {$/;"	v	typeref:typename:NK_GLOBAL const char * []
nk_color_pick	nuklear/nuklear.h	/^nk_color_pick(struct nk_context * ctx, struct nk_color *color,$/;"	f	typeref:typename:NK_API int
nk_color_picker	nuklear/nuklear.h	/^nk_color_picker(struct nk_context *ctx, struct nk_color color,$/;"	f	typeref:struct:nk_color
nk_color_picker_behavior	nuklear/nuklear.h	/^nk_color_picker_behavior(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
NK_COLOR_PROPERTY	nuklear/nuklear.h	/^    NK_COLOR_PROPERTY,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_HOVER	nuklear/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT	nuklear/nuklear.h	/^    NK_COLOR_SELECT,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SELECT_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER	nuklear/nuklear.h	/^    NK_COLOR_SLIDER,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_ACTIVE	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_HOVER	nuklear/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_TAB_HEADER	nuklear/nuklear.h	/^    NK_COLOR_TAB_HEADER,$/;"	e	enum:nk_style_colors
NK_COLOR_TEXT	nuklear/nuklear.h	/^    NK_COLOR_TEXT,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_CURSOR	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_HOVER	nuklear/nuklear.h	/^    NK_COLOR_TOGGLE_HOVER,$/;"	e	enum:nk_style_colors
nk_color_u32	nuklear/nuklear.h	/^nk_color_u32(struct nk_color in)$/;"	f	typeref:typename:NK_API nk_uint
NK_COLOR_WINDOW	nuklear/nuklear.h	/^    NK_COLOR_WINDOW,$/;"	e	enum:nk_style_colors
nk_combo	nuklear/nuklear.h	/^nk_combo(struct nk_context *ctx, const char **items, int count,$/;"	f	typeref:typename:NK_API int
nk_combobox	nuklear/nuklear.h	/^NK_API void nk_combobox(struct nk_context *ctx, const char **items, int count,$/;"	f	typeref:typename:NK_API void
nk_combobox_callback	nuklear/nuklear.h	/^NK_API void nk_combobox_callback(struct nk_context *ctx,$/;"	f	typeref:typename:NK_API void
nk_combobox_separator	nuklear/nuklear.h	/^NK_API void nk_combobox_separator(struct nk_context *ctx, const char *items_separated_by_separat/;"	f	typeref:typename:NK_API void
nk_combobox_string	nuklear/nuklear.h	/^NK_API void nk_combobox_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f	typeref:typename:NK_API void
nk_combo_begin	nuklear/nuklear.h	/^nk_combo_begin(struct nk_panel *layout, struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN int
nk_combo_begin_color	nuklear/nuklear.h	/^nk_combo_begin_color(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_image	nuklear/nuklear.h	/^nk_combo_begin_image(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_image_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_image_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_image_text	nuklear/nuklear.h	/^nk_combo_begin_image_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_symbol	nuklear/nuklear.h	/^nk_combo_begin_symbol(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_symbol_label	nuklear/nuklear.h	/^NK_API int nk_combo_begin_symbol_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_symbol_text	nuklear/nuklear.h	/^nk_combo_begin_symbol_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_begin_text	nuklear/nuklear.h	/^nk_combo_begin_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_combo_callback	nuklear/nuklear.h	/^nk_combo_callback(struct nk_context *ctx, void(*item_getter)(void*, int, const char**),$/;"	f	typeref:typename:NK_API int
nk_combo_close	nuklear/nuklear.h	/^NK_API void nk_combo_close(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_combo_end	nuklear/nuklear.h	/^NK_API void nk_combo_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_combo_item_image_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_combo_item_image_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_image_text(struct nk_context *ctx, struct nk_image img, const char *tex/;"	f	typeref:typename:NK_API int
nk_combo_item_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f	typeref:typename:NK_API int
nk_combo_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_combo_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f	typeref:typename:NK_API int
nk_combo_item_symbol_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f	typeref:typename:NK_API int
nk_combo_item_text	nuklear/nuklear.h	/^NK_API int nk_combo_item_text(struct nk_context *ctx, const char *text, int len,nk_flags align)$/;"	f	typeref:typename:NK_API int
nk_combo_separator	nuklear/nuklear.h	/^nk_combo_separator(struct nk_context *ctx, const char *items_separated_by_separator,$/;"	f	typeref:typename:NK_API int
nk_combo_string	nuklear/nuklear.h	/^nk_combo_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f	typeref:typename:NK_API int
nk_command	nuklear/nuklear.h	/^struct nk_command {$/;"	s
NK_COMMAND_ARC	nuklear/nuklear.h	/^    NK_COMMAND_ARC,$/;"	e	enum:nk_command_type
nk_command_arc	nuklear/nuklear.h	/^struct nk_command_arc {$/;"	s
NK_COMMAND_ARC_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_ARC_FILLED,$/;"	e	enum:nk_command_type
nk_command_arc_filled	nuklear/nuklear.h	/^struct nk_command_arc_filled {$/;"	s
nk_command_buffer	nuklear/nuklear.h	/^struct nk_command_buffer {$/;"	s
nk_command_buffer_init	nuklear/nuklear.h	/^nk_command_buffer_init(struct nk_command_buffer *cmdbuf,$/;"	f	typeref:typename:NK_INTERN void
nk_command_buffer_push	nuklear/nuklear.h	/^nk_command_buffer_push(struct nk_command_buffer* b,$/;"	f	typeref:typename:NK_INTERN void *
nk_command_buffer_reset	nuklear/nuklear.h	/^nk_command_buffer_reset(struct nk_command_buffer *buffer)$/;"	f	typeref:typename:NK_INTERN void
NK_COMMAND_CIRCLE	nuklear/nuklear.h	/^    NK_COMMAND_CIRCLE,$/;"	e	enum:nk_command_type
nk_command_circle	nuklear/nuklear.h	/^struct nk_command_circle {$/;"	s
NK_COMMAND_CIRCLE_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_CIRCLE_FILLED,$/;"	e	enum:nk_command_type
nk_command_circle_filled	nuklear/nuklear.h	/^struct nk_command_circle_filled {$/;"	s
nk_command_clipping	nuklear/nuklear.h	/^enum nk_command_clipping {$/;"	g
NK_COMMAND_CURVE	nuklear/nuklear.h	/^    NK_COMMAND_CURVE,$/;"	e	enum:nk_command_type
nk_command_curve	nuklear/nuklear.h	/^struct nk_command_curve {$/;"	s
NK_COMMAND_IMAGE	nuklear/nuklear.h	/^    NK_COMMAND_IMAGE$/;"	e	enum:nk_command_type
nk_command_image	nuklear/nuklear.h	/^struct nk_command_image {$/;"	s
NK_COMMAND_LINE	nuklear/nuklear.h	/^    NK_COMMAND_LINE,$/;"	e	enum:nk_command_type
nk_command_line	nuklear/nuklear.h	/^struct nk_command_line {$/;"	s
NK_COMMAND_NOP	nuklear/nuklear.h	/^    NK_COMMAND_NOP,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYGON	nuklear/nuklear.h	/^    NK_COMMAND_POLYGON,$/;"	e	enum:nk_command_type
nk_command_polygon	nuklear/nuklear.h	/^struct nk_command_polygon {$/;"	s
NK_COMMAND_POLYGON_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_POLYGON_FILLED,$/;"	e	enum:nk_command_type
nk_command_polygon_filled	nuklear/nuklear.h	/^struct nk_command_polygon_filled {$/;"	s
NK_COMMAND_POLYLINE	nuklear/nuklear.h	/^    NK_COMMAND_POLYLINE,$/;"	e	enum:nk_command_type
nk_command_polyline	nuklear/nuklear.h	/^struct nk_command_polyline {$/;"	s
NK_COMMAND_RECT	nuklear/nuklear.h	/^    NK_COMMAND_RECT,$/;"	e	enum:nk_command_type
nk_command_rect	nuklear/nuklear.h	/^struct nk_command_rect {$/;"	s
NK_COMMAND_RECT_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_RECT_FILLED,$/;"	e	enum:nk_command_type
nk_command_rect_filled	nuklear/nuklear.h	/^struct nk_command_rect_filled {$/;"	s
NK_COMMAND_RECT_MULTI_COLOR	nuklear/nuklear.h	/^    NK_COMMAND_RECT_MULTI_COLOR,$/;"	e	enum:nk_command_type
nk_command_rect_multi_color	nuklear/nuklear.h	/^struct nk_command_rect_multi_color {$/;"	s
NK_COMMAND_SCISSOR	nuklear/nuklear.h	/^    NK_COMMAND_SCISSOR,$/;"	e	enum:nk_command_type
nk_command_scissor	nuklear/nuklear.h	/^struct nk_command_scissor {$/;"	s
NK_COMMAND_TEXT	nuklear/nuklear.h	/^    NK_COMMAND_TEXT,$/;"	e	enum:nk_command_type
nk_command_text	nuklear/nuklear.h	/^struct nk_command_text {$/;"	s
NK_COMMAND_TRIANGLE	nuklear/nuklear.h	/^    NK_COMMAND_TRIANGLE,$/;"	e	enum:nk_command_type
nk_command_triangle	nuklear/nuklear.h	/^struct nk_command_triangle {$/;"	s
NK_COMMAND_TRIANGLE_FILLED	nuklear/nuklear.h	/^    NK_COMMAND_TRIANGLE_FILLED,$/;"	e	enum:nk_command_type
nk_command_triangle_filled	nuklear/nuklear.h	/^struct nk_command_triangle_filled {$/;"	s
nk_command_type	nuklear/nuklear.h	/^enum nk_command_type {$/;"	g
NK_CONTAINER_OF	nuklear/nuklear.h	/^#define NK_CONTAINER_OF(/;"	d
NK_CONTAINS	nuklear/nuklear.h	/^#define NK_CONTAINS(/;"	d
nk_context	nuklear/nuklear.h	/^struct nk_context {$/;"	s
nk_contextual_begin	nuklear/nuklear.h	/^nk_contextual_begin(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_contextual_close	nuklear/nuklear.h	/^nk_contextual_close(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_contextual_end	nuklear/nuklear.h	/^nk_contextual_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_contextual_item_image_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_contextual_item_image_text	nuklear/nuklear.h	/^nk_contextual_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_contextual_item_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f	typeref:typename:NK_API int
nk_contextual_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_contextual_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f	typeref:typename:NK_API int
nk_contextual_item_symbol_text	nuklear/nuklear.h	/^nk_contextual_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f	typeref:typename:NK_API int
nk_contextual_item_text	nuklear/nuklear.h	/^nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,$/;"	f	typeref:typename:NK_API int
nk_convert	nuklear/nuklear.h	/^nk_convert(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f	typeref:typename:NK_API void
nk_convert_config	nuklear/nuklear.h	/^struct nk_convert_config {$/;"	s
NK_COORD_PIXEL	nuklear/nuklear.h	/^    NK_COORD_PIXEL$/;"	e	enum:nk_font_coord_type
NK_COORD_UV	nuklear/nuklear.h	/^    NK_COORD_UV,$/;"	e	enum:nk_font_coord_type
nk_copy_f	nuklear/nuklear.h	/^typedef void(*nk_copy_f)(nk_handle, const char*, int len);$/;"	t	typeref:typename:void (*)(nk_handle,const char *,int len)
NK_COS	nuklear/nuklear.h	/^#define NK_COS /;"	d
nk_cos	nuklear/nuklear.h	/^nk_cos(float x)$/;"	f	typeref:typename:NK_INTERN float
nk_create_page_element	nuklear/nuklear.h	/^nk_create_page_element(struct nk_context *ctx)$/;"	f	typeref:struct:nk_page_element *
nk_create_table	nuklear/nuklear.h	/^nk_create_table(struct nk_context *ctx)$/;"	f	typeref:struct:nk_table *
nk_create_window	nuklear/nuklear.h	/^nk_create_window(struct nk_context *ctx)$/;"	f	typeref:typename:NK_INTERN void *
nk_cursor	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	s
NK_CURSOR_ARROW	nuklear/nuklear.h	/^    NK_CURSOR_ARROW,$/;"	e	enum:nk_style_cursor
NK_CURSOR_COUNT	nuklear/nuklear.h	/^    NK_CURSOR_COUNT$/;"	e	enum:nk_style_cursor
nk_cursor_data	nuklear/nuklear.h	/^    {NK_STORAGE const struct nk_vec2 nk_cursor_data[NK_CURSOR_COUNT][3] = {$/;"	s	function:nk_font_atlas_bake
NK_CURSOR_DATA_H	nuklear/nuklear.h	/^#define NK_CURSOR_DATA_H /;"	d
NK_CURSOR_DATA_W	nuklear/nuklear.h	/^#define NK_CURSOR_DATA_W /;"	d
NK_CURSOR_MOVE	nuklear/nuklear.h	/^    NK_CURSOR_MOVE,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_HORIZONTAL	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_HORIZONTAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_VERTICAL	nuklear/nuklear.h	/^    NK_CURSOR_RESIZE_VERTICAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_TEXT	nuklear/nuklear.h	/^    NK_CURSOR_TEXT,$/;"	e	enum:nk_style_cursor
nk_custom_cursor_data	nuklear/nuklear.h	/^nk_custom_cursor_data[NK_CURSOR_DATA_W * NK_CURSOR_DATA_H + 1] =$/;"	v	typeref:typename:NK_GLOBAL const char[]
nk_decode_85	nuklear/nuklear.h	/^nk_decode_85(unsigned char* dst, const unsigned char* src)$/;"	f	typeref:typename:NK_INTERN void
nk_decode_85_byte	nuklear/nuklear.h	/^nk_decode_85_byte(char c)$/;"	f	typeref:typename:NK_INTERN unsigned int
nk_decompress	nuklear/nuklear.h	/^nk_decompress(unsigned char *output, unsigned char *i, unsigned int length)$/;"	f	typeref:typename:NK_INTERN unsigned int
nk_decompress_length	nuklear/nuklear.h	/^nk_decompress_length(unsigned char *input)$/;"	f	typeref:typename:NK_INTERN unsigned int
nk_decompress_token	nuklear/nuklear.h	/^nk_decompress_token(unsigned char *i)$/;"	f	typeref:typename:NK_INTERN unsigned char *
nk_default_color_style	nuklear/nuklear.h	/^nk_default_color_style[NK_COLOR_COUNT] = {$/;"	s
NK_DEFAULT_COMMAND_BUFFER_SIZE	nuklear/nuklear.h	/^#define NK_DEFAULT_COMMAND_BUFFER_SIZE /;"	d
NK_DOWN	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
nk_do_button	nuklear/nuklear.h	/^nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,$/;"	f	typeref:typename:NK_INTERN int
nk_do_button_image	nuklear/nuklear.h	/^nk_do_button_image(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_button_symbol	nuklear/nuklear.h	/^nk_do_button_symbol(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_button_text	nuklear/nuklear.h	/^nk_do_button_text(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_button_text_image	nuklear/nuklear.h	/^nk_do_button_text_image(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_button_text_symbol	nuklear/nuklear.h	/^nk_do_button_text_symbol(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_color_picker	nuklear/nuklear.h	/^nk_do_color_picker(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_do_edit	nuklear/nuklear.h	/^nk_do_edit(nk_flags *state, struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN nk_flags
NK_DO_NOT_STOP_ON_NEW_LINE	nuklear/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon9874a1ee0804
nk_do_progress	nuklear/nuklear.h	/^nk_do_progress(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN nk_size
nk_do_property	nuklear/nuklear.h	/^nk_do_property(nk_flags *ws,$/;"	f	typeref:typename:NK_INTERN float
nk_do_scrollbarh	nuklear/nuklear.h	/^nk_do_scrollbarh(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN float
nk_do_scrollbarv	nuklear/nuklear.h	/^nk_do_scrollbarv(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN float
nk_do_selectable	nuklear/nuklear.h	/^nk_do_selectable(nk_flags *state, struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN int
nk_do_selectable_image	nuklear/nuklear.h	/^nk_do_selectable_image(nk_flags *state, struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN int
nk_do_slider	nuklear/nuklear.h	/^nk_do_slider(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN float
nk_do_toggle	nuklear/nuklear.h	/^nk_do_toggle(nk_flags *state,$/;"	f	typeref:typename:NK_INTERN int
nk_drag_behavior	nuklear/nuklear.h	/^nk_drag_behavior(nk_flags *state, const struct nk_input *in,$/;"	f	typeref:typename:NK_INTERN float
nk_draw_button	nuklear/nuklear.h	/^nk_draw_button(struct nk_command_buffer *out,$/;"	f	typeref:struct:nk_style_item *
nk_draw_button_image	nuklear/nuklear.h	/^nk_draw_button_image(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_button_symbol	nuklear/nuklear.h	/^nk_draw_button_symbol(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_button_text	nuklear/nuklear.h	/^nk_draw_button_text(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_button_text_image	nuklear/nuklear.h	/^nk_draw_button_text_image(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_button_text_symbol	nuklear/nuklear.h	/^nk_draw_button_text_symbol(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_checkbox	nuklear/nuklear.h	/^nk_draw_checkbox(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_color_picker	nuklear/nuklear.h	/^nk_draw_color_picker(struct nk_command_buffer *o, const struct nk_rect *matrix,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_command	nuklear/nuklear.h	/^struct nk_draw_command {$/;"	s
nk_draw_foreach	nuklear/nuklear.h	/^#define                         nk_draw_foreach(/;"	d
nk_draw_image	nuklear/nuklear.h	/^nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,$/;"	f	typeref:typename:NK_API void
nk_draw_index	nuklear/nuklear.h	/^typedef unsigned short nk_draw_index;$/;"	t	typeref:typename:unsigned short
nk_draw_list	nuklear/nuklear.h	/^struct nk_draw_list {$/;"	s
nk_draw_list_add_clip	nuklear/nuklear.h	/^nk_draw_list_add_clip(struct nk_draw_list *list, struct nk_rect rect)$/;"	f	typeref:typename:NK_INTERN void
nk_draw_list_add_image	nuklear/nuklear.h	/^nk_draw_list_add_image(struct nk_draw_list *list, struct nk_image texture,$/;"	f	typeref:typename:NK_API void
nk_draw_list_add_text	nuklear/nuklear.h	/^nk_draw_list_add_text(struct nk_draw_list *list, const struct nk_user_font *font,$/;"	f	typeref:typename:NK_API void
nk_draw_list_alloc_elements	nuklear/nuklear.h	/^nk_draw_list_alloc_elements(struct nk_draw_list *list, nk_size count)$/;"	f	typeref:typename:NK_INTERN nk_draw_index *
nk_draw_list_alloc_path	nuklear/nuklear.h	/^nk_draw_list_alloc_path(struct nk_draw_list *list, int count)$/;"	f	typeref:struct:nk_vec2 *
nk_draw_list_alloc_vertices	nuklear/nuklear.h	/^nk_draw_list_alloc_vertices(struct nk_draw_list *list, nk_size count)$/;"	f	typeref:struct:nk_draw_vertex *
nk_draw_list_clear	nuklear/nuklear.h	/^nk_draw_list_clear(struct nk_draw_list *list)$/;"	f	typeref:typename:NK_API void
nk_draw_list_command_last	nuklear/nuklear.h	/^nk_draw_list_command_last(struct nk_draw_list *list)$/;"	f	typeref:struct:nk_draw_command *
nk_draw_list_fill_circle	nuklear/nuklear.h	/^nk_draw_list_fill_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f	typeref:typename:NK_API void
nk_draw_list_fill_poly_convex	nuklear/nuklear.h	/^nk_draw_list_fill_poly_convex(struct nk_draw_list *list,$/;"	f	typeref:typename:NK_API void
nk_draw_list_fill_rect	nuklear/nuklear.h	/^nk_draw_list_fill_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_draw_list_fill_rect_multi_color	nuklear/nuklear.h	/^nk_draw_list_fill_rect_multi_color(struct nk_draw_list *list, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_draw_list_fill_triangle	nuklear/nuklear.h	/^nk_draw_list_fill_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f	typeref:typename:NK_API void
nk_draw_list_foreach	nuklear/nuklear.h	/^#define nk_draw_list_foreach(/;"	d
nk_draw_list_init	nuklear/nuklear.h	/^nk_draw_list_init(struct nk_draw_list *list)$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_arc_to	nuklear/nuklear.h	/^nk_draw_list_path_arc_to(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_arc_to_fast	nuklear/nuklear.h	/^nk_draw_list_path_arc_to_fast(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_clear	nuklear/nuklear.h	/^nk_draw_list_path_clear(struct nk_draw_list *list)$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_curve_to	nuklear/nuklear.h	/^nk_draw_list_path_curve_to(struct nk_draw_list *list, struct nk_vec2 p2,$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_fill	nuklear/nuklear.h	/^nk_draw_list_path_fill(struct nk_draw_list *list, struct nk_color color)$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_last	nuklear/nuklear.h	/^nk_draw_list_path_last(struct nk_draw_list *list)$/;"	f	typeref:struct:nk_vec2
nk_draw_list_path_line_to	nuklear/nuklear.h	/^nk_draw_list_path_line_to(struct nk_draw_list *list, struct nk_vec2 pos)$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_rect_to	nuklear/nuklear.h	/^nk_draw_list_path_rect_to(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f	typeref:typename:NK_API void
nk_draw_list_path_stroke	nuklear/nuklear.h	/^nk_draw_list_path_stroke(struct nk_draw_list *list, struct nk_color color,$/;"	f	typeref:typename:NK_API void
nk_draw_list_push_command	nuklear/nuklear.h	/^nk_draw_list_push_command(struct nk_draw_list *list, struct nk_rect clip,$/;"	f	typeref:struct:nk_draw_command *
nk_draw_list_push_image	nuklear/nuklear.h	/^nk_draw_list_push_image(struct nk_draw_list *list, nk_handle texture)$/;"	f	typeref:typename:NK_INTERN void
nk_draw_list_push_rect_uv	nuklear/nuklear.h	/^nk_draw_list_push_rect_uv(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_list_push_userdata	nuklear/nuklear.h	/^nk_draw_list_push_userdata(struct nk_draw_list *list, nk_handle userdata)$/;"	f	typeref:typename:NK_API void
nk_draw_list_setup	nuklear/nuklear.h	/^nk_draw_list_setup(struct nk_draw_list *canvas, float global_alpha,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke	nuklear/nuklear.h	/^enum nk_draw_list_stroke {$/;"	g
nk_draw_list_stroke_circle	nuklear/nuklear.h	/^nk_draw_list_stroke_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke_curve	nuklear/nuklear.h	/^nk_draw_list_stroke_curve(struct nk_draw_list *list, struct nk_vec2 p0,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke_line	nuklear/nuklear.h	/^nk_draw_list_stroke_line(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke_poly_line	nuklear/nuklear.h	/^nk_draw_list_stroke_poly_line(struct nk_draw_list *list, const struct nk_vec2 *points,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke_rect	nuklear/nuklear.h	/^nk_draw_list_stroke_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_draw_list_stroke_triangle	nuklear/nuklear.h	/^nk_draw_list_stroke_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f	typeref:typename:NK_API void
nk_draw_null_texture	nuklear/nuklear.h	/^struct nk_draw_null_texture {$/;"	s
nk_draw_option	nuklear/nuklear.h	/^nk_draw_option(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_progress	nuklear/nuklear.h	/^nk_draw_progress(struct nk_command_buffer *out, nk_flags state,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_property	nuklear/nuklear.h	/^nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_scrollbar	nuklear/nuklear.h	/^nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_selectable	nuklear/nuklear.h	/^nk_draw_selectable(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_slider	nuklear/nuklear.h	/^nk_draw_slider(struct nk_command_buffer *out, nk_flags state,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_symbol	nuklear/nuklear.h	/^nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,$/;"	f	typeref:typename:NK_INTERN void
nk_draw_text	nuklear/nuklear.h	/^nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,$/;"	f	typeref:typename:NK_API void
nk_draw_vertex	nuklear/nuklear.h	/^nk_draw_vertex(struct nk_vec2 pos, struct nk_vec2 uv, nk_draw_vertex_color col)$/;"	f	typeref:struct:nk_draw_vertex
nk_draw_vertex	nuklear/nuklear.h	/^struct nk_draw_vertex {$/;"	s
nk_draw_vertex_color	nuklear/nuklear.h	/^typedef nk_uint nk_draw_vertex_color;$/;"	t	typeref:typename:nk_uint
NK_DYNAMIC	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_EDIT_ACTIVATED	nuklear/nuklear.h	/^    NK_EDIT_ACTIVATED   = NK_FLAG(2), \/* edit widget went from state inactive to state active */;"	e	enum:nk_edit_events
NK_EDIT_ACTIVE	nuklear/nuklear.h	/^    NK_EDIT_ACTIVE      = NK_FLAG(0), \/* edit widget is currently being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_ALLOW_TAB	nuklear/nuklear.h	/^    NK_EDIT_ALLOW_TAB               = NK_FLAG(3),$/;"	e	enum:nk_edit_flags
NK_EDIT_ALWAYS_INSERT_MODE	nuklear/nuklear.h	/^    NK_EDIT_ALWAYS_INSERT_MODE      = NK_FLAG(9),$/;"	e	enum:nk_edit_flags
NK_EDIT_AUTO_SELECT	nuklear/nuklear.h	/^    NK_EDIT_AUTO_SELECT             = NK_FLAG(1),$/;"	e	enum:nk_edit_flags
NK_EDIT_BOX	nuklear/nuklear.h	/^    NK_EDIT_BOX     = NK_EDIT_ALWAYS_INSERT_MODE| NK_EDIT_SELECTABLE|$/;"	e	enum:nk_edit_types
nk_edit_buffer	nuklear/nuklear.h	/^nk_edit_buffer(struct nk_context *ctx, nk_flags flags,$/;"	f	typeref:typename:NK_API nk_flags
NK_EDIT_CLIPBOARD	nuklear/nuklear.h	/^    NK_EDIT_CLIPBOARD               = NK_FLAG(6),$/;"	e	enum:nk_edit_flags
NK_EDIT_COMMITED	nuklear/nuklear.h	/^    NK_EDIT_COMMITED    = NK_FLAG(4) \/* edit widget has received an enter and lost focus *\/$/;"	e	enum:nk_edit_events
NK_EDIT_CTRL_ENTER_NEWLINE	nuklear/nuklear.h	/^    NK_EDIT_CTRL_ENTER_NEWLINE      = NK_FLAG(7),$/;"	e	enum:nk_edit_flags
NK_EDIT_DEACTIVATED	nuklear/nuklear.h	/^    NK_EDIT_DEACTIVATED = NK_FLAG(3), \/* edit widget went from state active to state inactive */;"	e	enum:nk_edit_events
NK_EDIT_DEFAULT	nuklear/nuklear.h	/^    NK_EDIT_DEFAULT                 = 0,$/;"	e	enum:nk_edit_flags
nk_edit_draw_text	nuklear/nuklear.h	/^nk_edit_draw_text(struct nk_command_buffer *out,$/;"	f	typeref:typename:NK_INTERN void
NK_EDIT_EDITOR	nuklear/nuklear.h	/^    NK_EDIT_EDITOR  = NK_EDIT_SELECTABLE|NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB|$/;"	e	enum:nk_edit_types
nk_edit_events	nuklear/nuklear.h	/^enum nk_edit_events {$/;"	g
NK_EDIT_FIELD	nuklear/nuklear.h	/^    NK_EDIT_FIELD   = NK_EDIT_SIMPLE|NK_EDIT_SELECTABLE,$/;"	e	enum:nk_edit_types
nk_edit_flags	nuklear/nuklear.h	/^enum nk_edit_flags {$/;"	g
NK_EDIT_INACTIVE	nuklear/nuklear.h	/^    NK_EDIT_INACTIVE    = NK_FLAG(1), \/* edit widget is not active and is not being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_MULTILINE	nuklear/nuklear.h	/^    NK_EDIT_MULTILINE               = NK_FLAG(11)$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_CURSOR	nuklear/nuklear.h	/^    NK_EDIT_NO_CURSOR               = NK_FLAG(4),$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_HORIZONTAL_SCROLL	nuklear/nuklear.h	/^    NK_EDIT_NO_HORIZONTAL_SCROLL    = NK_FLAG(8),$/;"	e	enum:nk_edit_flags
NK_EDIT_READ_ONLY	nuklear/nuklear.h	/^    NK_EDIT_READ_ONLY               = NK_FLAG(0),$/;"	e	enum:nk_edit_flags
NK_EDIT_SELECTABLE	nuklear/nuklear.h	/^    NK_EDIT_SELECTABLE              = NK_FLAG(5),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIG_ENTER	nuklear/nuklear.h	/^    NK_EDIT_SIG_ENTER               = NK_FLAG(2),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIMPLE	nuklear/nuklear.h	/^    NK_EDIT_SIMPLE  = NK_EDIT_ALWAYS_INSERT_MODE,$/;"	e	enum:nk_edit_types
nk_edit_state	nuklear/nuklear.h	/^struct nk_edit_state {$/;"	s
nk_edit_string	nuklear/nuklear.h	/^nk_edit_string(struct nk_context *ctx, nk_flags flags,$/;"	f	typeref:typename:NK_API nk_flags
nk_edit_types	nuklear/nuklear.h	/^enum nk_edit_types {$/;"	g
nk_end	nuklear/nuklear.h	/^nk_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_false	nuklear/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon9874a1ee0104
NK_FILE_LINE	nuklear/nuklear.h	/^#define NK_FILE_LINE /;"	d
nk_file_load	nuklear/nuklear.h	/^nk_file_load(const char* path, nk_size* siz, struct nk_allocator *alloc)$/;"	f	typeref:typename:NK_INTERN char *
nk_fill_arc	nuklear/nuklear.h	/^nk_fill_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f	typeref:typename:NK_API void
nk_fill_circle	nuklear/nuklear.h	/^nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)$/;"	f	typeref:typename:NK_API void
nk_fill_polygon	nuklear/nuklear.h	/^nk_fill_polygon(struct nk_command_buffer *b, float *points, int point_count,$/;"	f	typeref:typename:NK_API void
nk_fill_rect	nuklear/nuklear.h	/^nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_fill_rect_multi_color	nuklear/nuklear.h	/^nk_fill_rect_multi_color(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_fill_triangle	nuklear/nuklear.h	/^nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f	typeref:typename:NK_API void
nk_filter	nuklear/nuklear.h	/^typedef int(*nk_filter)(const struct nk_text_edit*, nk_rune unicode);$/;"	t	typeref:typename:int (*)(const struct nk_text_edit *,nk_rune unicode)
nk_filter_ascii	nuklear/nuklear.h	/^nk_filter_ascii(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
nk_filter_binary	nuklear/nuklear.h	/^nk_filter_binary(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
nk_filter_decimal	nuklear/nuklear.h	/^nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
nk_filter_default	nuklear/nuklear.h	/^NK_API int nk_filter_default(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
NK_FILTER_FLOAT	nuklear/nuklear.h	/^    NK_FILTER_FLOAT$/;"	e	enum:nk_property_filter
nk_filter_float	nuklear/nuklear.h	/^nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
nk_filter_hex	nuklear/nuklear.h	/^nk_filter_hex(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
NK_FILTER_INT	nuklear/nuklear.h	/^    NK_FILTER_INT,$/;"	e	enum:nk_property_filter
nk_filter_oct	nuklear/nuklear.h	/^nk_filter_oct(const struct nk_text_edit *box, nk_rune unicode)$/;"	f	typeref:typename:NK_API int
nk_find_value	nuklear/nuklear.h	/^nk_find_value(struct nk_window *win, nk_hash name)$/;"	f	typeref:typename:NK_INTERN nk_uint *
nk_find_window	nuklear/nuklear.h	/^nk_find_window(struct nk_context *ctx, nk_hash hash)$/;"	f	typeref:struct:nk_window *
nk_finish	nuklear/nuklear.h	/^nk_finish(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
nk_finish_buffer	nuklear/nuklear.h	/^nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f	typeref:typename:NK_INTERN void
nk_finish_popup	nuklear/nuklear.h	/^nk_finish_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
NK_FIXED	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	e	enum:nk_modify
NK_FLAG	nuklear/nuklear.h	/^#define NK_FLAG(/;"	d
nk_flags	nuklear/nuklear.h	/^typedef uint32_t nk_flags;$/;"	t	typeref:typename:uint32_t
NK_FLOAT_PRECISION	nuklear/nuklear.h	/^NK_GLOBAL const float NK_FLOAT_PRECISION = 0.00000000000001f;$/;"	v	typeref:typename:NK_GLOBAL const float
nk_font	nuklear/nuklear.h	/^struct nk_font {$/;"	s
nk_font_atlas	nuklear/nuklear.h	/^struct nk_font_atlas {$/;"	s
nk_font_atlas_add	nuklear/nuklear.h	/^nk_font_atlas_add(struct nk_font_atlas *atlas, const struct nk_font_config *config)$/;"	f	typeref:struct:nk_font *
nk_font_atlas_add_compressed	nuklear/nuklear.h	/^nk_font_atlas_add_compressed(struct nk_font_atlas *atlas,$/;"	f	typeref:struct:nk_font *
nk_font_atlas_add_compressed_base85	nuklear/nuklear.h	/^nk_font_atlas_add_compressed_base85(struct nk_font_atlas *atlas,$/;"	f	typeref:struct:nk_font *
nk_font_atlas_add_default	nuklear/nuklear.h	/^nk_font_atlas_add_default(struct nk_font_atlas *atlas,$/;"	f	typeref:struct:nk_font *
nk_font_atlas_add_from_file	nuklear/nuklear.h	/^nk_font_atlas_add_from_file(struct nk_font_atlas *atlas, const char *file_path,$/;"	f	typeref:struct:nk_font *
nk_font_atlas_add_from_memory	nuklear/nuklear.h	/^nk_font_atlas_add_from_memory(struct nk_font_atlas *atlas, void *memory,$/;"	f	typeref:struct:nk_font *
NK_FONT_ATLAS_ALPHA8	nuklear/nuklear.h	/^    NK_FONT_ATLAS_ALPHA8,$/;"	e	enum:nk_font_atlas_format
nk_font_atlas_bake	nuklear/nuklear.h	/^nk_font_atlas_bake(struct nk_font_atlas *atlas, int *width, int *height,$/;"	f	typeref:typename:NK_API const void *
nk_font_atlas_begin	nuklear/nuklear.h	/^nk_font_atlas_begin(struct nk_font_atlas *atlas)$/;"	f	typeref:typename:NK_API void
nk_font_atlas_clear	nuklear/nuklear.h	/^nk_font_atlas_clear(struct nk_font_atlas *atlas)$/;"	f	typeref:typename:NK_API void
nk_font_atlas_end	nuklear/nuklear.h	/^nk_font_atlas_end(struct nk_font_atlas *atlas, nk_handle texture,$/;"	f	typeref:typename:NK_API void
nk_font_atlas_format	nuklear/nuklear.h	/^enum nk_font_atlas_format {$/;"	g
nk_font_atlas_init	nuklear/nuklear.h	/^nk_font_atlas_init(struct nk_font_atlas *atlas, struct nk_allocator *alloc)$/;"	f	typeref:typename:NK_API void
nk_font_atlas_init_custom	nuklear/nuklear.h	/^nk_font_atlas_init_custom(struct nk_font_atlas *atlas,$/;"	f	typeref:typename:NK_API void
nk_font_atlas_init_default	nuklear/nuklear.h	/^nk_font_atlas_init_default(struct nk_font_atlas *atlas)$/;"	f	typeref:typename:NK_API void
NK_FONT_ATLAS_RGBA32	nuklear/nuklear.h	/^    NK_FONT_ATLAS_RGBA32$/;"	e	enum:nk_font_atlas_format
nk_font_bake	nuklear/nuklear.h	/^nk_font_bake(struct nk_font_baker *baker, void *image_memory, int width, int height,$/;"	f	typeref:typename:NK_INTERN void
nk_font_baker	nuklear/nuklear.h	/^nk_font_baker(void *memory, int glyph_count, int count, struct nk_allocator *alloc)$/;"	f	typeref:struct:nk_font_baker *
nk_font_baker	nuklear/nuklear.h	/^struct nk_font_baker {$/;"	s
nk_font_baker_memory	nuklear/nuklear.h	/^nk_font_baker_memory(nk_size *temp, int *glyph_count,$/;"	f	typeref:typename:NK_INTERN void
nk_font_bake_convert	nuklear/nuklear.h	/^nk_font_bake_convert(void *out_memory, int img_width, int img_height,$/;"	f	typeref:typename:NK_INTERN void
nk_font_bake_custom_data	nuklear/nuklear.h	/^nk_font_bake_custom_data(void *img_memory, int img_width, int img_height,$/;"	f	typeref:typename:NK_INTERN void
nk_font_bake_data	nuklear/nuklear.h	/^struct nk_font_bake_data {$/;"	s
nk_font_bake_pack	nuklear/nuklear.h	/^nk_font_bake_pack(struct nk_font_baker *baker,$/;"	f	typeref:typename:NK_INTERN int
nk_font_chinese_glyph_ranges	nuklear/nuklear.h	/^nk_font_chinese_glyph_ranges(void)$/;"	f	typeref:typename:NK_API const nk_rune *
nk_font_config	nuklear/nuklear.h	/^nk_font_config(float pixel_height)$/;"	f	typeref:struct:nk_font_config
nk_font_config	nuklear/nuklear.h	/^struct nk_font_config {$/;"	s
nk_font_coord_type	nuklear/nuklear.h	/^enum nk_font_coord_type {$/;"	g
nk_font_cyrillic_glyph_ranges	nuklear/nuklear.h	/^nk_font_cyrillic_glyph_ranges(void)$/;"	f	typeref:typename:NK_API const nk_rune *
nk_font_default_glyph_ranges	nuklear/nuklear.h	/^nk_font_default_glyph_ranges(void)$/;"	f	typeref:typename:NK_API const nk_rune *
nk_font_find_glyph	nuklear/nuklear.h	/^nk_font_find_glyph(struct nk_font *font, nk_rune unicode)$/;"	f	typeref:struct:nk_font_glyph *
nk_font_glyph	nuklear/nuklear.h	/^struct nk_font_glyph {$/;"	s
nk_font_init	nuklear/nuklear.h	/^nk_font_init(struct nk_font *font, float pixel_height,$/;"	f	typeref:typename:NK_INTERN void
nk_font_korean_glyph_ranges	nuklear/nuklear.h	/^nk_font_korean_glyph_ranges(void)$/;"	f	typeref:typename:NK_API const nk_rune *
nk_font_query_font_glyph	nuklear/nuklear.h	/^nk_font_query_font_glyph(nk_handle handle, float height,$/;"	f	typeref:typename:NK_INTERN void
nk_font_text_width	nuklear/nuklear.h	/^nk_font_text_width(nk_handle handle, float height, const char *text, int len)$/;"	f	typeref:typename:NK_INTERN float
nk_foreach	nuklear/nuklear.h	/^#define                         nk_foreach(/;"	d
nk_free	nuklear/nuklear.h	/^nk_free(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_free_page_element	nuklear/nuklear.h	/^nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)$/;"	f	typeref:typename:NK_INTERN void
nk_free_table	nuklear/nuklear.h	/^nk_free_table(struct nk_context *ctx, struct nk_table *tbl)$/;"	f	typeref:typename:NK_INTERN void
nk_free_window	nuklear/nuklear.h	/^nk_free_window(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
nk_ftos	nuklear/nuklear.h	/^nk_ftos(char *s, float n)$/;"	f	typeref:typename:NK_INTERN int
nk_get_null_rect	nuklear/nuklear.h	/^nk_get_null_rect(void)$/;"	f	typeref:struct:nk_rect
nk_gflw3_scroll_callback	nuklear/nuklear_glfw_gl3.h	/^nk_gflw3_scroll_callback(GLFWwindow *win, double xoff, double yoff)$/;"	f	typeref:typename:NK_API void
nk_glfw	nuklear/nuklear_glfw_gl3.h	/^static struct nk_glfw {$/;"	s
nk_glfw3_char_callback	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_char_callback(GLFWwindow *win, unsigned int codepoint)$/;"	f	typeref:typename:NK_API void
nk_glfw3_clipbard_copy	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_clipbard_copy(nk_handle usr, const char *text, int len)$/;"	f	typeref:typename:NK_INTERN void
nk_glfw3_clipbard_paste	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_clipbard_paste(nk_handle usr, struct nk_text_edit *edit)$/;"	f	typeref:typename:NK_INTERN void
NK_GLFW3_DEFAULT	nuklear/nuklear_glfw_gl3.h	/^    NK_GLFW3_DEFAULT=0,$/;"	e	enum:nk_glfw_init_state
nk_glfw3_device_create	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_create(void)$/;"	f	typeref:typename:NK_API void
nk_glfw3_device_destroy	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_destroy(void)$/;"	f	typeref:typename:NK_API void
nk_glfw3_device_upload_atlas	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_device_upload_atlas(const void *image, int width, int height)$/;"	f	typeref:typename:NK_INTERN void
nk_glfw3_font_stash_begin	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_font_stash_begin(struct nk_font_atlas **atlas)$/;"	f	typeref:typename:NK_API void
nk_glfw3_font_stash_end	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_font_stash_end(void)$/;"	f	typeref:typename:NK_API void
nk_glfw3_init	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_init(GLFWwindow *win, enum nk_glfw_init_state init_state)$/;"	f	typeref:struct:nk_context *
NK_GLFW3_INSTALL_CALLBACKS	nuklear/nuklear_glfw_gl3.h	/^    NK_GLFW3_INSTALL_CALLBACKS$/;"	e	enum:nk_glfw_init_state
nk_glfw3_new_frame	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_new_frame(void)$/;"	f	typeref:typename:NK_API void
nk_glfw3_render	nuklear/nuklear_glfw_gl3.h	/^nk_glfw3_render(enum nk_anti_aliasing AA, int max_vertex_buffer, int max_element_buffer)$/;"	f	typeref:typename:NK_API void
nk_glfw3_shutdown	nuklear/nuklear_glfw_gl3.h	/^void nk_glfw3_shutdown(void)$/;"	f	typeref:typename:NK_API void
nk_glfw_device	nuklear/nuklear_glfw_gl3.h	/^struct nk_glfw_device {$/;"	s
NK_GLFW_GL3_H_	nuklear/nuklear_glfw_gl3.h	/^#define NK_GLFW_GL3_H_$/;"	d
NK_GLFW_GL3_IMPLEMENTATION	main.cpp	/^#define NK_GLFW_GL3_IMPLEMENTATION$/;"	d	file:
nk_glfw_init_state	nuklear/nuklear_glfw_gl3.h	/^enum nk_glfw_init_state{$/;"	g
NK_GLFW_TEXT_MAX	nuklear/nuklear_glfw_gl3.h	/^#define NK_GLFW_TEXT_MAX /;"	d
NK_GLOBAL	nuklear/nuklear.h	/^#define NK_GLOBAL /;"	d
nk_glyph	nuklear/nuklear.h	/^typedef char nk_glyph[NK_UTF_SIZE];$/;"	t	typeref:typename:char[NK_UTF_SIZE]
nk_group_begin	nuklear/nuklear.h	/^nk_group_begin(struct nk_context *ctx, struct nk_panel *layout, const char *title,$/;"	f	typeref:typename:NK_API int
nk_group_end	nuklear/nuklear.h	/^nk_group_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_handle	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	t	typeref:union:__anon9874a1ee020c
nk_handle_id	nuklear/nuklear.h	/^nk_handle_id(int id)$/;"	f	typeref:typename:NK_API nk_handle
nk_handle_ptr	nuklear/nuklear.h	/^nk_handle_ptr(void *ptr)$/;"	f	typeref:typename:NK_API nk_handle
nk_hash	nuklear/nuklear.h	/^typedef uint32_t nk_hash;$/;"	t	typeref:typename:uint32_t
NK_HEADER_LEFT	nuklear/nuklear.h	/^    NK_HEADER_LEFT,$/;"	e	enum:nk_style_header_align
NK_HEADER_RIGHT	nuklear/nuklear.h	/^    NK_HEADER_RIGHT$/;"	e	enum:nk_style_header_align
nk_heading	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	g
nk_helper	nuklear/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	s
nk_helper	nuklear/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	s
NK_HIDDEN	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	e	enum:nk_show_states
NK_HORIZONTAL	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
nk_hsv	nuklear/nuklear.h	/^nk_hsv(int h, int s, int v)$/;"	f	typeref:struct:nk_color
nk_hsva	nuklear/nuklear.h	/^nk_hsva(int h, int s, int v, int a)$/;"	f	typeref:struct:nk_color
nk_hsva_bv	nuklear/nuklear.h	/^nk_hsva_bv(const nk_byte *c)$/;"	f	typeref:struct:nk_color
nk_hsva_f	nuklear/nuklear.h	/^nk_hsva_f(float h, float s, float v, float a)$/;"	f	typeref:struct:nk_color
nk_hsva_fv	nuklear/nuklear.h	/^nk_hsva_fv(const float *c)$/;"	f	typeref:struct:nk_color
nk_hsva_iv	nuklear/nuklear.h	/^nk_hsva_iv(const int *c)$/;"	f	typeref:struct:nk_color
nk_hsv_bv	nuklear/nuklear.h	/^nk_hsv_bv(const nk_byte *c)$/;"	f	typeref:struct:nk_color
nk_hsv_f	nuklear/nuklear.h	/^nk_hsv_f(float h, float s, float v)$/;"	f	typeref:struct:nk_color
nk_hsv_fv	nuklear/nuklear.h	/^nk_hsv_fv(const float *c)$/;"	f	typeref:struct:nk_color
nk_hsv_iv	nuklear/nuklear.h	/^nk_hsv_iv(const int *c)$/;"	f	typeref:struct:nk_color
nk_iceil	nuklear/nuklear.h	/^nk_iceil(float x)$/;"	f	typeref:typename:NK_INTERN int
nk_ifloor	nuklear/nuklear.h	/^nk_ifloor(float x)$/;"	f	typeref:typename:NK_INTERN int
nk_image	nuklear/nuklear.h	/^nk_image(struct nk_context *ctx, struct nk_image img)$/;"	f	typeref:typename:NK_API void
nk_image	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	s
nk_image_id	nuklear/nuklear.h	/^nk_image_id(int id)$/;"	f	typeref:struct:nk_image
nk_image_is_subimage	nuklear/nuklear.h	/^nk_image_is_subimage(const struct nk_image* img)$/;"	f	typeref:typename:NK_API int
nk_image_ptr	nuklear/nuklear.h	/^nk_image_ptr(void *ptr)$/;"	f	typeref:struct:nk_image
NK_IMPLEMENTATION	main.cpp	/^#define NK_IMPLEMENTATION$/;"	d	file:
NK_INBOX	nuklear/nuklear.h	/^#define NK_INBOX(/;"	d
NK_INCLUDE_DEFAULT_ALLOCATOR	main.cpp	/^#define NK_INCLUDE_DEFAULT_ALLOCATOR$/;"	d	file:
NK_INCLUDE_DEFAULT_FONT	main.cpp	/^#define NK_INCLUDE_DEFAULT_FONT$/;"	d	file:
NK_INCLUDE_FIXED_TYPES	main.cpp	/^#define NK_INCLUDE_FIXED_TYPES$/;"	d	file:
NK_INCLUDE_FONT_BAKING	main.cpp	/^#define NK_INCLUDE_FONT_BAKING$/;"	d	file:
NK_INCLUDE_STANDARD_IO	main.cpp	/^#define NK_INCLUDE_STANDARD_IO$/;"	d	file:
NK_INCLUDE_VERTEX_BUFFER_OUTPUT	main.cpp	/^#define NK_INCLUDE_VERTEX_BUFFER_OUTPUT$/;"	d	file:
nk_init	nuklear/nuklear.h	/^nk_init(struct nk_context *ctx, struct nk_allocator *alloc,$/;"	f	typeref:typename:NK_API int
nk_init_custom	nuklear/nuklear.h	/^nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f	typeref:typename:NK_API int
nk_init_default	nuklear/nuklear.h	/^nk_init_default(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f	typeref:typename:NK_API int
nk_init_fixed	nuklear/nuklear.h	/^nk_init_fixed(struct nk_context *ctx, void *memory, nk_size size,$/;"	f	typeref:typename:NK_API int
nk_input	nuklear/nuklear.h	/^struct nk_input {$/;"	s
nk_input_any_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_any_mouse_click_in_rect(const struct nk_input *in, struct nk_rect b)$/;"	f	typeref:typename:NK_API int
nk_input_begin	nuklear/nuklear.h	/^nk_input_begin(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_input_button	nuklear/nuklear.h	/^nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, int down)$/;"	f	typeref:typename:NK_API void
nk_input_char	nuklear/nuklear.h	/^nk_input_char(struct nk_context *ctx, char c)$/;"	f	typeref:typename:NK_API void
nk_input_end	nuklear/nuklear.h	/^nk_input_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_input_glyph	nuklear/nuklear.h	/^nk_input_glyph(struct nk_context *ctx, const nk_glyph glyph)$/;"	f	typeref:typename:NK_API void
nk_input_has_mouse_click	nuklear/nuklear.h	/^nk_input_has_mouse_click(const struct nk_input *i, enum nk_buttons id)$/;"	f	typeref:typename:NK_API int
nk_input_has_mouse_click_down_in_rect	nuklear/nuklear.h	/^nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f	typeref:typename:NK_API int
nk_input_has_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f	typeref:typename:NK_API int
nk_input_is_key_down	nuklear/nuklear.h	/^nk_input_is_key_down(const struct nk_input *i, enum nk_keys key)$/;"	f	typeref:typename:NK_API int
nk_input_is_key_pressed	nuklear/nuklear.h	/^nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)$/;"	f	typeref:typename:NK_API int
nk_input_is_key_released	nuklear/nuklear.h	/^nk_input_is_key_released(const struct nk_input *i, enum nk_keys key)$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_click_down_in_rect	nuklear/nuklear.h	/^nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_click_in_rect	nuklear/nuklear.h	/^nk_input_is_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_down	nuklear/nuklear.h	/^nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_hovering_rect	nuklear/nuklear.h	/^nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_pressed	nuklear/nuklear.h	/^nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_prev_hovering_rect	nuklear/nuklear.h	/^nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f	typeref:typename:NK_API int
nk_input_is_mouse_released	nuklear/nuklear.h	/^nk_input_is_mouse_released(const struct nk_input *i, enum nk_buttons id)$/;"	f	typeref:typename:NK_API int
nk_input_key	nuklear/nuklear.h	/^nk_input_key(struct nk_context *ctx, enum nk_keys key, int down)$/;"	f	typeref:typename:NK_API void
NK_INPUT_MAX	nuklear/nuklear.h	/^#define NK_INPUT_MAX /;"	d
nk_input_motion	nuklear/nuklear.h	/^nk_input_motion(struct nk_context *ctx, int x, int y)$/;"	f	typeref:typename:NK_API void
nk_input_mouse_clicked	nuklear/nuklear.h	/^nk_input_mouse_clicked(const struct nk_input *i, enum nk_buttons id, struct nk_rect rect)$/;"	f	typeref:typename:NK_API int
nk_input_scroll	nuklear/nuklear.h	/^nk_input_scroll(struct nk_context *ctx, float y)$/;"	f	typeref:typename:NK_API void
nk_input_unicode	nuklear/nuklear.h	/^nk_input_unicode(struct nk_context *ctx, nk_rune unicode)$/;"	f	typeref:typename:NK_API void
nk_insert_window	nuklear/nuklear.h	/^nk_insert_window(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
nk_int	nuklear/nuklear.h	/^typedef int32_t nk_int;$/;"	t	typeref:typename:int32_t
NK_INTERN	nuklear/nuklear.h	/^#define NK_INTERN /;"	d
NK_INTERSECT	nuklear/nuklear.h	/^#define NK_INTERSECT(/;"	d
nk_inv_sqrt	nuklear/nuklear.h	/^nk_inv_sqrt(float number)$/;"	f	typeref:typename:NK_INTERN float
nk_is_lower	nuklear/nuklear.h	/^NK_INTERN int nk_is_lower(int c) {return (c >= 'a' && c <= 'z') || (c >= 0xE0 && c <= 0xFF);}$/;"	f	typeref:typename:NK_INTERN int
nk_is_upper	nuklear/nuklear.h	/^NK_INTERN int nk_is_upper(int c){return (c >= 'A' && c <= 'Z') || (c >= 0xC0 && c <= 0xDF);}$/;"	f	typeref:typename:NK_INTERN int
nk_is_word_boundary	nuklear/nuklear.h	/^nk_is_word_boundary( struct nk_text_edit *state, int idx)$/;"	f	typeref:typename:NK_INTERN int
nk_item_is_any_active	nuklear/nuklear.h	/^nk_item_is_any_active(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API int
nk_key	nuklear/nuklear.h	/^struct nk_key {$/;"	s
nk_keyboard	nuklear/nuklear.h	/^struct nk_keyboard {$/;"	s
nk_keys	nuklear/nuklear.h	/^enum nk_keys {$/;"	g
NK_KEY_BACKSPACE	nuklear/nuklear.h	/^    NK_KEY_BACKSPACE,$/;"	e	enum:nk_keys
NK_KEY_COPY	nuklear/nuklear.h	/^    NK_KEY_COPY,$/;"	e	enum:nk_keys
NK_KEY_CTRL	nuklear/nuklear.h	/^    NK_KEY_CTRL,$/;"	e	enum:nk_keys
NK_KEY_CUT	nuklear/nuklear.h	/^    NK_KEY_CUT,$/;"	e	enum:nk_keys
NK_KEY_DEL	nuklear/nuklear.h	/^    NK_KEY_DEL,$/;"	e	enum:nk_keys
NK_KEY_DOWN	nuklear/nuklear.h	/^    NK_KEY_DOWN,$/;"	e	enum:nk_keys
NK_KEY_ENTER	nuklear/nuklear.h	/^    NK_KEY_ENTER,$/;"	e	enum:nk_keys
NK_KEY_LEFT	nuklear/nuklear.h	/^    NK_KEY_LEFT,$/;"	e	enum:nk_keys
NK_KEY_MAX	nuklear/nuklear.h	/^    NK_KEY_MAX$/;"	e	enum:nk_keys
NK_KEY_NONE	nuklear/nuklear.h	/^    NK_KEY_NONE,$/;"	e	enum:nk_keys
NK_KEY_PASTE	nuklear/nuklear.h	/^    NK_KEY_PASTE,$/;"	e	enum:nk_keys
NK_KEY_RIGHT	nuklear/nuklear.h	/^    NK_KEY_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_DOWN	nuklear/nuklear.h	/^    NK_KEY_SCROLL_DOWN,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_END	nuklear/nuklear.h	/^    NK_KEY_SCROLL_END,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_START	nuklear/nuklear.h	/^    NK_KEY_SCROLL_START,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_UP	nuklear/nuklear.h	/^    NK_KEY_SCROLL_UP,$/;"	e	enum:nk_keys
NK_KEY_SHIFT	nuklear/nuklear.h	/^    NK_KEY_SHIFT,$/;"	e	enum:nk_keys
NK_KEY_TAB	nuklear/nuklear.h	/^    NK_KEY_TAB,$/;"	e	enum:nk_keys
NK_KEY_TEXT_END	nuklear/nuklear.h	/^    NK_KEY_TEXT_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_INSERT_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_INSERT_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_END	nuklear/nuklear.h	/^    NK_KEY_TEXT_LINE_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_START	nuklear/nuklear.h	/^    NK_KEY_TEXT_LINE_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REDO	nuklear/nuklear.h	/^    NK_KEY_TEXT_REDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REPLACE_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_REPLACE_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_RESET_MODE	nuklear/nuklear.h	/^    NK_KEY_TEXT_RESET_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_START	nuklear/nuklear.h	/^    NK_KEY_TEXT_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_UNDO	nuklear/nuklear.h	/^    NK_KEY_TEXT_UNDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_LEFT	nuklear/nuklear.h	/^    NK_KEY_TEXT_WORD_LEFT,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_RIGHT	nuklear/nuklear.h	/^    NK_KEY_TEXT_WORD_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_UP	nuklear/nuklear.h	/^    NK_KEY_UP,$/;"	e	enum:nk_keys
nk_label	nuklear/nuklear.h	/^nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)$/;"	f	typeref:typename:NK_API void
nk_labelf	nuklear/nuklear.h	/^nk_labelf(struct nk_context *ctx, nk_flags flags, const char *fmt, ...)$/;"	f	typeref:typename:NK_API void
nk_labelf_colored	nuklear/nuklear.h	/^nk_labelf_colored(struct nk_context *ctx, nk_flags flags,$/;"	f	typeref:typename:NK_API void
nk_labelf_colored_wrap	nuklear/nuklear.h	/^nk_labelf_colored_wrap(struct nk_context *ctx, struct nk_color color,$/;"	f	typeref:typename:NK_API void
nk_labelf_wrap	nuklear/nuklear.h	/^nk_labelf_wrap(struct nk_context *ctx, const char *fmt,...)$/;"	f	typeref:typename:NK_API void
nk_label_colored	nuklear/nuklear.h	/^nk_label_colored(struct nk_context *ctx, const char *str, nk_flags align,$/;"	f	typeref:typename:NK_API void
nk_label_colored_wrap	nuklear/nuklear.h	/^nk_label_colored_wrap(struct nk_context *ctx, const char *str, struct nk_color color)$/;"	f	typeref:typename:NK_API void
nk_label_wrap	nuklear/nuklear.h	/^nk_label_wrap(struct nk_context *ctx, const char *str)$/;"	f	typeref:typename:NK_API void
NK_LAYOUT_DYNAMIC	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC /;"	d
NK_LAYOUT_DYNAMIC_FIXED	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_FIXED /;"	d
NK_LAYOUT_DYNAMIC_FREE	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_FREE /;"	d
NK_LAYOUT_DYNAMIC_ROW	nuklear/nuklear.h	/^#define NK_LAYOUT_DYNAMIC_ROW /;"	d
nk_layout_format	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	g
nk_layout_peek	nuklear/nuklear.h	/^nk_layout_peek(struct nk_rect *bounds, struct nk_context *ctx)$/;"	f	typeref:typename:NK_INTERN void
nk_layout_row	nuklear/nuklear.h	/^nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f	typeref:typename:NK_API void
nk_layout_row_begin	nuklear/nuklear.h	/^nk_layout_row_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f	typeref:typename:NK_API void
nk_layout_row_dynamic	nuklear/nuklear.h	/^nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)$/;"	f	typeref:typename:NK_API void
nk_layout_row_end	nuklear/nuklear.h	/^nk_layout_row_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_layout_row_push	nuklear/nuklear.h	/^nk_layout_row_push(struct nk_context *ctx, float ratio_or_width)$/;"	f	typeref:typename:NK_API void
nk_layout_row_static	nuklear/nuklear.h	/^nk_layout_row_static(struct nk_context *ctx, float height, int item_width, int cols)$/;"	f	typeref:typename:NK_API void
nk_layout_space_begin	nuklear/nuklear.h	/^nk_layout_space_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f	typeref:typename:NK_API void
nk_layout_space_bounds	nuklear/nuklear.h	/^nk_layout_space_bounds(struct nk_context *ctx)$/;"	f	typeref:struct:nk_rect
nk_layout_space_end	nuklear/nuklear.h	/^nk_layout_space_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_layout_space_push	nuklear/nuklear.h	/^nk_layout_space_push(struct nk_context *ctx, struct nk_rect rect)$/;"	f	typeref:typename:NK_API void
nk_layout_space_rect_to_local	nuklear/nuklear.h	/^nk_layout_space_rect_to_local(struct nk_context *ctx, struct nk_rect ret)$/;"	f	typeref:struct:nk_rect
nk_layout_space_rect_to_screen	nuklear/nuklear.h	/^nk_layout_space_rect_to_screen(struct nk_context *ctx, struct nk_rect ret)$/;"	f	typeref:struct:nk_rect
nk_layout_space_to_local	nuklear/nuklear.h	/^nk_layout_space_to_local(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f	typeref:struct:nk_vec2
nk_layout_space_to_screen	nuklear/nuklear.h	/^nk_layout_space_to_screen(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f	typeref:struct:nk_vec2
NK_LAYOUT_STATIC	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC /;"	d
NK_LAYOUT_STATIC_FIXED	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_FIXED /;"	d
NK_LAYOUT_STATIC_FREE	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_FREE /;"	d
NK_LAYOUT_STATIC_ROW	nuklear/nuklear.h	/^#define NK_LAYOUT_STATIC_ROW /;"	d
nk_layout_widget_space	nuklear/nuklear.h	/^nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,$/;"	f	typeref:typename:NK_INTERN void
NK_LEADING_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_LEADING_LETTER_PENALTY /;"	d
NK_LEFT	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_LEN	nuklear/nuklear.h	/^#define NK_LEN(/;"	d
NK_LINE_STR	nuklear/nuklear.h	/^#define NK_LINE_STR(/;"	d
nk_log10	nuklear/nuklear.h	/^nk_log10(float n)$/;"	f	typeref:typename:NK_INTERN int
nk_malloc	nuklear/nuklear.h	/^NK_INTERN void* nk_malloc(nk_handle unused, void *old,nk_size size)$/;"	f	typeref:typename:NK_INTERN void *
NK_MAX	nuklear/nuklear.h	/^#define NK_MAX(/;"	d
NK_MAXIMIZED	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MAX_FLOAT_PRECISION	nuklear/nuklear.h	/^#define NK_MAX_FLOAT_PRECISION /;"	d
NK_MAX_LEADING_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_MAX_LEADING_LETTER_PENALTY /;"	d
NK_MAX_NUMBER_BUFFER	nuklear/nuklear.h	/^#define NK_MAX_NUMBER_BUFFER /;"	d
NK_MAX_SORT_STACK	nuklear/nuklear.h	/^    #define NK_MAX_SORT_STACK /;"	d
nk_memcopy	nuklear/nuklear.h	/^nk_memcopy(void *dst0, const void *src0, nk_size length)$/;"	f	typeref:typename:NK_INTERN void *
NK_MEMCPY	nuklear/nuklear.h	/^#define NK_MEMCPY /;"	d
nk_memory	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	s
nk_memory_status	nuklear/nuklear.h	/^struct nk_memory_status {$/;"	s
NK_MEMSET	nuklear/nuklear.h	/^#define NK_MEMSET /;"	d
nk_memset	nuklear/nuklear.h	/^nk_memset(void *ptr, int c0, nk_size size)$/;"	f	typeref:typename:NK_INTERN void
nk_menubar_begin	nuklear/nuklear.h	/^nk_menubar_begin(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_menubar_end	nuklear/nuklear.h	/^nk_menubar_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_menu_begin	nuklear/nuklear.h	/^nk_menu_begin(struct nk_panel *layout, struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN int
nk_menu_begin_image	nuklear/nuklear.h	/^nk_menu_begin_image(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_image_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_image_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_image_text	nuklear/nuklear.h	/^nk_menu_begin_image_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_symbol	nuklear/nuklear.h	/^nk_menu_begin_symbol(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_symbol_label	nuklear/nuklear.h	/^NK_API int nk_menu_begin_symbol_label(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_symbol_text	nuklear/nuklear.h	/^nk_menu_begin_symbol_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_begin_text	nuklear/nuklear.h	/^nk_menu_begin_text(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_menu_close	nuklear/nuklear.h	/^NK_API void nk_menu_close(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_menu_end	nuklear/nuklear.h	/^nk_menu_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_menu_item_image_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_menu_item_image_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_menu_item_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f	typeref:typename:NK_API int
nk_menu_item_symbol_label	nuklear/nuklear.h	/^NK_API int nk_menu_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f	typeref:typename:NK_API int
nk_menu_item_symbol_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f	typeref:typename:NK_API int
nk_menu_item_text	nuklear/nuklear.h	/^NK_API int nk_menu_item_text(struct nk_context *ctx, const char *title, int len, nk_flags align)$/;"	f	typeref:typename:NK_API int
nk_menu_state	nuklear/nuklear.h	/^struct nk_menu_state {$/;"	s
nk_mfree	nuklear/nuklear.h	/^NK_INTERN void nk_mfree(nk_handle unused, void *ptr)$/;"	f	typeref:typename:NK_INTERN void
NK_MIN	nuklear/nuklear.h	/^#define NK_MIN(/;"	d
NK_MINIMIZED	nuklear/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED=nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MODIFIABLE	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	e	enum:nk_modify
nk_modify	nuklear/nuklear.h	/^enum nk_modify          {NK_FIXED=nk_false, NK_MODIFIABLE=nk_true};$/;"	g
nk_mouse	nuklear/nuklear.h	/^struct nk_mouse {$/;"	s
nk_mouse_button	nuklear/nuklear.h	/^struct nk_mouse_button {$/;"	s
nk_murmur_hash	nuklear/nuklear.h	/^nk_murmur_hash(const void * key, int len, nk_hash seed)$/;"	f	typeref:typename:NK_API nk_hash
nk_nonblock_begin	nuklear/nuklear.h	/^nk_nonblock_begin(struct nk_panel *layout, struct nk_context *ctx,$/;"	f	typeref:typename:NK_INTERN int
NK_NUKLEAR_H_	nuklear/nuklear.h	/^#define NK_NUKLEAR_H_$/;"	d
nk_null_rect	nuklear/nuklear.h	/^NK_GLOBAL const struct nk_rect nk_null_rect = {-8192.0f, -8192.0f, 16384, 16384};$/;"	s
NK_OFFSETOF	nuklear/nuklear.h	/^#define NK_OFFSETOF(/;"	d
nk_option_label	nuklear/nuklear.h	/^nk_option_label(struct nk_context *ctx, const char *label, int active)$/;"	f	typeref:typename:NK_API int
nk_option_text	nuklear/nuklear.h	/^nk_option_text(struct nk_context *ctx, const char *text, int len, int is_active)$/;"	f	typeref:typename:NK_API int
nk_orientation	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	g
nk_pad_rect	nuklear/nuklear.h	/^nk_pad_rect(struct nk_rect r, struct nk_vec2 pad)$/;"	f	typeref:struct:nk_rect
nk_page	nuklear/nuklear.h	/^struct nk_page {$/;"	s
nk_page_data	nuklear/nuklear.h	/^union nk_page_data {$/;"	u
nk_page_element	nuklear/nuklear.h	/^struct nk_page_element {$/;"	s
nk_panel	nuklear/nuklear.h	/^struct nk_panel {$/;"	s
nk_panel_alloc_row	nuklear/nuklear.h	/^nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
nk_panel_alloc_space	nuklear/nuklear.h	/^nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f	typeref:typename:NK_INTERN void
nk_panel_begin	nuklear/nuklear.h	/^nk_panel_begin(struct nk_context *ctx, const char *title)$/;"	f	typeref:typename:NK_INTERN int
nk_panel_end	nuklear/nuklear.h	/^nk_panel_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_INTERN void
nk_panel_flags	nuklear/nuklear.h	/^enum nk_panel_flags {$/;"	g
nk_panel_layout	nuklear/nuklear.h	/^nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,$/;"	f	typeref:typename:NK_INTERN void
nk_parse_hex	nuklear/nuklear.h	/^nk_parse_hex(const char *p, int length)$/;"	f	typeref:typename:NK_INTERN int
nk_paste_f	nuklear/nuklear.h	/^typedef void(*nk_paste_f)(nk_handle, struct nk_text_edit*);$/;"	t	typeref:typename:void (*)(nk_handle,struct nk_text_edit *)
NK_PI	nuklear/nuklear.h	/^#define NK_PI /;"	d
nk_plot	nuklear/nuklear.h	/^nk_plot(struct nk_context *ctx, enum nk_chart_type type, const float *values,$/;"	f	typeref:typename:NK_API void
nk_plot_function	nuklear/nuklear.h	/^nk_plot_function(struct nk_context *ctx, enum nk_chart_type type, void *userdata,$/;"	f	typeref:typename:NK_API void
nk_pool	nuklear/nuklear.h	/^struct nk_pool {$/;"	s
nk_pool_alloc	nuklear/nuklear.h	/^nk_pool_alloc(struct nk_pool *pool)$/;"	f	typeref:struct:nk_page_element *
NK_POOL_DEFAULT_CAPACITY	nuklear/nuklear.h	/^#define NK_POOL_DEFAULT_CAPACITY /;"	d
nk_pool_free	nuklear/nuklear.h	/^nk_pool_free(struct nk_pool *pool)$/;"	f	typeref:typename:NK_INTERN void
nk_pool_init	nuklear/nuklear.h	/^nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,$/;"	f	typeref:typename:NK_INTERN void
nk_pool_init_fixed	nuklear/nuklear.h	/^nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)$/;"	f	typeref:typename:NK_INTERN void
nk_popup_begin	nuklear/nuklear.h	/^nk_popup_begin(struct nk_context *ctx, struct nk_panel *layout,$/;"	f	typeref:typename:NK_API int
nk_popup_buffer	nuklear/nuklear.h	/^struct nk_popup_buffer {$/;"	s
nk_popup_close	nuklear/nuklear.h	/^nk_popup_close(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
NK_POPUP_DYNAMIC	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
nk_popup_end	nuklear/nuklear.h	/^nk_popup_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_popup_state	nuklear/nuklear.h	/^struct nk_popup_state {$/;"	s
NK_POPUP_STATIC	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
nk_popup_type	nuklear/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	g
nk_pow	nuklear/nuklear.h	/^nk_pow(float x, int n)$/;"	f	typeref:typename:NK_INTERN float
nk_prog	nuklear/nuklear.h	/^NK_API nk_size nk_prog(struct nk_context *ctx, nk_size cur, nk_size max, int modifyable)$/;"	f	typeref:typename:NK_API nk_size
nk_proggy_clean_ttf_compressed_data_base85	nuklear/nuklear.h	/^NK_GLOBAL const char nk_proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v	typeref:typename:NK_GLOBAL const char[]
nk_progress	nuklear/nuklear.h	/^nk_progress(struct nk_context *ctx, nk_size *cur, nk_size max, int is_modifyable)$/;"	f	typeref:typename:NK_API int
nk_progress_behavior	nuklear/nuklear.h	/^nk_progress_behavior(nk_flags *state, const struct nk_input *in,$/;"	f	typeref:typename:NK_INTERN nk_size
nk_property	nuklear/nuklear.h	/^nk_property(struct nk_context *ctx, const char *name, float min, float val,$/;"	f	typeref:typename:NK_INTERN float
nk_propertyf	nuklear/nuklear.h	/^nk_propertyf(struct nk_context *ctx, const char *name, float min,$/;"	f	typeref:typename:NK_API float
nk_propertyi	nuklear/nuklear.h	/^nk_propertyi(struct nk_context *ctx, const char *name, int min, int val,$/;"	f	typeref:typename:NK_API int
nk_property_behavior	nuklear/nuklear.h	/^nk_property_behavior(nk_flags *ws, const struct nk_input *in,$/;"	f	typeref:typename:NK_INTERN float
NK_PROPERTY_DEFAULT	nuklear/nuklear.h	/^    NK_PROPERTY_DEFAULT,$/;"	e	enum:nk_property_status
NK_PROPERTY_DRAG	nuklear/nuklear.h	/^    NK_PROPERTY_DRAG$/;"	e	enum:nk_property_status
NK_PROPERTY_EDIT	nuklear/nuklear.h	/^    NK_PROPERTY_EDIT,$/;"	e	enum:nk_property_status
nk_property_filter	nuklear/nuklear.h	/^enum nk_property_filter {$/;"	g
nk_property_float	nuklear/nuklear.h	/^nk_property_float(struct nk_context *ctx, const char *name,$/;"	f	typeref:typename:NK_API void
nk_property_int	nuklear/nuklear.h	/^nk_property_int(struct nk_context *ctx, const char *name,$/;"	f	typeref:typename:NK_API void
nk_property_state	nuklear/nuklear.h	/^struct nk_property_state {$/;"	s
nk_property_status	nuklear/nuklear.h	/^enum nk_property_status {$/;"	g
nk_ptr	nuklear/nuklear.h	/^typedef uintptr_t nk_ptr;$/;"	t	typeref:typename:uintptr_t
nk_ptr_add	nuklear/nuklear.h	/^#define nk_ptr_add(/;"	d
nk_ptr_add_const	nuklear/nuklear.h	/^#define nk_ptr_add_const(/;"	d
NK_PTR_TO_UINT	nuklear/nuklear.h	/^# define NK_PTR_TO_UINT(/;"	d
nk_push_scissor	nuklear/nuklear.h	/^nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)$/;"	f	typeref:typename:NK_API void
nk_push_table	nuklear/nuklear.h	/^nk_push_table(struct nk_window *win, struct nk_table *tbl)$/;"	f	typeref:typename:NK_INTERN void
nk_query_font_glyph_f	nuklear/nuklear.h	/^typedef void(*nk_query_font_glyph_f)(nk_handle handle, float font_height,$/;"	t	typeref:typename:void (*)(nk_handle handle,float font_height,struct nk_user_font_glyph * glyph,nk_rune codepoint,nk_rune next_codepoint)
nk_radio_label	nuklear/nuklear.h	/^nk_radio_label(struct nk_context *ctx, const char *label, int *active)$/;"	f	typeref:typename:NK_API int
nk_radio_text	nuklear/nuklear.h	/^nk_radio_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f	typeref:typename:NK_API int
nk_range_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_range_align = NK_ALIGNOF(struct nk_tt_pack_range);$/;"	v	typeref:typename:NK_GLOBAL const nk_size
nk_range_count	nuklear/nuklear.h	/^nk_range_count(const nk_rune *range)$/;"	f	typeref:typename:NK_INTERN int
nk_range_glyph_count	nuklear/nuklear.h	/^nk_range_glyph_count(const nk_rune *range, int count)$/;"	f	typeref:typename:NK_INTERN int
nk_rect	nuklear/nuklear.h	/^nk_rect(float x, float y, float w, float h)$/;"	f	typeref:struct:nk_rect
nk_rect	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	s
nk_recta	nuklear/nuklear.h	/^nk_recta(struct nk_vec2 pos, struct nk_vec2 size)$/;"	f	typeref:struct:nk_rect
nk_recti	nuklear/nuklear.h	/^nk_recti(int x, int y, int w, int h)$/;"	f	typeref:struct:nk_rect
nk_recti	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	s
nk_rectiv	nuklear/nuklear.h	/^nk_rectiv(const int *r)$/;"	f	typeref:struct:nk_rect
nk_rectv	nuklear/nuklear.h	/^nk_rectv(const float *r)$/;"	f	typeref:struct:nk_rect
nk_rect_align	nuklear/nuklear.h	/^NK_GLOBAL const nk_size nk_rect_align = NK_ALIGNOF(struct nk_rp_rect);$/;"	v	typeref:typename:NK_GLOBAL const nk_size
nk_rect_height_compare	nuklear/nuklear.h	/^nk_rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:NK_INTERN int
nk_rect_original_order	nuklear/nuklear.h	/^nk_rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:NK_INTERN int
nk_rect_pos	nuklear/nuklear.h	/^nk_rect_pos(struct nk_rect r)$/;"	f	typeref:struct:nk_vec2
nk_rect_size	nuklear/nuklear.h	/^nk_rect_size(struct nk_rect r)$/;"	f	typeref:struct:nk_vec2
nk_remove_table	nuklear/nuklear.h	/^nk_remove_table(struct nk_window *win, struct nk_table *tbl)$/;"	f	typeref:typename:NK_INTERN void
nk_remove_window	nuklear/nuklear.h	/^nk_remove_window(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
NK_RGB	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
nk_rgb	nuklear/nuklear.h	/^nk_rgb(int r, int g, int b)$/;"	f	typeref:struct:nk_color
NK_RGBA	nuklear/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
nk_rgba	nuklear/nuklear.h	/^nk_rgba(int r, int g, int b, int a)$/;"	f	typeref:struct:nk_color
nk_rgba_bv	nuklear/nuklear.h	/^nk_rgba_bv(const nk_byte *c)$/;"	f	typeref:struct:nk_color
nk_rgba_f	nuklear/nuklear.h	/^nk_rgba_f(float r, float g, float b, float a)$/;"	f	typeref:struct:nk_color
nk_rgba_fv	nuklear/nuklear.h	/^nk_rgba_fv(const float *c)$/;"	f	typeref:struct:nk_color
nk_rgba_hex	nuklear/nuklear.h	/^nk_rgba_hex(const char *rgb)$/;"	f	typeref:struct:nk_color
nk_rgba_iv	nuklear/nuklear.h	/^nk_rgba_iv(const int *c)$/;"	f	typeref:struct:nk_color
nk_rgba_u32	nuklear/nuklear.h	/^nk_rgba_u32(nk_uint in)$/;"	f	typeref:struct:nk_color
nk_rgb_bv	nuklear/nuklear.h	/^nk_rgb_bv(const nk_byte* c)$/;"	f	typeref:struct:nk_color
nk_rgb_f	nuklear/nuklear.h	/^nk_rgb_f(float r, float g, float b)$/;"	f	typeref:struct:nk_color
nk_rgb_fv	nuklear/nuklear.h	/^nk_rgb_fv(const float *c)$/;"	f	typeref:struct:nk_color
nk_rgb_hex	nuklear/nuklear.h	/^nk_rgb_hex(const char *rgb)$/;"	f	typeref:struct:nk_color
nk_rgb_iv	nuklear/nuklear.h	/^nk_rgb_iv(const int *c)$/;"	f	typeref:struct:nk_color
NK_RIGHT	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_ROTL	nuklear/nuklear.h	/^    #define NK_ROTL(/;"	d
nk_round_up_pow2	nuklear/nuklear.h	/^nk_round_up_pow2(nk_uint v)$/;"	f	typeref:typename:NK_INTERN nk_uint
nk_row_layout	nuklear/nuklear.h	/^nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f	typeref:typename:NK_INTERN void
nk_row_layout	nuklear/nuklear.h	/^struct nk_row_layout {$/;"	s
nk_rp_context	nuklear/nuklear.h	/^struct nk_rp_context {$/;"	s
nk_rp_coord	nuklear/nuklear.h	/^typedef unsigned short nk_rp_coord;$/;"	t	typeref:typename:unsigned short
NK_RP_HEURISTIC	nuklear/nuklear.h	/^enum NK_RP_HEURISTIC {$/;"	g
NK_RP_HEURISTIC_Skyline_BF_sortHeight	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_BL_sortHeight	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BL_sortHeight = NK_RP_HEURISTIC_Skyline_default,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_default	nuklear/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_default=0,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_INIT_STATE	nuklear/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	g
nk_rp_init_target	nuklear/nuklear.h	/^nk_rp_init_target(struct nk_rp_context *context, int width, int height,$/;"	f	typeref:typename:NK_INTERN void
nk_rp_node	nuklear/nuklear.h	/^struct nk_rp_node {$/;"	s
nk_rp_pack_rects	nuklear/nuklear.h	/^nk_rp_pack_rects(struct nk_rp_context *context, struct nk_rp_rect *rects, int num_rects)$/;"	f	typeref:typename:NK_INTERN void
nk_rp_qsort	nuklear/nuklear.h	/^nk_rp_qsort(struct nk_rp_rect *array, unsigned int len, int(*cmp)(const void*,const void*))$/;"	f	typeref:typename:void
nk_rp_rect	nuklear/nuklear.h	/^struct nk_rp_rect {$/;"	s
nk_rp_setup_allow_out_of_mem	nuklear/nuklear.h	/^nk_rp_setup_allow_out_of_mem(struct nk_rp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:NK_INTERN void
nk_rp__findresult	nuklear/nuklear.h	/^struct nk_rp__findresult {$/;"	s
NK_RP__INIT_skyline	nuklear/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	e	enum:NK_RP_INIT_STATE
NK_RP__MAXVAL	nuklear/nuklear.h	/^#define NK_RP__MAXVAL /;"	d
nk_rp__skyline_find_best_pos	nuklear/nuklear.h	/^nk_rp__skyline_find_best_pos(struct nk_rp_context *c, int width, int height)$/;"	f	typeref:struct:nk_rp__findresult
nk_rp__skyline_find_min_y	nuklear/nuklear.h	/^nk_rp__skyline_find_min_y(struct nk_rp_context *c, struct nk_rp_node *first,$/;"	f	typeref:typename:NK_INTERN int
nk_rp__skyline_pack_rectangle	nuklear/nuklear.h	/^nk_rp__skyline_pack_rectangle(struct nk_rp_context *context, int width, int height)$/;"	f	typeref:struct:nk_rp__findresult
nk_rune	nuklear/nuklear.h	/^typedef uint32_t nk_rune;$/;"	t	typeref:typename:uint32_t
NK_SATURATE	nuklear/nuklear.h	/^#define NK_SATURATE(/;"	d
nk_scroll	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	s
nk_scrollbar_behavior	nuklear/nuklear.h	/^nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,$/;"	f	typeref:typename:NK_INTERN float
nk_selectable_image_label	nuklear/nuklear.h	/^NK_API int nk_selectable_image_label(struct nk_context *ctx,struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_selectable_image_text	nuklear/nuklear.h	/^nk_selectable_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_selectable_label	nuklear/nuklear.h	/^NK_API int nk_selectable_label(struct nk_context *ctx, const char *str, nk_flags align, int *val/;"	f	typeref:typename:NK_API int
nk_selectable_text	nuklear/nuklear.h	/^nk_selectable_text(struct nk_context *ctx, const char *str, int len,$/;"	f	typeref:typename:NK_API int
nk_select_image_label	nuklear/nuklear.h	/^NK_API int nk_select_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_select_image_text	nuklear/nuklear.h	/^NK_API int nk_select_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f	typeref:typename:NK_API int
nk_select_label	nuklear/nuklear.h	/^NK_API int nk_select_label(struct nk_context *ctx, const char *str, nk_flags align, int value)$/;"	f	typeref:typename:NK_API int
nk_select_text	nuklear/nuklear.h	/^NK_API int nk_select_text(struct nk_context *ctx, const char *str, int len,$/;"	f	typeref:typename:NK_API int
NK_SEPARATOR_BONUS	nuklear/nuklear.h	/^    #define NK_SEPARATOR_BONUS /;"	d
nk_setup	nuklear/nuklear.h	/^nk_setup(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f	typeref:typename:NK_INTERN void
nk_set_user_data	nuklear/nuklear.h	/^nk_set_user_data(struct nk_context *ctx, nk_handle handle)$/;"	f	typeref:typename:NK_API void
NK_SHADER_VERSION	nuklear/nuklear_glfw_gl3.h	/^  #define NK_SHADER_VERSION /;"	d
nk_short	nuklear/nuklear.h	/^typedef int16_t nk_short;$/;"	t	typeref:typename:int16_t
NK_SHOWN	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	e	enum:nk_show_states
nk_show_states	nuklear/nuklear.h	/^enum nk_show_states     {NK_HIDDEN=nk_false, NK_SHOWN=nk_true};$/;"	g
nk_shrink_rect	nuklear/nuklear.h	/^nk_shrink_rect(struct nk_rect r, float amount)$/;"	f	typeref:struct:nk_rect
NK_SIN	nuklear/nuklear.h	/^#define NK_SIN /;"	d
nk_sin	nuklear/nuklear.h	/^nk_sin(float x)$/;"	f	typeref:typename:NK_INTERN float
nk_size	nuklear/nuklear.h	/^typedef uintptr_t nk_size;$/;"	t	typeref:typename:uintptr_t
nk_slider_behavior	nuklear/nuklear.h	/^nk_slider_behavior(nk_flags *state, struct nk_rect *cursor,$/;"	f	typeref:typename:NK_INTERN float
nk_slider_float	nuklear/nuklear.h	/^nk_slider_float(struct nk_context *ctx, float min_value, float *value, float max_value,$/;"	f	typeref:typename:NK_API int
nk_slider_int	nuklear/nuklear.h	/^nk_slider_int(struct nk_context *ctx, int min, int *val, int max, int step)$/;"	f	typeref:typename:NK_API int
nk_slide_float	nuklear/nuklear.h	/^nk_slide_float(struct nk_context *ctx, float min, float val, float max, float step)$/;"	f	typeref:typename:NK_API float
nk_slide_int	nuklear/nuklear.h	/^nk_slide_int(struct nk_context *ctx, int min, int val, int max, int step)$/;"	f	typeref:typename:NK_API int
nk_spacing	nuklear/nuklear.h	/^nk_spacing(struct nk_context *ctx, int cols)$/;"	f	typeref:typename:NK_API void
NK_SQRT	nuklear/nuklear.h	/^#define NK_SQRT /;"	d
nk_sqrt	nuklear/nuklear.h	/^nk_sqrt(float x)$/;"	f	typeref:typename:NK_INTERN float
nk_start	nuklear/nuklear.h	/^nk_start(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
nk_start_buffer	nuklear/nuklear.h	/^nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f	typeref:typename:NK_INTERN void
nk_start_popup	nuklear/nuklear.h	/^nk_start_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f	typeref:typename:NK_INTERN void
NK_STATIC	nuklear/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_STOP_ON_NEW_LINE	nuklear/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon9874a1ee0804
NK_STORAGE	nuklear/nuklear.h	/^#define NK_STORAGE /;"	d
nk_str	nuklear/nuklear.h	/^struct nk_str {$/;"	s
nk_strfilter	nuklear/nuklear.h	/^nk_strfilter(const char *text, const char *regexp)$/;"	f	typeref:typename:NK_API int
nk_strfmt	nuklear/nuklear.h	/^nk_strfmt(char *buf, int buf_size, const char *fmt,...)$/;"	f	typeref:typename:NK_API int
nk_strfmtv	nuklear/nuklear.h	/^nk_strfmtv(char *buf, int buf_size, const char *fmt, va_list args)$/;"	f	typeref:typename:NK_INTERN int
nk_stricmp	nuklear/nuklear.h	/^nk_stricmp(const char *s1, const char *s2)$/;"	f	typeref:typename:NK_API int
nk_stricmpn	nuklear/nuklear.h	/^nk_stricmpn(const char *s1, const char *s2, int n)$/;"	f	typeref:typename:NK_API int
NK_STRINGIFY	nuklear/nuklear.h	/^#define NK_STRINGIFY(/;"	d
nk_string_float_limit	nuklear/nuklear.h	/^nk_string_float_limit(char *string, int prec)$/;"	f	typeref:typename:NK_INTERN int
nk_strlen	nuklear/nuklear.h	/^nk_strlen(const char *str)$/;"	f	typeref:typename:NK_API int
nk_strmatch_fuzzy_string	nuklear/nuklear.h	/^nk_strmatch_fuzzy_string(char const *str, char const *pattern, int *out_score)$/;"	f	typeref:typename:NK_API int
nk_strmatch_fuzzy_text	nuklear/nuklear.h	/^nk_strmatch_fuzzy_text(const char *str, int str_len,$/;"	f	typeref:typename:NK_API int
nk_stroke_arc	nuklear/nuklear.h	/^nk_stroke_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f	typeref:typename:NK_API void
nk_stroke_circle	nuklear/nuklear.h	/^nk_stroke_circle(struct nk_command_buffer *b, struct nk_rect r,$/;"	f	typeref:typename:NK_API void
NK_STROKE_CLOSED	nuklear/nuklear.h	/^    NK_STROKE_CLOSED = nk_true$/;"	e	enum:nk_draw_list_stroke
nk_stroke_curve	nuklear/nuklear.h	/^nk_stroke_curve(struct nk_command_buffer *b, float ax, float ay,$/;"	f	typeref:typename:NK_API void
nk_stroke_line	nuklear/nuklear.h	/^nk_stroke_line(struct nk_command_buffer *b, float x0, float y0,$/;"	f	typeref:typename:NK_API void
NK_STROKE_OPEN	nuklear/nuklear.h	/^    NK_STROKE_OPEN = nk_false,$/;"	e	enum:nk_draw_list_stroke
nk_stroke_polygon	nuklear/nuklear.h	/^nk_stroke_polygon(struct nk_command_buffer *b,  float *points, int point_count,$/;"	f	typeref:typename:NK_API void
nk_stroke_polyline	nuklear/nuklear.h	/^nk_stroke_polyline(struct nk_command_buffer *b, float *points, int point_count,$/;"	f	typeref:typename:NK_API void
nk_stroke_rect	nuklear/nuklear.h	/^nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f	typeref:typename:NK_API void
nk_stroke_triangle	nuklear/nuklear.h	/^nk_stroke_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f	typeref:typename:NK_API void
nk_strtof	nuklear/nuklear.h	/^nk_strtof(float *number, const char *buffer)$/;"	f	typeref:typename:NK_API int
nk_str_append_str_char	nuklear/nuklear.h	/^nk_str_append_str_char(struct nk_str *s, const char *str)$/;"	f	typeref:typename:NK_API int
nk_str_append_str_runes	nuklear/nuklear.h	/^nk_str_append_str_runes(struct nk_str *str, const nk_rune *runes)$/;"	f	typeref:typename:NK_API int
nk_str_append_str_utf8	nuklear/nuklear.h	/^nk_str_append_str_utf8(struct nk_str *str, const char *text)$/;"	f	typeref:typename:NK_API int
nk_str_append_text_char	nuklear/nuklear.h	/^nk_str_append_text_char(struct nk_str *s, const char *str, int len)$/;"	f	typeref:typename:NK_API int
nk_str_append_text_runes	nuklear/nuklear.h	/^nk_str_append_text_runes(struct nk_str *str, const nk_rune *text, int len)$/;"	f	typeref:typename:NK_API int
nk_str_append_text_utf8	nuklear/nuklear.h	/^nk_str_append_text_utf8(struct nk_str *str, const char *text, int len)$/;"	f	typeref:typename:NK_API int
nk_str_at_char	nuklear/nuklear.h	/^nk_str_at_char(struct nk_str *s, int pos)$/;"	f	typeref:typename:NK_API char *
nk_str_at_char_const	nuklear/nuklear.h	/^nk_str_at_char_const(const struct nk_str *s, int pos)$/;"	f	typeref:typename:NK_API const char *
nk_str_at_const	nuklear/nuklear.h	/^nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f	typeref:typename:NK_API const char *
nk_str_at_rune	nuklear/nuklear.h	/^nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f	typeref:typename:NK_API char *
nk_str_clear	nuklear/nuklear.h	/^nk_str_clear(struct nk_str *str)$/;"	f	typeref:typename:NK_API void
nk_str_delete_chars	nuklear/nuklear.h	/^nk_str_delete_chars(struct nk_str *s, int pos, int len)$/;"	f	typeref:typename:NK_API void
nk_str_delete_runes	nuklear/nuklear.h	/^nk_str_delete_runes(struct nk_str *s, int pos, int len)$/;"	f	typeref:typename:NK_API void
nk_str_free	nuklear/nuklear.h	/^nk_str_free(struct nk_str *str)$/;"	f	typeref:typename:NK_API void
nk_str_get	nuklear/nuklear.h	/^nk_str_get(struct nk_str *s)$/;"	f	typeref:typename:NK_API char *
nk_str_get_const	nuklear/nuklear.h	/^nk_str_get_const(const struct nk_str *s)$/;"	f	typeref:typename:NK_API const char *
nk_str_init	nuklear/nuklear.h	/^nk_str_init(struct nk_str *str, const struct nk_allocator *alloc, nk_size size)$/;"	f	typeref:typename:NK_API void
nk_str_init_default	nuklear/nuklear.h	/^nk_str_init_default(struct nk_str *str)$/;"	f	typeref:typename:NK_API void
nk_str_init_fixed	nuklear/nuklear.h	/^nk_str_init_fixed(struct nk_str *str, void *memory, nk_size size)$/;"	f	typeref:typename:NK_API void
nk_str_insert_at_char	nuklear/nuklear.h	/^nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)$/;"	f	typeref:typename:NK_API int
nk_str_insert_at_rune	nuklear/nuklear.h	/^nk_str_insert_at_rune(struct nk_str *str, int pos, const char *cstr, int len)$/;"	f	typeref:typename:NK_API int
nk_str_insert_str_char	nuklear/nuklear.h	/^NK_API int nk_str_insert_str_char(struct nk_str *str, int pos, const char *text)$/;"	f	typeref:typename:NK_API int
nk_str_insert_str_runes	nuklear/nuklear.h	/^nk_str_insert_str_runes(struct nk_str *str, int pos, const nk_rune *runes)$/;"	f	typeref:typename:NK_API int
nk_str_insert_str_utf8	nuklear/nuklear.h	/^nk_str_insert_str_utf8(struct nk_str *str, int pos, const char *text)$/;"	f	typeref:typename:NK_API int
nk_str_insert_text_char	nuklear/nuklear.h	/^NK_API int nk_str_insert_text_char(struct nk_str *str, int pos, const char *text, int len)$/;"	f	typeref:typename:NK_API int
nk_str_insert_text_runes	nuklear/nuklear.h	/^nk_str_insert_text_runes(struct nk_str *str, int pos, const nk_rune *runes, int len)$/;"	f	typeref:typename:NK_API int
nk_str_insert_text_utf8	nuklear/nuklear.h	/^nk_str_insert_text_utf8(struct nk_str *str, int pos, const char *text, int len)$/;"	f	typeref:typename:NK_API int
nk_str_len	nuklear/nuklear.h	/^nk_str_len(struct nk_str *s)$/;"	f	typeref:typename:NK_API int
nk_str_len_char	nuklear/nuklear.h	/^nk_str_len_char(struct nk_str *s)$/;"	f	typeref:typename:NK_API int
nk_str_match_here	nuklear/nuklear.h	/^nk_str_match_here(const char *regexp, const char *text)$/;"	f	typeref:typename:NK_INTERN int
nk_str_match_star	nuklear/nuklear.h	/^nk_str_match_star(int c, const char *regexp, const char *text)$/;"	f	typeref:typename:NK_INTERN int
nk_str_remove_chars	nuklear/nuklear.h	/^nk_str_remove_chars(struct nk_str *s, int len)$/;"	f	typeref:typename:NK_API void
nk_str_remove_runes	nuklear/nuklear.h	/^nk_str_remove_runes(struct nk_str *str, int len)$/;"	f	typeref:typename:NK_API void
nk_str_rune_at	nuklear/nuklear.h	/^nk_str_rune_at(const struct nk_str *str, int pos)$/;"	f	typeref:typename:NK_API nk_rune
nk_style	nuklear/nuklear.h	/^struct nk_style {$/;"	s
nk_style_button	nuklear/nuklear.h	/^struct nk_style_button {$/;"	s
nk_style_chart	nuklear/nuklear.h	/^struct nk_style_chart {$/;"	s
nk_style_colors	nuklear/nuklear.h	/^enum nk_style_colors {$/;"	g
nk_style_color_name	nuklear/nuklear.h	/^NK_API const char *nk_style_color_name(enum nk_style_colors c)$/;"	f	typeref:typename:NK_API const char *
nk_style_combo	nuklear/nuklear.h	/^struct nk_style_combo {$/;"	s
nk_style_cursor	nuklear/nuklear.h	/^enum nk_style_cursor {$/;"	g
nk_style_default	nuklear/nuklear.h	/^NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}$/;"	f	typeref:typename:NK_API void
nk_style_edit	nuklear/nuklear.h	/^struct nk_style_edit {$/;"	s
nk_style_from_table	nuklear/nuklear.h	/^nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)$/;"	f	typeref:typename:NK_API void
nk_style_header_align	nuklear/nuklear.h	/^enum nk_style_header_align {$/;"	g
nk_style_item	nuklear/nuklear.h	/^struct nk_style_item {$/;"	s
NK_STYLE_ITEM_COLOR	nuklear/nuklear.h	/^    NK_STYLE_ITEM_COLOR,$/;"	e	enum:nk_style_item_type
nk_style_item_color	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_color(struct nk_color col)$/;"	f	typeref:struct:nk_style_item
nk_style_item_data	nuklear/nuklear.h	/^union nk_style_item_data {$/;"	u
nk_style_item_hide	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_hide(void)$/;"	f	typeref:struct:nk_style_item
NK_STYLE_ITEM_IMAGE	nuklear/nuklear.h	/^    NK_STYLE_ITEM_IMAGE$/;"	e	enum:nk_style_item_type
nk_style_item_image	nuklear/nuklear.h	/^NK_API struct nk_style_item nk_style_item_image(struct nk_image img)$/;"	f	typeref:struct:nk_style_item
nk_style_item_type	nuklear/nuklear.h	/^enum nk_style_item_type {$/;"	g
nk_style_load_all_cursors	nuklear/nuklear.h	/^nk_style_load_all_cursors(struct nk_context *ctx, struct nk_cursor *cursors)$/;"	f	typeref:typename:NK_API void
nk_style_load_cursor	nuklear/nuklear.h	/^nk_style_load_cursor(struct nk_context *ctx, enum nk_style_cursor cursor,$/;"	f	typeref:typename:NK_API void
nk_style_progress	nuklear/nuklear.h	/^struct nk_style_progress {$/;"	s
nk_style_property	nuklear/nuklear.h	/^struct nk_style_property {$/;"	s
nk_style_scrollbar	nuklear/nuklear.h	/^struct nk_style_scrollbar {$/;"	s
nk_style_selectable	nuklear/nuklear.h	/^struct nk_style_selectable {$/;"	s
nk_style_set_cursor	nuklear/nuklear.h	/^nk_style_set_cursor(struct nk_context *ctx, enum nk_style_cursor c)$/;"	f	typeref:typename:NK_API int
nk_style_set_font	nuklear/nuklear.h	/^nk_style_set_font(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f	typeref:typename:NK_API void
nk_style_slider	nuklear/nuklear.h	/^struct nk_style_slider {$/;"	s
nk_style_tab	nuklear/nuklear.h	/^struct nk_style_tab {$/;"	s
nk_style_text	nuklear/nuklear.h	/^struct nk_style_text {$/;"	s
nk_style_toggle	nuklear/nuklear.h	/^struct nk_style_toggle {$/;"	s
nk_style_window	nuklear/nuklear.h	/^struct nk_style_window {$/;"	s
nk_style_window_header	nuklear/nuklear.h	/^struct nk_style_window_header {$/;"	s
nk_subimage_id	nuklear/nuklear.h	/^nk_subimage_id(int id, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f	typeref:struct:nk_image
nk_subimage_ptr	nuklear/nuklear.h	/^nk_subimage_ptr(void *ptr, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f	typeref:struct:nk_image
NK_SYMBOL_CIRCLE	nuklear/nuklear.h	/^    NK_SYMBOL_CIRCLE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_CIRCLE_FILLED	nuklear/nuklear.h	/^    NK_SYMBOL_CIRCLE_FILLED,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MAX	nuklear/nuklear.h	/^    NK_SYMBOL_MAX$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MINUS	nuklear/nuklear.h	/^    NK_SYMBOL_MINUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_NONE	nuklear/nuklear.h	/^    NK_SYMBOL_NONE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_PLUS	nuklear/nuklear.h	/^    NK_SYMBOL_PLUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT	nuklear/nuklear.h	/^    NK_SYMBOL_RECT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT_FILLED	nuklear/nuklear.h	/^    NK_SYMBOL_RECT_FILLED,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_DOWN	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_DOWN,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_LEFT	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_LEFT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_RIGHT	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_RIGHT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_UP	nuklear/nuklear.h	/^    NK_SYMBOL_TRIANGLE_UP,$/;"	e	enum:nk_symbol_type
nk_symbol_type	nuklear/nuklear.h	/^enum nk_symbol_type {$/;"	g
NK_SYMBOL_UNDERSCORE	nuklear/nuklear.h	/^    NK_SYMBOL_UNDERSCORE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_X	nuklear/nuklear.h	/^    NK_SYMBOL_X,$/;"	e	enum:nk_symbol_type
nk_table	nuklear/nuklear.h	/^struct nk_table {$/;"	s
nk_text	nuklear/nuklear.h	/^nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)$/;"	f	typeref:typename:NK_API void
nk_text	nuklear/nuklear.h	/^struct nk_text {$/;"	s
nk_textedit_clamp	nuklear/nuklear.h	/^nk_textedit_clamp(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_clear_state	nuklear/nuklear.h	/^nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_click	nuklear/nuklear.h	/^nk_textedit_click(struct nk_text_edit *state, float x, float y,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_createundo	nuklear/nuklear.h	/^nk_textedit_createundo(struct nk_text_undo_state *state, int pos,$/;"	f	typeref:typename:NK_INTERN nk_rune *
nk_textedit_create_undo_record	nuklear/nuklear.h	/^nk_textedit_create_undo_record(struct nk_text_undo_state *state, int numchars)$/;"	f	typeref:struct:nk_text_undo_record *
nk_textedit_cut	nuklear/nuklear.h	/^nk_textedit_cut(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API int
nk_textedit_delete	nuklear/nuklear.h	/^nk_textedit_delete(struct nk_text_edit *state, int where, int len)$/;"	f	typeref:typename:NK_API void
nk_textedit_delete_selection	nuklear/nuklear.h	/^nk_textedit_delete_selection(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
nk_textedit_discard_redo	nuklear/nuklear.h	/^nk_textedit_discard_redo(struct nk_text_undo_state *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_discard_undo	nuklear/nuklear.h	/^nk_textedit_discard_undo(struct nk_text_undo_state *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_drag	nuklear/nuklear.h	/^nk_textedit_drag(struct nk_text_edit *state, float x, float y,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_find_charpos	nuklear/nuklear.h	/^nk_textedit_find_charpos(struct nk_text_find *find, struct nk_text_edit *state,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_flush_redo	nuklear/nuklear.h	/^nk_textedit_flush_redo(struct nk_text_undo_state *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_free	nuklear/nuklear.h	/^nk_textedit_free(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
nk_textedit_get_width	nuklear/nuklear.h	/^nk_textedit_get_width(const struct nk_text_edit *edit, int line_start, int char_id,$/;"	f	typeref:typename:NK_INTERN float
nk_textedit_init	nuklear/nuklear.h	/^nk_textedit_init(struct nk_text_edit *state, struct nk_allocator *alloc, nk_size size)$/;"	f	typeref:typename:NK_API void
nk_textedit_init_default	nuklear/nuklear.h	/^nk_textedit_init_default(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
nk_textedit_init_fixed	nuklear/nuklear.h	/^nk_textedit_init_fixed(struct nk_text_edit *state, void *memory, nk_size size)$/;"	f	typeref:typename:NK_API void
nk_textedit_key	nuklear/nuklear.h	/^nk_textedit_key(struct nk_text_edit *state, enum nk_keys key, int shift_mod,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_layout_row	nuklear/nuklear.h	/^nk_textedit_layout_row(struct nk_text_edit_row *r, struct nk_text_edit *edit,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_locate_coord	nuklear/nuklear.h	/^nk_textedit_locate_coord(struct nk_text_edit *edit, float x, float y,$/;"	f	typeref:typename:NK_INTERN int
nk_textedit_makeundo_delete	nuklear/nuklear.h	/^nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_makeundo_insert	nuklear/nuklear.h	/^nk_textedit_makeundo_insert(struct nk_text_edit *state, int where, int length)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_makeundo_replace	nuklear/nuklear.h	/^nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_move_to_first	nuklear/nuklear.h	/^nk_textedit_move_to_first(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_move_to_last	nuklear/nuklear.h	/^nk_textedit_move_to_last(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_move_to_word_next	nuklear/nuklear.h	/^nk_textedit_move_to_word_next(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN int
nk_textedit_move_to_word_previous	nuklear/nuklear.h	/^nk_textedit_move_to_word_previous(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN int
nk_textedit_paste	nuklear/nuklear.h	/^nk_textedit_paste(struct nk_text_edit *state, char const *ctext, int len)$/;"	f	typeref:typename:NK_API int
nk_textedit_prep_selection_at_cursor	nuklear/nuklear.h	/^nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_redo	nuklear/nuklear.h	/^nk_textedit_redo(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
nk_textedit_select_all	nuklear/nuklear.h	/^nk_textedit_select_all(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
nk_textedit_sortselection	nuklear/nuklear.h	/^nk_textedit_sortselection(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_INTERN void
nk_textedit_text	nuklear/nuklear.h	/^nk_textedit_text(struct nk_text_edit *state, const char *text, int total_len)$/;"	f	typeref:typename:NK_API void
nk_textedit_undo	nuklear/nuklear.h	/^nk_textedit_undo(struct nk_text_edit *state)$/;"	f	typeref:typename:NK_API void
NK_TEXTEDIT_UNDOCHARCOUNT	nuklear/nuklear.h	/^#define NK_TEXTEDIT_UNDOCHARCOUNT /;"	d
NK_TEXTEDIT_UNDOSTATECOUNT	nuklear/nuklear.h	/^#define NK_TEXTEDIT_UNDOSTATECOUNT /;"	d
nk_text_align	nuklear/nuklear.h	/^enum nk_text_align {$/;"	g
nk_text_alignment	nuklear/nuklear.h	/^enum nk_text_alignment {$/;"	g
NK_TEXT_ALIGN_BOTTOM	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_BOTTOM      = 0x20$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_CENTERED	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_CENTERED    = 0x02,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_LEFT	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_LEFT        = 0x01,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_MIDDLE	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_MIDDLE      = 0x10,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_RIGHT	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_RIGHT       = 0x04,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_TOP	nuklear/nuklear.h	/^    NK_TEXT_ALIGN_TOP         = 0x08,$/;"	e	enum:nk_text_align
nk_text_calculate_text_bounds	nuklear/nuklear.h	/^nk_text_calculate_text_bounds(const struct nk_user_font *font,$/;"	f	typeref:struct:nk_vec2
NK_TEXT_CENTERED	nuklear/nuklear.h	/^    NK_TEXT_CENTERED    = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_CENTERED,$/;"	e	enum:nk_text_alignment
nk_text_clamp	nuklear/nuklear.h	/^nk_text_clamp(const struct nk_user_font *font, const char *text,$/;"	f	typeref:typename:NK_INTERN int
nk_text_colored	nuklear/nuklear.h	/^nk_text_colored(struct nk_context *ctx, const char *str, int len,$/;"	f	typeref:typename:NK_API void
nk_text_edit	nuklear/nuklear.h	/^struct nk_text_edit {$/;"	s
nk_text_edit_mode	nuklear/nuklear.h	/^enum nk_text_edit_mode {$/;"	g
NK_TEXT_EDIT_MODE_INSERT	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_INSERT,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_REPLACE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_REPLACE$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_VIEW	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MODE_VIEW,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MULTI_LINE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_MULTI_LINE$/;"	e	enum:nk_text_edit_type
nk_text_edit_row	nuklear/nuklear.h	/^struct nk_text_edit_row {$/;"	s
NK_TEXT_EDIT_SINGLE_LINE	nuklear/nuklear.h	/^    NK_TEXT_EDIT_SINGLE_LINE,$/;"	e	enum:nk_text_edit_type
nk_text_edit_type	nuklear/nuklear.h	/^enum nk_text_edit_type {$/;"	g
nk_text_find	nuklear/nuklear.h	/^struct nk_text_find {$/;"	s
NK_TEXT_HAS_SELECTION	nuklear/nuklear.h	/^#define NK_TEXT_HAS_SELECTION(/;"	d
NK_TEXT_LEFT	nuklear/nuklear.h	/^    NK_TEXT_LEFT        = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_LEFT,$/;"	e	enum:nk_text_alignment
NK_TEXT_RIGHT	nuklear/nuklear.h	/^    NK_TEXT_RIGHT       = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_RIGHT$/;"	e	enum:nk_text_alignment
nk_text_undo_record	nuklear/nuklear.h	/^struct nk_text_undo_record {$/;"	s
nk_text_undo_state	nuklear/nuklear.h	/^struct nk_text_undo_state {$/;"	s
nk_text_width_f	nuklear/nuklear.h	/^typedef float(*nk_text_width_f)(nk_handle, float h, const char*, int len);$/;"	t	typeref:typename:float (*)(nk_handle,float h,const char *,int len)
nk_text_wrap	nuklear/nuklear.h	/^nk_text_wrap(struct nk_context *ctx, const char *str, int len)$/;"	f	typeref:typename:NK_API void
nk_text_wrap_colored	nuklear/nuklear.h	/^nk_text_wrap_colored(struct nk_context *ctx, const char *str,$/;"	f	typeref:typename:NK_API void
NK_TLOOP	nuklear/nuklear.h	/^    #define NK_TLOOP(/;"	d
NK_TLOOP1	nuklear/nuklear.h	/^    #define NK_TLOOP1(/;"	d
nk_toggle_behavior	nuklear/nuklear.h	/^nk_toggle_behavior(const struct nk_input *in, struct nk_rect select,$/;"	f	typeref:typename:NK_INTERN int
NK_TOGGLE_CHECK	nuklear/nuklear.h	/^    NK_TOGGLE_CHECK,$/;"	e	enum:nk_toggle_type
NK_TOGGLE_OPTION	nuklear/nuklear.h	/^    NK_TOGGLE_OPTION$/;"	e	enum:nk_toggle_type
nk_toggle_type	nuklear/nuklear.h	/^enum nk_toggle_type {$/;"	g
nk_tooltip	nuklear/nuklear.h	/^nk_tooltip(struct nk_context *ctx, const char *text)$/;"	f	typeref:typename:NK_API void
nk_tooltip_begin	nuklear/nuklear.h	/^nk_tooltip_begin(struct nk_context *ctx, struct nk_panel *layout, float width)$/;"	f	typeref:typename:NK_API int
nk_tooltip_end	nuklear/nuklear.h	/^nk_tooltip_end(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
NK_TO_HEX	nuklear/nuklear.h	/^    #define NK_TO_HEX(/;"	d
nk_to_lower	nuklear/nuklear.h	/^NK_INTERN int nk_to_lower(int c) {return (c >= 'A' && c <= 'Z') ? (c - ('a' + 'A')) : c;}$/;"	f	typeref:typename:NK_INTERN int
nk_tree_base	nuklear/nuklear.h	/^nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f	typeref:typename:NK_INTERN int
nk_tree_image_push	nuklear/nuklear.h	/^#define                         nk_tree_image_push(/;"	d
nk_tree_image_push_hashed	nuklear/nuklear.h	/^nk_tree_image_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f	typeref:typename:NK_API int
nk_tree_image_push_id	nuklear/nuklear.h	/^#define                         nk_tree_image_push_id(/;"	d
NK_TREE_NODE	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
nk_tree_pop	nuklear/nuklear.h	/^nk_tree_pop(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API void
nk_tree_push	nuklear/nuklear.h	/^#define                         nk_tree_push(/;"	d
nk_tree_push_hashed	nuklear/nuklear.h	/^nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f	typeref:typename:NK_API int
nk_tree_push_id	nuklear/nuklear.h	/^#define                         nk_tree_push_id(/;"	d
NK_TREE_TAB	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
nk_tree_type	nuklear/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	g
nk_triangle_from_direction	nuklear/nuklear.h	/^nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,$/;"	f	typeref:typename:NK_API void
nk_true	nuklear/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon9874a1ee0104
nk_ttBYTE	nuklear/nuklear.h	/^#define nk_ttBYTE(/;"	d
nk_ttCHAR	nuklear/nuklear.h	/^#define nk_ttCHAR(/;"	d
nk_ttLONG	nuklear/nuklear.h	/^   #define nk_ttLONG(/;"	d
nk_ttSHORT	nuklear/nuklear.h	/^    static nk_short nk_ttSHORT(const nk_byte *p)   { return (nk_short)(p[0]*256 + p[1]); }$/;"	f	typeref:typename:nk_short
nk_ttSHORT	nuklear/nuklear.h	/^   #define nk_ttSHORT(/;"	d
nk_ttULONG	nuklear/nuklear.h	/^    static nk_uint nk_ttULONG(const nk_byte *p)  { return (nk_uint)((p[0]<<24) + (p[1]<<16) + (p/;"	f	typeref:typename:nk_uint
nk_ttULONG	nuklear/nuklear.h	/^   #define nk_ttULONG(/;"	d
nk_ttUSHORT	nuklear/nuklear.h	/^    static nk_ushort nk_ttUSHORT(const nk_byte *p) { return (nk_ushort)(p[0]*256 + p[1]); }$/;"	f	typeref:typename:nk_ushort
nk_ttUSHORT	nuklear/nuklear.h	/^   #define nk_ttUSHORT(/;"	d
nk_tt_aligned_quad	nuklear/nuklear.h	/^struct nk_tt_aligned_quad{$/;"	s
nk_tt_bakedchar	nuklear/nuklear.h	/^struct nk_tt_bakedchar {$/;"	s
nk_tt_FindGlyphIndex	nuklear/nuklear.h	/^nk_tt_FindGlyphIndex(const struct nk_tt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:NK_INTERN int
nk_tt_FlattenCurves	nuklear/nuklear.h	/^nk_tt_FlattenCurves(struct nk_tt_vertex *vertices, int num_verts,$/;"	f	typeref:struct:nk_tt__point *
nk_tt_fontinfo	nuklear/nuklear.h	/^struct nk_tt_fontinfo {$/;"	s
nk_tt_GetFontVMetrics	nuklear/nuklear.h	/^nk_tt_GetFontVMetrics(const struct nk_tt_fontinfo *info,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_GetGlyphBitmapBox	nuklear/nuklear.h	/^nk_tt_GetGlyphBitmapBox(const struct nk_tt_fontinfo *font, int glyph,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_GetGlyphBitmapBoxSubpixel	nuklear/nuklear.h	/^nk_tt_GetGlyphBitmapBoxSubpixel(const struct nk_tt_fontinfo *font,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_GetGlyphBox	nuklear/nuklear.h	/^nk_tt_GetGlyphBox(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f	typeref:typename:NK_INTERN int
nk_tt_GetGlyphHMetrics	nuklear/nuklear.h	/^nk_tt_GetGlyphHMetrics(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_GetGlyphShape	nuklear/nuklear.h	/^nk_tt_GetGlyphShape(const struct nk_tt_fontinfo *info, struct nk_allocator *alloc,$/;"	f	typeref:typename:NK_INTERN int
nk_tt_GetPackedQuad	nuklear/nuklear.h	/^nk_tt_GetPackedQuad(struct nk_tt_packedchar *chardata, int pw, int ph,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_InitFont	nuklear/nuklear.h	/^nk_tt_InitFont(struct nk_tt_fontinfo *info, const unsigned char *data2, int fontstart)$/;"	f	typeref:typename:NK_INTERN int
NK_TT_MACSTYLE_BOLD	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_BOLD /;"	d
NK_TT_MACSTYLE_DONTCARE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_DONTCARE /;"	d
NK_TT_MACSTYLE_ITALIC	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_ITALIC /;"	d
NK_TT_MACSTYLE_NONE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_NONE /;"	d
NK_TT_MACSTYLE_UNDERSCORE	nuklear/nuklear.h	/^#define NK_TT_MACSTYLE_UNDERSCORE /;"	d
NK_TT_MAC_EID_ARABIC	nuklear/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_CHINESE_TRAD	nuklear/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_GREEK	nuklear/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_HEBREW	nuklear/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_KOREAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_ROMAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_EID_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon9874a1ee0d04
NK_TT_MAC_LANG_ARABIC	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_CHINESE_SIMPLIFIED	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_CHINESE_TRAD	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_DUTCH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_ENGLISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_FRENCH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_GERMAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_HEBREW	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_ITALIAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_KOREAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_SPANISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon9874a1ee0f04
NK_TT_MAC_LANG_SWEDISH	nuklear/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon9874a1ee0f04
nk_tt_MakeGlyphBitmapSubpixel	nuklear/nuklear.h	/^nk_tt_MakeGlyphBitmapSubpixel(const struct nk_tt_fontinfo *info, unsigned char *output,$/;"	f	typeref:typename:NK_INTERN void
NK_TT_MAX_OVERSAMPLE	nuklear/nuklear.h	/^#define NK_TT_MAX_OVERSAMPLE /;"	d
NK_TT_MS_EID_SHIFTJIS	nuklear/nuklear.h	/^   NK_TT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon9874a1ee0c04
NK_TT_MS_EID_SYMBOL	nuklear/nuklear.h	/^   NK_TT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon9874a1ee0c04
NK_TT_MS_EID_UNICODE_BMP	nuklear/nuklear.h	/^   NK_TT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon9874a1ee0c04
NK_TT_MS_EID_UNICODE_FULL	nuklear/nuklear.h	/^   NK_TT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon9874a1ee0c04
NK_TT_MS_LANG_CHINESE	nuklear/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_DUTCH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_ENGLISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_FRENCH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_GERMAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_HEBREW	nuklear/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_ITALIAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_JAPANESE	nuklear/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_KOREAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_RUSSIAN	nuklear/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_SPANISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon9874a1ee0e04
NK_TT_MS_LANG_SWEDISH	nuklear/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon9874a1ee0e04
nk_tt_PackBegin	nuklear/nuklear.h	/^nk_tt_PackBegin(struct nk_tt_pack_context *spc, unsigned char *pixels,$/;"	f	typeref:typename:NK_INTERN int
nk_tt_packedchar	nuklear/nuklear.h	/^struct nk_tt_packedchar {$/;"	s
nk_tt_PackEnd	nuklear/nuklear.h	/^nk_tt_PackEnd(struct nk_tt_pack_context *spc, struct nk_allocator *alloc)$/;"	f	typeref:typename:NK_INTERN void
nk_tt_PackFontRangesGatherRects	nuklear/nuklear.h	/^nk_tt_PackFontRangesGatherRects(struct nk_tt_pack_context *spc,$/;"	f	typeref:typename:NK_INTERN int
nk_tt_PackFontRangesRenderIntoRects	nuklear/nuklear.h	/^nk_tt_PackFontRangesRenderIntoRects(struct nk_tt_pack_context *spc,$/;"	f	typeref:typename:NK_INTERN int
nk_tt_PackSetOversampling	nuklear/nuklear.h	/^nk_tt_PackSetOversampling(struct nk_tt_pack_context *spc,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_pack_context	nuklear/nuklear.h	/^struct nk_tt_pack_context {$/;"	s
nk_tt_pack_range	nuklear/nuklear.h	/^struct nk_tt_pack_range {$/;"	s
NK_TT_PLATFORM_ID_ISO	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon9874a1ee0a04
NK_TT_PLATFORM_ID_MAC	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon9874a1ee0a04
NK_TT_PLATFORM_ID_MICROSOFT	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon9874a1ee0a04
NK_TT_PLATFORM_ID_UNICODE	nuklear/nuklear.h	/^   NK_TT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon9874a1ee0a04
nk_tt_Rasterize	nuklear/nuklear.h	/^nk_tt_Rasterize(struct nk_tt__bitmap *result, float flatness_in_pixels,$/;"	f	typeref:typename:NK_INTERN void
nk_tt_ScaleForMappingEmToPixels	nuklear/nuklear.h	/^nk_tt_ScaleForMappingEmToPixels(const struct nk_tt_fontinfo *info, float pixels)$/;"	f	typeref:typename:NK_INTERN float
nk_tt_ScaleForPixelHeight	nuklear/nuklear.h	/^nk_tt_ScaleForPixelHeight(const struct nk_tt_fontinfo *info, float height)$/;"	f	typeref:typename:NK_INTERN float
nk_tt_setvertex	nuklear/nuklear.h	/^nk_tt_setvertex(struct nk_tt_vertex *v, nk_byte type, nk_int x, nk_int y, nk_int cx, nk_int cy)$/;"	f	typeref:typename:NK_INTERN void
nk_tt_tag	nuklear/nuklear.h	/^#define nk_tt_tag(/;"	d
nk_tt_tag4	nuklear/nuklear.h	/^#define nk_tt_tag4(/;"	d
NK_TT_UNICODE_EID_ISO_10646	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon9874a1ee0b04
NK_TT_UNICODE_EID_UNICODE_1_0	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon9874a1ee0b04
NK_TT_UNICODE_EID_UNICODE_1_1	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon9874a1ee0b04
NK_TT_UNICODE_EID_UNICODE_2_0_BMP	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon9874a1ee0b04
NK_TT_UNICODE_EID_UNICODE_2_0_FULL	nuklear/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon9874a1ee0b04
NK_TT_vcurve	nuklear/nuklear.h	/^  NK_TT_vcurve$/;"	e	enum:__anon9874a1ee0904
nk_tt_vertex	nuklear/nuklear.h	/^struct nk_tt_vertex {$/;"	s
NK_TT_vline	nuklear/nuklear.h	/^  NK_TT_vline,$/;"	e	enum:__anon9874a1ee0904
NK_TT_vmove	nuklear/nuklear.h	/^  NK_TT_vmove=1,$/;"	e	enum:__anon9874a1ee0904
nk_tt__active_edge	nuklear/nuklear.h	/^struct nk_tt__active_edge {$/;"	s
nk_tt__add_point	nuklear/nuklear.h	/^nk_tt__add_point(struct nk_tt__point *points, int n, float x, float y)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__bitmap	nuklear/nuklear.h	/^struct nk_tt__bitmap{$/;"	s
NK_TT__COMPARE	nuklear/nuklear.h	/^#define NK_TT__COMPARE(/;"	d
nk_tt__edge	nuklear/nuklear.h	/^struct nk_tt__edge {$/;"	s
nk_tt__fill_active_edges_new	nuklear/nuklear.h	/^nk_tt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,$/;"	f	typeref:typename:NK_INTERN void
nk_tt__find_table	nuklear/nuklear.h	/^nk_tt__find_table(const nk_byte *data, nk_uint fontstart, const char *tag)$/;"	f	typeref:typename:NK_INTERN nk_uint
nk_tt__GetGlyfOffset	nuklear/nuklear.h	/^nk_tt__GetGlyfOffset(const struct nk_tt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:NK_INTERN int
nk_tt__handle_clipped_edge	nuklear/nuklear.h	/^nk_tt__handle_clipped_edge(float *scanline, int x, struct nk_tt__active_edge *e,$/;"	f	typeref:typename:NK_INTERN void
nk_tt__hheap	nuklear/nuklear.h	/^struct nk_tt__hheap {$/;"	s
nk_tt__hheap_alloc	nuklear/nuklear.h	/^nk_tt__hheap_alloc(struct nk_tt__hheap *hh, nk_size size)$/;"	f	typeref:typename:NK_INTERN void *
nk_tt__hheap_chunk	nuklear/nuklear.h	/^struct nk_tt__hheap_chunk {$/;"	s
nk_tt__hheap_cleanup	nuklear/nuklear.h	/^nk_tt__hheap_cleanup(struct nk_tt__hheap *hh)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__hheap_free	nuklear/nuklear.h	/^nk_tt__hheap_free(struct nk_tt__hheap *hh, void *p)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__h_prefilter	nuklear/nuklear.h	/^nk_tt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f	typeref:typename:NK_INTERN void
nk_tt__new_active	nuklear/nuklear.h	/^nk_tt__new_active(struct nk_tt__hheap *hh, struct nk_tt__edge *e,$/;"	f	typeref:struct:nk_tt__active_edge *
nk_tt__oversample_shift	nuklear/nuklear.h	/^nk_tt__oversample_shift(int oversample)$/;"	f	typeref:typename:NK_INTERN float
NK_TT__OVER_MASK	nuklear/nuklear.h	/^#define NK_TT__OVER_MASK /;"	d
nk_tt__point	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	s
nk_tt__rasterize	nuklear/nuklear.h	/^nk_tt__rasterize(struct nk_tt__bitmap *result, struct nk_tt__point *pts,$/;"	f	typeref:typename:NK_INTERN void
nk_tt__rasterize_sorted_edges	nuklear/nuklear.h	/^nk_tt__rasterize_sorted_edges(struct nk_tt__bitmap *result, struct nk_tt__edge *e,$/;"	f	typeref:typename:NK_INTERN void
nk_tt__sort_edges	nuklear/nuklear.h	/^nk_tt__sort_edges(struct nk_tt__edge *p, int n)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__sort_edges_ins_sort	nuklear/nuklear.h	/^nk_tt__sort_edges_ins_sort(struct nk_tt__edge *p, int n)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__sort_edges_quicksort	nuklear/nuklear.h	/^nk_tt__sort_edges_quicksort(struct nk_tt__edge *p, int n)$/;"	f	typeref:typename:NK_INTERN void
nk_tt__tesselate_curve	nuklear/nuklear.h	/^nk_tt__tesselate_curve(struct nk_tt__point *points, int *num_points,$/;"	f	typeref:typename:NK_INTERN int
nk_tt__v_prefilter	nuklear/nuklear.h	/^nk_tt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f	typeref:typename:NK_INTERN void
nk_uint	nuklear/nuklear.h	/^typedef uint32_t nk_uint;$/;"	t	typeref:typename:uint32_t
NK_UINT_TO_PTR	nuklear/nuklear.h	/^# define NK_UINT_TO_PTR(/;"	d
NK_UNDEFINED	nuklear/nuklear.h	/^#define NK_UNDEFINED /;"	d
nk_unify	nuklear/nuklear.h	/^nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,$/;"	f	typeref:typename:NK_INTERN void
NK_UNMATCHED_LETTER_PENALTY	nuklear/nuklear.h	/^    #define NK_UNMATCHED_LETTER_PENALTY /;"	d
NK_UNUSED	nuklear/nuklear.h	/^#define NK_UNUSED(/;"	d
NK_UP	nuklear/nuklear.h	/^enum nk_heading {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
nk_user_font	nuklear/nuklear.h	/^struct nk_user_font {$/;"	s
nk_user_font_glyph	nuklear/nuklear.h	/^struct nk_user_font_glyph {$/;"	s
nk_ushort	nuklear/nuklear.h	/^typedef uint16_t nk_ushort;$/;"	t	typeref:typename:uint16_t
nk_utfbyte	nuklear/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfbyte[NK_UTF_SIZE+1] = {0x80, 0, 0xC0, 0xE0, 0xF0};$/;"	v	typeref:typename:NK_GLOBAL const nk_byte[]
nk_utfmask	nuklear/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfmask[NK_UTF_SIZE+1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	typeref:typename:NK_GLOBAL const nk_byte[]
nk_utfmax	nuklear/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	typeref:typename:NK_GLOBAL const nk_uint[]
nk_utfmin	nuklear/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};$/;"	v	typeref:typename:NK_GLOBAL const nk_uint[]
nk_utf_at	nuklear/nuklear.h	/^nk_utf_at(const char *buffer, int length, int index,$/;"	f	typeref:typename:NK_API const char *
nk_utf_decode	nuklear/nuklear.h	/^nk_utf_decode(const char *c, nk_rune *u, int clen)$/;"	f	typeref:typename:NK_API int
nk_utf_decode_byte	nuklear/nuklear.h	/^nk_utf_decode_byte(char c, int *i)$/;"	f	typeref:typename:NK_INTERN nk_rune
nk_utf_encode	nuklear/nuklear.h	/^nk_utf_encode(nk_rune u, char *c, int clen)$/;"	f	typeref:typename:NK_API int
nk_utf_encode_byte	nuklear/nuklear.h	/^nk_utf_encode_byte(nk_rune u, int i)$/;"	f	typeref:typename:NK_INTERN char
NK_UTF_INVALID	nuklear/nuklear.h	/^#define NK_UTF_INVALID /;"	d
nk_utf_len	nuklear/nuklear.h	/^nk_utf_len(const char *str, int len)$/;"	f	typeref:typename:NK_API int
NK_UTF_SIZE	nuklear/nuklear.h	/^#define NK_UTF_SIZE /;"	d
nk_utf_validate	nuklear/nuklear.h	/^nk_utf_validate(nk_rune *u, int i)$/;"	f	typeref:typename:NK_INTERN int
nk_value_bool	nuklear/nuklear.h	/^nk_value_bool(struct nk_context *ctx, const char *prefix, int value)$/;"	f	typeref:typename:NK_API void
nk_value_color_byte	nuklear/nuklear.h	/^nk_value_color_byte(struct nk_context *ctx, const char *p, struct nk_color c)$/;"	f	typeref:typename:NK_API void
nk_value_color_float	nuklear/nuklear.h	/^nk_value_color_float(struct nk_context *ctx, const char *p, struct nk_color color)$/;"	f	typeref:typename:NK_API void
nk_value_color_hex	nuklear/nuklear.h	/^nk_value_color_hex(struct nk_context *ctx, const char *prefix, struct nk_color color)$/;"	f	typeref:typename:NK_API void
nk_value_float	nuklear/nuklear.h	/^nk_value_float(struct nk_context *ctx, const char *prefix, float value)$/;"	f	typeref:typename:NK_API void
nk_value_float_e	nuklear/nuklear.h	/^nk_value_float_e(struct nk_context *ctx, const char *prefix, float value)$/;"	f	typeref:typename:NK_API void
nk_value_int	nuklear/nuklear.h	/^nk_value_int(struct nk_context *ctx, const char *prefix, int value)$/;"	f	typeref:typename:NK_API void
NK_VALUE_PAGE_CAPACITY	nuklear/nuklear.h	/^#define NK_VALUE_PAGE_CAPACITY /;"	d
nk_value_uint	nuklear/nuklear.h	/^nk_value_uint(struct nk_context *ctx, const char *prefix, unsigned int value)$/;"	f	typeref:typename:NK_API void
nk_vec2	nuklear/nuklear.h	/^nk_vec2(float x, float y)$/;"	f	typeref:struct:nk_vec2
nk_vec2	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	s
nk_vec2i	nuklear/nuklear.h	/^nk_vec2i(int x, int y)$/;"	f	typeref:struct:nk_vec2
nk_vec2i	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	s
nk_vec2iv	nuklear/nuklear.h	/^nk_vec2iv(const int *v)$/;"	f	typeref:struct:nk_vec2
nk_vec2v	nuklear/nuklear.h	/^nk_vec2v(const float *v)$/;"	f	typeref:struct:nk_vec2
nk_vec2_add	nuklear/nuklear.h	/^#define nk_vec2_add(/;"	d
nk_vec2_len_sqr	nuklear/nuklear.h	/^#define nk_vec2_len_sqr(/;"	d
nk_vec2_muls	nuklear/nuklear.h	/^#define nk_vec2_muls(/;"	d
nk_vec2_sub	nuklear/nuklear.h	/^#define nk_vec2_sub(/;"	d
NK_VERTICAL	nuklear/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
nk_widget	nuklear/nuklear.h	/^nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f	typeref:typename:NK_API enum nk_widget_layout_states
nk_widget_bounds	nuklear/nuklear.h	/^nk_widget_bounds(struct nk_context *ctx)$/;"	f	typeref:struct:nk_rect
nk_widget_fitting	nuklear/nuklear.h	/^nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,$/;"	f	typeref:typename:NK_API enum nk_widget_layout_states
nk_widget_has_mouse_click_down	nuklear/nuklear.h	/^nk_widget_has_mouse_click_down(struct nk_context *ctx, enum nk_buttons btn, int down)$/;"	f	typeref:typename:NK_API int
NK_WIDGET_INVALID	nuklear/nuklear.h	/^    NK_WIDGET_INVALID, \/* The widget cannot be seen and is completely out of view *\/$/;"	e	enum:nk_widget_layout_states
nk_widget_is_hovered	nuklear/nuklear.h	/^nk_widget_is_hovered(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API int
nk_widget_is_mouse_clicked	nuklear/nuklear.h	/^nk_widget_is_mouse_clicked(struct nk_context *ctx, enum nk_buttons btn)$/;"	f	typeref:typename:NK_API int
nk_widget_layout_states	nuklear/nuklear.h	/^enum nk_widget_layout_states {$/;"	g
nk_widget_position	nuklear/nuklear.h	/^nk_widget_position(struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
NK_WIDGET_ROM	nuklear/nuklear.h	/^    NK_WIDGET_ROM \/* The widget is partially visible and cannot be updated *\/$/;"	e	enum:nk_widget_layout_states
nk_widget_size	nuklear/nuklear.h	/^nk_widget_size(struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_widget_states	nuklear/nuklear.h	/^enum nk_widget_states {$/;"	g
NK_WIDGET_STATE_ACTIVE	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ACTIVE      = NK_WIDGET_STATE_ACTIVED|NK_WIDGET_STATE_MODIFIED \/* widget is/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ACTIVED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ACTIVED     = NK_FLAG(5),\/* widget is currently activated *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ENTERED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_ENTERED     = NK_FLAG(3), \/* widget has been hovered on the current frame */;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVER	nuklear/nuklear.h	/^    NK_WIDGET_STATE_HOVER       = NK_FLAG(4), \/* widget is being hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVERED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_HOVERED     = NK_WIDGET_STATE_HOVER|NK_WIDGET_STATE_MODIFIED, \/* widget is /;"	e	enum:nk_widget_states
NK_WIDGET_STATE_INACTIVE	nuklear/nuklear.h	/^    NK_WIDGET_STATE_INACTIVE    = NK_FLAG(2), \/* widget is neither active nor hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_LEFT	nuklear/nuklear.h	/^    NK_WIDGET_STATE_LEFT        = NK_FLAG(6), \/* widget is from this frame on not hovered anymo/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_MODIFIED	nuklear/nuklear.h	/^    NK_WIDGET_STATE_MODIFIED    = NK_FLAG(1),$/;"	e	enum:nk_widget_states
nk_widget_state_reset	nuklear/nuklear.h	/^#define nk_widget_state_reset(/;"	d
nk_widget_text	nuklear/nuklear.h	/^nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,$/;"	f	typeref:typename:NK_INTERN void
nk_widget_text_wrap	nuklear/nuklear.h	/^nk_widget_text_wrap(struct nk_command_buffer *o, struct nk_rect b,$/;"	f	typeref:typename:NK_INTERN void
NK_WIDGET_VALID	nuklear/nuklear.h	/^    NK_WIDGET_VALID, \/* The widget is completely inside the window and can be updated and drawn/;"	e	enum:nk_widget_layout_states
nk_window	nuklear/nuklear.h	/^struct nk_window {$/;"	s
NK_WINDOW_BORDER	nuklear/nuklear.h	/^    NK_WINDOW_BORDER        = NK_FLAG(0), \/* Draws a border around the window to visually separ/;"	e	enum:nk_panel_flags
NK_WINDOW_BORDER_HEADER	nuklear/nuklear.h	/^    NK_WINDOW_BORDER_HEADER = NK_FLAG(1), \/* Draws a border between window header and body *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_CLOSABLE	nuklear/nuklear.h	/^    NK_WINDOW_CLOSABLE      = NK_FLAG(4), \/* adds a closable icon into the header *\/$/;"	e	enum:nk_panel_flags
nk_window_close	nuklear/nuklear.h	/^nk_window_close(struct nk_context *ctx, const char *name)$/;"	f	typeref:typename:NK_API void
nk_window_collapse	nuklear/nuklear.h	/^nk_window_collapse(struct nk_context *ctx, const char *name,$/;"	f	typeref:typename:NK_API void
nk_window_collapse_if	nuklear/nuklear.h	/^nk_window_collapse_if(struct nk_context *ctx, const char *name,$/;"	f	typeref:typename:NK_API void
NK_WINDOW_COMBO	nuklear/nuklear.h	/^    NK_WINDOW_COMBO         = NK_FLAG(18),$/;"	e	enum:nk_window_flags
NK_WINDOW_CONTEXTUAL	nuklear/nuklear.h	/^    NK_WINDOW_CONTEXTUAL    = NK_FLAG(17),$/;"	e	enum:nk_window_flags
NK_WINDOW_DYNAMIC	nuklear/nuklear.h	/^    NK_WINDOW_DYNAMIC       = NK_FLAG(6), \/* special window type growing up in height while bei/;"	e	enum:nk_panel_flags
nk_window_find	nuklear/nuklear.h	/^nk_window_find(struct nk_context *ctx, const char *name)$/;"	f	typeref:struct:nk_window *
nk_window_flags	nuklear/nuklear.h	/^enum nk_window_flags {$/;"	g
nk_window_get_bounds	nuklear/nuklear.h	/^nk_window_get_bounds(const struct nk_context *ctx)$/;"	f	typeref:struct:nk_rect
nk_window_get_canvas	nuklear/nuklear.h	/^nk_window_get_canvas(struct nk_context *ctx)$/;"	f	typeref:struct:nk_command_buffer *
nk_window_get_content_region	nuklear/nuklear.h	/^nk_window_get_content_region(struct nk_context *ctx)$/;"	f	typeref:struct:nk_rect
nk_window_get_content_region_max	nuklear/nuklear.h	/^nk_window_get_content_region_max(struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_window_get_content_region_min	nuklear/nuklear.h	/^nk_window_get_content_region_min(struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_window_get_content_region_size	nuklear/nuklear.h	/^nk_window_get_content_region_size(struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_window_get_height	nuklear/nuklear.h	/^nk_window_get_height(const struct nk_context *ctx)$/;"	f	typeref:typename:NK_API float
nk_window_get_panel	nuklear/nuklear.h	/^nk_window_get_panel(struct nk_context *ctx)$/;"	f	typeref:struct:nk_panel *
nk_window_get_position	nuklear/nuklear.h	/^nk_window_get_position(const struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_window_get_size	nuklear/nuklear.h	/^nk_window_get_size(const struct nk_context *ctx)$/;"	f	typeref:struct:nk_vec2
nk_window_get_width	nuklear/nuklear.h	/^nk_window_get_width(const struct nk_context *ctx)$/;"	f	typeref:typename:NK_API float
NK_WINDOW_GROUP	nuklear/nuklear.h	/^    NK_WINDOW_GROUP         = NK_FLAG(14),$/;"	e	enum:nk_window_flags
nk_window_has_focus	nuklear/nuklear.h	/^nk_window_has_focus(const struct nk_context *ctx)$/;"	f	typeref:typename:NK_API int
nk_window_has_header	nuklear/nuklear.h	/^nk_window_has_header(struct nk_window *win, const char *title)$/;"	f	typeref:typename:int
NK_WINDOW_HIDDEN	nuklear/nuklear.h	/^    NK_WINDOW_HIDDEN        = NK_FLAG(11),$/;"	e	enum:nk_window_flags
nk_window_is_active	nuklear/nuklear.h	/^nk_window_is_active(struct nk_context *ctx, const char *name)$/;"	f	typeref:typename:NK_API int
nk_window_is_any_hovered	nuklear/nuklear.h	/^nk_window_is_any_hovered(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API int
nk_window_is_closed	nuklear/nuklear.h	/^nk_window_is_closed(struct nk_context *ctx, const char *name)$/;"	f	typeref:typename:NK_API int
nk_window_is_collapsed	nuklear/nuklear.h	/^nk_window_is_collapsed(struct nk_context *ctx, const char *name)$/;"	f	typeref:typename:NK_API int
nk_window_is_hovered	nuklear/nuklear.h	/^nk_window_is_hovered(struct nk_context *ctx)$/;"	f	typeref:typename:NK_API int
NK_WINDOW_MENU	nuklear/nuklear.h	/^    NK_WINDOW_MENU          = NK_FLAG(19),$/;"	e	enum:nk_window_flags
NK_WINDOW_MINIMIZABLE	nuklear/nuklear.h	/^    NK_WINDOW_MINIMIZABLE   = NK_FLAG(5), \/* adds a minimize icon into the header *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_MINIMIZED	nuklear/nuklear.h	/^    NK_WINDOW_MINIMIZED     = NK_FLAG(12),$/;"	e	enum:nk_window_flags
NK_WINDOW_MOVABLE	nuklear/nuklear.h	/^    NK_WINDOW_MOVABLE       = NK_FLAG(2), \/* The movable flag indicates that a window can be mo/;"	e	enum:nk_panel_flags
NK_WINDOW_NONBLOCK	nuklear/nuklear.h	/^    NK_WINDOW_NONBLOCK      = NK_FLAG(16),$/;"	e	enum:nk_window_flags
NK_WINDOW_NO_SCROLLBAR	nuklear/nuklear.h	/^    NK_WINDOW_NO_SCROLLBAR  = NK_FLAG(7), \/* Removes the scrollbar from the window *\/$/;"	e	enum:nk_panel_flags
NK_WINDOW_POPUP	nuklear/nuklear.h	/^    NK_WINDOW_POPUP         = NK_FLAG(15),$/;"	e	enum:nk_window_flags
NK_WINDOW_PRIVATE	nuklear/nuklear.h	/^    NK_WINDOW_PRIVATE       = NK_FLAG(9),$/;"	e	enum:nk_window_flags
NK_WINDOW_REMOVE_ROM	nuklear/nuklear.h	/^    NK_WINDOW_REMOVE_ROM    = NK_FLAG(21)$/;"	e	enum:nk_window_flags
NK_WINDOW_ROM	nuklear/nuklear.h	/^    NK_WINDOW_ROM           = NK_FLAG(10),$/;"	e	enum:nk_window_flags
NK_WINDOW_SCALABLE	nuklear/nuklear.h	/^    NK_WINDOW_SCALABLE      = NK_FLAG(3), \/* The scalable flag indicates that a window can be s/;"	e	enum:nk_panel_flags
nk_window_set_bounds	nuklear/nuklear.h	/^nk_window_set_bounds(struct nk_context *ctx, struct nk_rect bounds)$/;"	f	typeref:typename:NK_API void
nk_window_set_focus	nuklear/nuklear.h	/^nk_window_set_focus(struct nk_context *ctx, const char *name)$/;"	f	typeref:typename:NK_API void
nk_window_set_position	nuklear/nuklear.h	/^nk_window_set_position(struct nk_context *ctx, struct nk_vec2 pos)$/;"	f	typeref:typename:NK_API void
nk_window_set_size	nuklear/nuklear.h	/^nk_window_set_size(struct nk_context *ctx, struct nk_vec2 size)$/;"	f	typeref:typename:NK_API void
nk_window_show	nuklear/nuklear.h	/^nk_window_show(struct nk_context *ctx, const char *name, enum nk_show_states s)$/;"	f	typeref:typename:NK_API void
nk_window_show_if	nuklear/nuklear.h	/^nk_window_show_if(struct nk_context *ctx, const char *name,$/;"	f	typeref:typename:NK_API void
NK_WINDOW_SUB	nuklear/nuklear.h	/^    NK_WINDOW_SUB           = NK_FLAG(13),$/;"	e	enum:nk_window_flags
NK_WINDOW_TITLE	nuklear/nuklear.h	/^    NK_WINDOW_TITLE         = NK_FLAG(8) \/* Forces a header at the top at the window showing th/;"	e	enum:nk_panel_flags
NK_WINDOW_TOOLTIP	nuklear/nuklear.h	/^    NK_WINDOW_TOOLTIP       = NK_FLAG(20),$/;"	e	enum:nk_window_flags
nk_wmask	nuklear/nuklear.h	/^    #define nk_wmask /;"	d
nk_word	nuklear/nuklear.h	/^    #define nk_word /;"	d
nk_wsize	nuklear/nuklear.h	/^    #define nk_wsize /;"	d
nk_zero	nuklear/nuklear.h	/^nk_zero(void *ptr, nk_size size)$/;"	f	typeref:typename:NK_INTERN void
nk_zero_struct	nuklear/nuklear.h	/^#define nk_zero_struct(/;"	d
nk__barrier	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier;$/;"	v	typeref:typename:NK_GLOBAL unsigned char *
nk__barrier2	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier2;$/;"	v	typeref:typename:NK_GLOBAL unsigned char *
nk__barrier3	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier3;$/;"	v	typeref:typename:NK_GLOBAL unsigned char *
nk__barrier4	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier4;$/;"	v	typeref:typename:NK_GLOBAL unsigned char *
nk__begin	nuklear/nuklear.h	/^nk__begin(struct nk_context *ctx)$/;"	f	typeref:struct:nk_command *
nk__check_byte	nuklear/nuklear.h	/^typedef int nk__check_byte[(sizeof(nk_byte) == 1) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_byte)==1)?1:-1]
nk__check_flags	nuklear/nuklear.h	/^typedef int nk__check_flags[(sizeof(nk_flags) >= 4) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_flags)>=4)?1:-1]
nk__check_int	nuklear/nuklear.h	/^typedef int nk__check_int[(sizeof(nk_int) == 4) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_int)==4)?1:-1]
nk__check_ptr	nuklear/nuklear.h	/^typedef int nk__check_ptr[(sizeof(nk_ptr) == sizeof(void*)) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_ptr)==sizeof (void *))?1:-1]
nk__check_rune	nuklear/nuklear.h	/^typedef int nk__check_rune[(sizeof(nk_rune) >= 4) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_rune)>=4)?1:-1]
nk__check_short	nuklear/nuklear.h	/^typedef int nk__check_short[(sizeof(nk_short) == 2) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_short)==2)?1:-1]
nk__check_size	nuklear/nuklear.h	/^typedef int nk__check_size[(sizeof(nk_size) >= sizeof(void*)) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_size)>=sizeof (void *))?1:-1]
nk__check_uint	nuklear/nuklear.h	/^typedef int nk__check_uint[(sizeof(nk_uint) == 4) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_uint)==4)?1:-1]
nk__check_ushort	nuklear/nuklear.h	/^typedef int nk__check_ushort[(sizeof(nk_ushort) == 2) ? 1 : -1];$/;"	t	typeref:typename:int[(sizeof (nk_ushort)==2)?1:-1]
nk__dout	nuklear/nuklear.h	/^NK_GLOBAL unsigned char *nk__dout;$/;"	v	typeref:typename:NK_GLOBAL unsigned char *
nk__draw_begin	nuklear/nuklear.h	/^nk__draw_begin(const struct nk_context *ctx,$/;"	f	typeref:struct:nk_draw_command *
nk__draw_list_begin	nuklear/nuklear.h	/^nk__draw_list_begin(const struct nk_draw_list *canvas, const struct nk_buffer *buffer)$/;"	f	typeref:struct:nk_draw_command *
nk__draw_list_next	nuklear/nuklear.h	/^nk__draw_list_next(const struct nk_draw_command *cmd,$/;"	f	typeref:struct:nk_draw_command *
nk__draw_next	nuklear/nuklear.h	/^nk__draw_next(const struct nk_draw_command *cmd,$/;"	f	typeref:struct:nk_draw_command *
nk__in2	nuklear/nuklear.h	/^#define nk__in2(/;"	d
nk__in3	nuklear/nuklear.h	/^#define nk__in3(/;"	d
nk__in4	nuklear/nuklear.h	/^#define nk__in4(/;"	d
nk__lit	nuklear/nuklear.h	/^nk__lit(unsigned char *data, unsigned int length)$/;"	f	typeref:typename:NK_INTERN void
nk__match	nuklear/nuklear.h	/^nk__match(unsigned char *data, unsigned int length)$/;"	f	typeref:typename:NK_INTERN void
nk__next	nuklear/nuklear.h	/^nk__next(struct nk_context *ctx, const struct nk_command *cmd)$/;"	f	typeref:struct:nk_command *
nlz	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int nlz(unsigned int x) $/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
nodes	nuklear/nuklear.h	/^    void  *nodes;$/;"	m	struct:nk_tt_pack_context	typeref:typename:void *
node_maximize_button	nuklear/nuklear.h	/^    struct nk_style_button node_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_button
node_minimize_button	nuklear/nuklear.h	/^    struct nk_style_button node_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_button
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
normal	glm/detail/dummy.cpp	/^	glm::vec3 normal;$/;"	m	struct:intersection	typeref:typename:glm::vec3	file:
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_item
normal	nuklear/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_item
normalize	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType normalize(genType const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
normalize	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> normalize(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
normalize	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> normalize(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
normalize	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> normalize(tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
normalize	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD normalize$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
normalize	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD normalize$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
normalizeAngles	Camera.cpp	/^void Camera::normalizeAngles() {$/;"	f	class:Camera	typeref:typename:void
normalizeDot	glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T normalizeDot(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
normalizeDotA	glm/detail/dummy.cpp	/^T normalizeDotA(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	typeref:typename:T
normalizeDotB	glm/detail/dummy.cpp	/^T normalizeDotB(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	typeref:typename:T
normalizeDotC	glm/detail/dummy.cpp	/^typename vecType::value_type normalizeDotC(vecType const & a, vecType const & b)$/;"	f	typeref:typename:vecType::value_type
normal_active	nuklear/nuklear.h	/^    struct nk_style_item normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
notEqual	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> notEqual(vecType<T, P> const & x, vecType<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
notEqual	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<bool, P> notEqual(tquat<T, P> const & x, tquat<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<bool,P>
notEqual	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool notEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
not_	glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER vecType<bool, P> not_(vecType<bool, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<bool,P>
not_	glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool not_$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
null	glm/detail/type_gentype.hpp	/^		enum ctor{null};$/;"	e	enum:glm::detail::genType::ctor
null	nuklear/nuklear.h	/^    struct nk_draw_null_texture null; \/* handle to texture with a white pixel for shape drawing/;"	m	struct:nk_convert_config	typeref:struct:nk_draw_null_texture
null	nuklear/nuklear.h	/^    struct nk_draw_null_texture null;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_null_texture
null	nuklear/nuklear_glfw_gl3.h	/^    struct nk_draw_null_texture null;$/;"	m	struct:nk_glfw_device	typeref:struct:nk_draw_null_texture
null_rect	nuklear/nuklear.h	/^    NK_STORAGE const struct nk_rect null_rect = {0,0,0,0};$/;"	s	function:nk_contextual_begin
number_of_elements_	glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(genType const & m){$/;"	f	namespace:glm::detail	typeref:typename:detail::component_count_t
number_of_elements_	glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec2<T, P> const & v){$/;"	f	namespace:glm::detail	typeref:typename:detail::component_count_t
number_of_elements_	glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec3<T, P> const & v){$/;"	f	namespace:glm::detail	typeref:typename:detail::component_count_t
number_of_elements_	glm/gtx/range.hpp	/^	detail::component_count_t number_of_elements_(tvec4<T, P> const & v){$/;"	f	namespace:glm::detail	typeref:typename:detail::component_count_t
numGlyphs	nuklear/nuklear.h	/^    int numGlyphs;\/* number of glyphs, needed for range checking *\/$/;"	m	struct:nk_tt_fontinfo	typeref:typename:int
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:int
num_chars	nuklear/nuklear.h	/^    int num_chars;$/;"	m	struct:nk_tt_pack_range	typeref:typename:int
num_chars	nuklear/nuklear.h	/^   int num_chars;$/;"	m	struct:nk_text_edit_row	typeref:typename:int
num_nodes	nuklear/nuklear.h	/^    int num_nodes;$/;"	m	struct:nk_rp_context	typeref:typename:int
num_remaining_in_head_chunk	nuklear/nuklear.h	/^    int    num_remaining_in_head_chunk;$/;"	m	struct:nk_tt__hheap	typeref:typename:int
object	Program.cpp	/^GLuint Program::object() const {$/;"	f	class:Program	typeref:typename:GLuint
object	Shader.cpp	/^GLuint Shader::object() const {$/;"	f	class:Shader	typeref:typename:GLuint
object	Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture	typeref:typename:GLuint
offset	nuklear/nuklear.h	/^    nk_size offset;$/;"	m	struct:nk_buffer_marker	typeref:typename:nk_size
offset	nuklear/nuklear.h	/^    struct nk_scroll *offset;$/;"	m	struct:nk_panel	typeref:struct:nk_scroll *
offset	nuklear/nuklear.h	/^    struct nk_scroll offset;$/;"	m	struct:nk_menu_state	typeref:struct:nk_scroll
offset	nuklear/nuklear.h	/^    struct nk_vec2 offset;$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_vec2
offset	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_vec2
offsetOrientation	Camera.cpp	/^void Camera::offsetOrientation(float upAngle, float rightAngle) {$/;"	f	class:Camera	typeref:typename:void
offsetPosition	Camera.cpp	/^void Camera::offsetPosition(const glm::vec3& offset) {$/;"	f	class:Camera	typeref:typename:void
ogl	nuklear/nuklear_glfw_gl3.h	/^    struct nk_glfw_device ogl;$/;"	m	struct:nk_glfw	typeref:struct:nk_glfw_device
old	nuklear/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_edit_state	typeref:typename:unsigned int
old	nuklear/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_property_state	typeref:typename:unsigned int
OnClick	main.cpp	/^void OnClick(GLFWwindow *window, int button, int action, int mods)$/;"	f	typeref:typename:void
one	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED one = _mm_set_ps1(1.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
one	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
OnError	main.cpp	/^void OnError(int errorCode, const char *msg)$/;"	f	typeref:typename:void
ones32	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int ones32(unsigned int x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
one_over_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_root_two	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_two_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
OnScroll	main.cpp	/^void OnScroll(GLFWwindow *window, double deltaX, double deltaY)$/;"	f	typeref:typename:void
op	glm/detail/_swizzle.hpp	/^			struct op { $/;"	s	function:glm::detail::_swizzle_base2::operator *=
op	glm/detail/_swizzle.hpp	/^			struct op { $/;"	s	function:glm::detail::_swizzle_base2::operator +=
op	glm/detail/_swizzle.hpp	/^			struct op { $/;"	s	function:glm::detail::_swizzle_base2::operator -=
op	glm/detail/_swizzle.hpp	/^			struct op { $/;"	s	function:glm::detail::_swizzle_base2::operator /=
op	glm/detail/_swizzle.hpp	/^			struct op { $/;"	s	function:glm::detail::_swizzle_base2::operator =
operator !=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tquat<T, P> const & q1, tquat<T, P> const & q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tdualquat<T, P> const & q1, tdualquat<T, P> const & q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator %	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator%(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator %	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator%(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator %	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator%(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator %	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator%(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator %	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator%(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator %	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator%(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator %	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator %	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator %	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator%(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator %	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator%(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator %	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator%(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator %	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator%(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator %	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator%(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator %	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator%(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator %	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator%(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator %	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator%(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator %	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator%(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator %	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator%(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator %=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator%=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator %=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator%=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator %=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator%=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator %=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator%=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator %=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator%=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator %=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator%=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator %=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator%=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator %=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator%=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator %=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator%=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator %=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator%=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator %=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator%=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator &	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator&(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator &	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator&(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator &	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator&(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator &	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator&(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator &	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator&(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator &	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator&(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator &	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator &	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator &	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator&(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator &	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator&(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator &	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator&(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator &	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator&(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator &	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator&(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator &	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator&(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator &	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator&(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator &	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator&(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator &	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator&(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator &	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator&(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator &=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator&=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator &=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator&=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator &=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator&=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator &=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator&=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator &=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator&=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator &=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator&=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator &=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator&=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator &=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator&=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator &=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator&=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator &=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator&=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator &=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator&=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator ()	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER V operator ()()  const { return V(this->elem(E0), this->elem(E1)); }$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER V
operator ()	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER V operator ()()  const { return V(this->elem(E0), this->elem(E1), this->ele/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER V
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tdualquat<T, P>>::operator()(glm::tdualquat<T, P> const & q/;"	f	class:std::hash::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat2x2<T, P>>::operator()(glm::tmat2x2<T, P> const & m) co/;"	f	class:std::hash::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat2x3<T, P>>::operator()(glm::tmat2x3<T, P> const & m) co/;"	f	class:std::hash::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat2x4<T, P>>::operator()(glm::tmat2x4<T, P> const & m) co/;"	f	class:std::hash::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat3x2<T, P>>::operator()(glm::tmat3x2<T, P> const & m) co/;"	f	class:std::hash::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat3x3<T, P>>::operator()(glm::tmat3x3<T, P> const & m) co/;"	f	class:std::hash::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat3x4<T, P>>::operator()(glm::tmat3x4<T, P> const & m) co/;"	f	class:std::hash::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat4x2<T,P>>::operator()(glm::tmat4x2<T,P> const & m) cons/;"	f	class:std::hash::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat4x3<T,P>>::operator()(glm::tmat4x3<T,P> const & m) cons/;"	f	class:std::hash::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tmat4x4<T,P>>::operator()(glm::tmat4x4<T, P> const & m) con/;"	f	class:std::hash::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tquat<T, P>>::operator()(glm::tquat<T,P> const & q) const$/;"	f	class:std::hash::tquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tvec1<T, P>>::operator()(glm::tvec1<T, P> const & v) const$/;"	f	class:std::hash::tvec1	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tvec2<T, P>>::operator()(glm::tvec2<T, P> const & v) const$/;"	f	class:std::hash::tvec2	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tvec3<T, P>>::operator()(glm::tvec3<T, P> const & v) const$/;"	f	class:std::hash::tvec3	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tvec4<T, P>>::operator()(glm::tvec4<T, P> const & v) const$/;"	f	class:std::hash::tvec4	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator () 	glm/detail/_swizzle.hpp	/^				GLM_FUNC_QUALIFIER void operator() (value_type& e, value_type& t) { e *= t; } $/;"	f	struct:glm::detail::_swizzle_base2::operator *=::op	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	glm/detail/_swizzle.hpp	/^				GLM_FUNC_QUALIFIER void operator() (value_type& e, value_type& t) { e += t; } $/;"	f	struct:glm::detail::_swizzle_base2::operator +=::op	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	glm/detail/_swizzle.hpp	/^				GLM_FUNC_QUALIFIER void operator() (value_type& e, value_type& t) { e -= t; } $/;"	f	struct:glm::detail::_swizzle_base2::operator -=::op	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	glm/detail/_swizzle.hpp	/^				GLM_FUNC_QUALIFIER void operator() (value_type& e, value_type& t) { e = t; } $/;"	f	struct:glm::detail::_swizzle_base2::operator =::op	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	glm/detail/_swizzle.hpp	/^				GLM_FUNC_QUALIFIER void operator() (value_type& e, value_type& t) { e \/= t; } $/;"	f	struct:glm::detail::_swizzle_base2::operator /=::op	typeref:typename:GLM_FUNC_QUALIFIER void
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator*(T const & s, tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator*(tmat2x2<T, P> const & m,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::col_type
operator *	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::row_type
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator*(T const & s, tmat2x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator*(tmat2x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x3<T, P>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x3<T,P>::col_type
operator *	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x3<T, P>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x3<T,P>::row_type
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator*(T const & s, tmat2x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator*(tmat2x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x4<T, P>::col_type operator*(tmat2x4<T, P> const & m, typename/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x4<T,P>::col_type
operator *	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x4<T, P>::row_type operator*(typename tmat2x4<T, P>::col_type /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x4<T,P>::row_type
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator*(T const & s, tmat3x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator*(tmat3x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x2<T, P>::col_type operator*(tmat3x2<T, P> const & m, typename/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x2<T,P>::col_type
operator *	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x2<T, P>::row_type operator*(typename tmat3x2<T, P>::col_type /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x2<T,P>::row_type
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator*(T const & s, tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator*(tmat3x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::col_type operator*(tmat3x3<T, P> const & m, typename/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::col_type
operator *	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::row_type operator*(typename tmat3x3<T, P>::col_type /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::row_type
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator*(T const & s, tmat3x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator*(tmat3x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x4<T, P>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x4<T,P>::col_type
operator *	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x4<T, P>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x4<T,P>::row_type
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator*(T const & s, tmat4x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator*(tmat4x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x2<T, P>::col_type operator*(tmat4x2<T, P> const & m, typename/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x2<T,P>::col_type
operator *	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x2<T, P>::row_type operator*(typename tmat4x2<T, P>::col_type /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x2<T,P>::row_type
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator*(T const & s, tmat4x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator*(tmat4x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x3<T, P>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x3<T,P>::col_type
operator *	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x3<T, P>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x3<T,P>::row_type
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator*(T const & s, tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator*(tmat4x4<T, P> const & m, T const  & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::col_type
operator *	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::row_type
operator *	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator*(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator *	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator*(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator *	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator*(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator *	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator*(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator *	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator*(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator *	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator*(tvec2<T, P> const & v1, T const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator *	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator *	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator *	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec1<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator*(T const & s, tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator*(tquat<T, P> const & q,	tquat<T, P> const & p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator*(tquat<T, P> const & q, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tquat<T, P> const & q,	tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec3<T, P> const & v, tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tquat<T, P> const & q,	tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec4<T, P> const & v, tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator*(T const & s, tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator*(tdualquat<T, P> const & p, tdualquat<T, P> const &/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator*(tdualquat<T, P> const & q, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tdualquat<T, P> const & q, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator*(tvec3<T, P> const & v,	tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tdualquat<T, P> const & q, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator*(tvec4<T, P> const & v,	tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator *	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD operator*$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD
operator *	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator*$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator* (float s, fquatSIMD const & q)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator *	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator* (fquatSIMD const & q, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator *	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator* (fquatSIMD const & q1, fquatSIMD const & q2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator *	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator* (fquatSIMD const & q, fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator* (fvec4SIMD const & v, fquatSIMD const & q)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator* (float s, fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator* (fvec4SIMD const & v, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator* (fvec4SIMD const & v1, fvec4SIMD const & v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator *=	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator*= $/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator *=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator*=(tmat2x2<U, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator *=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator*=(U s)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator *=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator*=(U s)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator *=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator*=(U s)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator *=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator*=(U s)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator *=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator*=(tmat3x3<U, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator *=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator*=(U s)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator *=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator*=(U s)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator *=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator*=(U s)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator *=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator*=(U s)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator *=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator*=(tmat4x4<U, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator *=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator*=(U s)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator *=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator*=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator *=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator*=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator *=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator*=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator *=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator*=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator *=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator*=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator *=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator*=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator *=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator*=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator *=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator*=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator *=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator*=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator *=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator*=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator *=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator*=(U v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator *=	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator *=	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator*=(tquat<U, P> const & r)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator *=	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator*=(U s)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator *=	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> & tdualquat<T, P>::operator*=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P> &
operator *=	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator*= $/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator *=	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD& fquatSIMD::operator*=(float const & s)$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD &
operator *=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator*=(float const & s)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator *=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator*=(fvec4SIMD const & v)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator +	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator+(T const & s, tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator +	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator+(tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator +	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator+(tmat2x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator +	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator+(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator +	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator+(tmat2x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator +	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator+(tmat2x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator +	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator+(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator +	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator+(tmat2x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator +	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator+(tmat2x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator +	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator+(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator +	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator+(tmat3x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator +	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator+(tmat3x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator +	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator+(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator +	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator+(T const & s, tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator +	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator+(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator +	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator+(tmat3x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator +	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator+(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator +	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator+(tmat3x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator +	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator+(tmat3x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator +	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator+(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator +	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator+(tmat4x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator +	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator+(tmat4x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator +	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator+(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator +	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator+(tmat4x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator +	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator+(tmat4x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator +	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator+(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator +	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator+(T const & s, tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator +	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator+(tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator +	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator+(tmat4x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator +	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator+(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator +	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator+(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator +	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator+(tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator +	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator+(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator +	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator+(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator+(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(tvec1<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator +	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator+(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator +	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator+(tquat<T, P> const & q,	tquat<T, P> const & p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator +	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator+(tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator +	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator+(tdualquat<T, P> const & q, tdualquat<T, P> const &/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator +	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD operator+$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD
operator +	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator+ (fquatSIMD const & q1, fquatSIMD const & q2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator +	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator+ (float s, fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator +	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator+ (fvec4SIMD const & v, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator +	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator+ (fvec4SIMD const & v1, fvec4SIMD const & v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator ++	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator++ ()$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator ++	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> tmat2x2<T, P>::operator++(int)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator ++	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator++()$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator ++	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> & tmat2x3<T, P>::operator++()$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator ++	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> tmat2x3<T, P>::operator++(int)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator ++	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> tmat2x4<T, P>::operator++(int)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator ++	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator++()$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator ++	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> tmat3x2<T, P>::operator++(int)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator ++	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator++()$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator ++	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator++()$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator ++	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> tmat3x3<T, P>::operator++(int)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator ++	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> tmat3x4<T, P>::operator++(int)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator ++	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator++()$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator ++	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator++()$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator ++	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> tmat4x2<T, P>::operator++(int)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator ++	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator++()$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator ++	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> tmat4x3<T, P>::operator++(int)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator ++	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator++()$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator ++	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> tmat4x4<T, P>::operator++(int)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator ++	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator++()$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator ++	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> tvec1<T, P>::operator++(int)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator ++	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator++()$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator ++	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> tvec2<T, P>::operator++(int)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ++	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator++()$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator ++	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> tvec3<T, P>::operator++(int)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ++	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator++()$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator ++	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> tvec4<T, P>::operator++(int)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ++	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator++ ()$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator ++	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD const operator++$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD const
operator ++	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator++ (fvec4SIMD const & v, int)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator ++	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator++()$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator +=	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator+= $/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator +=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator+=(tmat2x2<U, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator +=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator+=(U s)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator +=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> & tmat2x3<T, P>::operator+=(U s)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator +=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator+=(tmat2x3<U, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator +=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator+=(tmat2x4<U, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator +=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator+=(U s)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator +=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator+=(tmat3x2<U, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator +=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator+=(U s)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator +=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator+=(tmat3x3<U, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator +=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator+=(U s)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator +=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator+=(tmat3x4<U, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator +=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator+=(U s)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator +=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator+=(tmat4x2<U, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator +=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator+=(U s)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator +=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator+=(tmat4x3<U, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator +=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator+=(U s)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator +=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>& tmat4x4<T, P>::operator+=(tmat4x4<U, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator +=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>& tmat4x4<T, P>::operator+=(U s)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator +=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator+=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator +=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator+=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator +=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator+=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator +=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator+=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator +=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator+=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator +=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator+=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator +=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator+=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator +=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator+=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator +=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator+=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator +=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator+=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator +=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator+=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator +=	glm/detail/type_vec4_sse2.inl	/^	GLM_FUNC_QUALIFIER tvec4<float, simd> & tvec4<float, simd>::operator+=(tvec1<U, simd> const & v/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<float,simd> &
operator +=	glm/detail/type_vec4_sse2.inl	/^	GLM_FUNC_QUALIFIER tvec4<float, simd> & tvec4<float, simd>::operator+=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<float,simd> &
operator +=	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator +=	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator+=(tquat<U, P> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator +=	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator+= $/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator +=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator+=(float const & s)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator +=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator+=(fvec4SIMD const & v)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator -	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator-(T const & s, tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator -	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator-(tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator -	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator-(tmat2x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator -	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator-(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator -	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator-(tmat2x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator -	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator-(tmat2x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator -	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator-(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator -	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator-(tmat2x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator -	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator-(tmat2x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator -	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator-(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator -	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator-(tmat3x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator -	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator-(tmat3x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator -	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator-(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator -	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator-(T const & s, tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator -	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator-(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator -	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator-(tmat3x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator -	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator-(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator -	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator-(tmat3x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator -	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator-(tmat3x4<T, P> const & m,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator -	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator-(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator -	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator-(tmat4x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator -	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator-(tmat4x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator -	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator-(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator -	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator-(tmat4x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator -	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator-(tmat4x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator -	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator-(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator -	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator-(T const & s, tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator -	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator-(tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator -	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator-(tmat4x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator -	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator-(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator -	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator-(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator -	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator-(tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator -	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator-(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator -	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator-(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator-(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(tvec1<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator -	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator-(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator -	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator-(tdualquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator -	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD const operator-$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD const
operator -	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD operator-$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD
operator -	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator- (fquatSIMD const & q)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator -	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator- (float s, fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator -	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator- (fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator -	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator- (fvec4SIMD const & v, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator -	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator- (fvec4SIMD const & v1, fvec4SIMD const & v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator --	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator-- ()$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator --	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> tmat2x2<T, P>::operator--(int)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator --	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator--()$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator --	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> & tmat2x3<T, P>::operator--()$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator --	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> tmat2x3<T, P>::operator--(int)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator --	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> tmat2x4<T, P>::operator--(int)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator --	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator--()$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator --	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> tmat3x2<T, P>::operator--(int)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator --	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator--()$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator --	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator--()$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator --	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> tmat3x3<T, P>::operator--(int)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator --	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> tmat3x4<T, P>::operator--(int)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator --	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator--()$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator --	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator--()$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator --	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> tmat4x2<T, P>::operator--(int)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator --	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator--()$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator --	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> tmat4x3<T, P>::operator--(int)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator --	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator--()$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator --	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> tmat4x4<T, P>::operator--(int)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator --	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator--()$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator --	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> tvec1<T, P>::operator--(int)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator --	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator--()$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator --	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> tvec2<T, P>::operator--(int)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator --	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator--()$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator --	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> tvec3<T, P>::operator--(int)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator --	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator--()$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator --	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> tvec4<T, P>::operator--(int)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator --	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator-- ()$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator --	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD const operator--$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD const
operator --	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator-- (fvec4SIMD const & v, int)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator --	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator--()$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator -=	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator-= $/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator -=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator-=(tmat2x2<U, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator -=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator-=(U s)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator -=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator-=(tmat2x3<U, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator -=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator-=(U s)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator -=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator-=(tmat2x4<U, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator -=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator-=(U s)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator -=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator-=(tmat3x2<U, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator -=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator-=(U s)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator -=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator-=(tmat3x3<U, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator -=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator-=(U s)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator -=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator-=(tmat3x4<U, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator -=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator-=(U s)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator -=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator-=(tmat4x2<U, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator -=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator-=(U s)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator -=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator-=(tmat4x3<U, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator -=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator-=(U s)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator -=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator-=(tmat4x4<U, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator -=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator-=(U s)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator -=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator-=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator -=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator-=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator -=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator-=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator -=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator-=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator -=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator-=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator -=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator-=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator -=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator-=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator -=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator-=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator -=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator-=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator -=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator-=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator -=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator-=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator -=	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator -=	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator-= $/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator -=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator-=(float const & s)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator -=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator-=(fvec4SIMD const & v)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator /	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator\/(T const & s, tmat2x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator /	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator\/(tmat2x2<T, P> const & m,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator /	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> operator\/(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
operator /	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::col_type operator\/(tmat2x2<T, P> const & m, typenam/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::col_type
operator /	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::row_type operator\/(typename tmat2x2<T, P>::col_type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::row_type
operator /	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator\/(T const & s,	tmat2x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator /	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> operator\/(tmat2x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P>
operator /	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator\/(T const & s, tmat2x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator /	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> operator\/(tmat2x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P>
operator /	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator\/(T const & s, tmat3x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator /	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> operator\/(tmat3x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P>
operator /	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator\/(T const & s, tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator /	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator\/(tmat3x3<T, P> const & m,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator /	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> operator\/(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
operator /	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::col_type operator\/(tmat3x3<T, P> const & m, typenam/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::col_type
operator /	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::row_type operator\/(typename tmat3x3<T, P>::col_type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::row_type
operator /	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator\/(T const & s, tmat3x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator /	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> operator\/(tmat3x4<T, P> const & m,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P>
operator /	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator\/(T const & s, tmat4x2<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator /	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> operator\/(tmat4x2<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P>
operator /	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator\/(T const & s, tmat4x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator /	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> operator\/(tmat4x3<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P>
operator /	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator\/(T const & s,	tmat4x4<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator /	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator\/(tmat4x4<T, P> const & m, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator /	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> operator\/(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
operator /	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::col_type operator\/(tmat4x4<T, P> const & m, typenam/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::col_type
operator /	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::row_type operator\/(typename tmat4x4<T, P>::col_type/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::row_type
operator /	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator\/(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator /	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator\/(tvec1<T, P> const & v,	T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator /	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator\/(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator /	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator\/(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator /	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator\/(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator /	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator\/(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator /	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator\/(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator /	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator\/(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator /	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator\/(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator /	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator\/(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator /	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator\/(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator /	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator\/(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator /	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator\/(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator /	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator\/(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator /	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator\/(tvec1<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator /	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator\/(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator /	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator\/(tvec4<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator /	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator\/(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator /	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> operator\/(tquat<T, P> const & q, T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
operator /	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> operator\/(tdualquat<T, P> const & q,	T const & s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P>
operator /	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD operator\/$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD
operator /	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator\/$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator /	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD operator\/ (fquatSIMD const & q, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD
operator /	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator\/ (float s, fvec4SIMD const & v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator /	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator\/ (fvec4SIMD const & v, float s)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator /	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD operator\/ (fvec4SIMD const & v1, fvec4SIMD const & v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
operator /=	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator\/= $/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator /=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator\/=(tmat2x2<U, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator /=	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator /=	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P> & tmat2x3<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator /=	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P> & tmat2x4<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator /=	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P> & tmat3x2<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator /=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator\/=(tmat3x3<U, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator /=	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator /=	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P> & tmat3x4<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator /=	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P> & tmat4x2<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator /=	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P> & tmat4x3<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator /=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator\/=(tmat4x4<U, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator /=	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> & tmat4x4<T, P>::operator\/=(U s)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator /=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator\/=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator /=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator\/=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator /=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator\/=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator /=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator\/=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator /=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator\/=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator /=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator\/=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator /=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator\/=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator /=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator\/=(U v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator /=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator\/=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator /=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator\/=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator /=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator\/=(U v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator /=	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator /=	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator\/=(U s)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator /=	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> & tdualquat<T, P>::operator\/=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P> &
operator /=	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fmat4x4SIMD & fmat4x4SIMD::operator\/= $/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator /=	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER fquatSIMD& fquatSIMD::operator\/=(float const & s)$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD &
operator /=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator\/=(float const & s)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator /=	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator\/=(fvec4SIMD const & v)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator <<	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator<<(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator <<	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator<<(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator <<	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator<<(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator <<	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator<<(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator <<	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator<<(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator <<	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator<<(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator <<	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator <<	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator <<	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator<<(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator <<	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator<<(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator <<	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator<<(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator <<	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator<<(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator <<	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator<<(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator <<	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator<<(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator <<	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator<<(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator <<	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator<<(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator <<	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator<<(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator <<	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator<<(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, o/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, p/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, w/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> & operator<<(std::basic_ostream<CTy,CTr>& os, tm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, tma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, tqu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, tve/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^	std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, delimeter<CTy> const/;"	f	namespace:glm::io	typeref:typename:std::basic_ostream<CTy,CTr> &
operator <<	glm/gtx/io.inl	/^        GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator<<=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator <<=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator<<=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator <<=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator<<=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator <<=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator<<=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator <<=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator<<=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator <<=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator<<=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator <<=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator<<=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator <<=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator<<=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator <<=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator<<=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator <<=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator<<=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator <<=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator<<=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator =	Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap	typeref:typename:Bitmap &
operator =	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::class_type& base<vT, cT, rT, pT>::operator= $/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::class_type &
operator =	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator=(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator =	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>& tmat2x2<T, P>::operator=(tmat2x2<U, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P> &
operator =	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator=(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator =	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>& tmat2x3<T, P>::operator=(tmat2x3<U, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER tmat2x3<T,P> &
operator =	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator=(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator =	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>& tmat2x4<T, P>::operator=(tmat2x4<U, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER tmat2x4<T,P> &
operator =	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator=(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator =	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>& tmat3x2<T, P>::operator=(tmat3x2<U, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER tmat3x2<T,P> &
operator =	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator=(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator =	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> & tmat3x3<T, P>::operator=(tmat3x3<U, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P> &
operator =	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator=(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator =	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>& tmat3x4<T, P>::operator=(tmat3x4<U, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER tmat3x4<T,P> &
operator =	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER tmat4x2<T, P>& tmat4x2<T, P>::operator=(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator =	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>& tmat4x2<T, P>::operator=(tmat4x2<U, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER tmat4x2<T,P> &
operator =	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER tmat4x3<T, P>& tmat4x3<T, P>::operator=(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator =	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>& tmat4x3<T, P>::operator=(tmat4x3<U, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER tmat4x3<T,P> &
operator =	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER tmat4x4<T, P>& tmat4x4<T, P>::operator=(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator =	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>& tmat4x4<T, P>::operator=(tmat4x4<U, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P> &
operator =	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator=(tvec1<T, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator =	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator =	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator=(tvec2<T, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator =	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator =	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER tvec3<T, P>& tvec3<T, P>::operator=(tvec3<T, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator =	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>& tvec3<T, P>::operator=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator =	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator=(tvec4<T, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator =	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator =	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const ValueType& t)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const VecType& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const &) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator=(tquat<T, P> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator =	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> & tquat<T, P>::operator=(tquat<U, P> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P> &
operator =	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER tdualquat<T, P> & tdualquat<T, P>::operator=(tdualquat<T, P> const & q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P> &
operator =	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P> & tdualquat<T, P>::operator=(tdualquat<U, P> const & q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,P> &
operator =	glm/gtx/simd_mat4.inl	/^	GLM_FUNC_QUALIFIER fmat4x4SIMD& fmat4x4SIMD::operator=$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fmat4x4SIMD &
operator =	glm/gtx/simd_quat.inl	/^	GLM_FUNC_QUALIFIER fquatSIMD& fquatSIMD::operator=(fquatSIMD const & q)$/;"	f	class:glm::detail::fquatSIMD	typeref:typename:GLM_FUNC_QUALIFIER fquatSIMD &
operator =	glm/gtx/simd_vec4.inl	/^	GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::operator=(fvec4SIMD const & v)$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator =	Shader.cpp	/^Shader& Shader::operator = (const Shader& other) {$/;"	f	class:Shader	typeref:typename:Shader &
operator ==	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tquat<T, P> const & q1, tquat<T, P> const & q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tdualquat<T, P> const & q1, tdualquat<T, P> const & q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator >>	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator>>(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator >>	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator>>(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator >>	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator>>(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator >>	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator>>(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator >>	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator>>(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator >>	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator>>(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator >>	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator >>	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator >>	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator>>(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator >>	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator>>(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator >>	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator>>(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator >>	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator>>(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator >>	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator>>(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator >>	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator>>(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator >>	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator>>(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator >>	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator>>(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator >>	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator>>(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator >>	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator>>(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator >>=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator>>=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator >>=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator>>=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator >>=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator>>=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator >>=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator>>=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator >>=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator>>=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator >>=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator>>=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator >>=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator>>=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator >>=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator>>=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator >>=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator>>=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator >>=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator>>=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator >>=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator>>=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator []	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::col_type & tmat2x2<T, P>::operator[](typename tmat2/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::col_type &
operator []	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x2<T, P>::col_type const & tmat2x2<T, P>::operator[](typename/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x2<T,P>::col_type const &
operator []	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x3<T, P>::col_type & tmat2x3<T, P>::operator[](typename tmat2/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x3<T,P>::col_type &
operator []	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x3<T, P>::col_type const & tmat2x3<T, P>::operator[](typename/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x3<T,P>::col_type const &
operator []	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x4<T, P>::col_type & tmat2x4<T, P>::operator[](typename tmat2/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x4<T,P>::col_type &
operator []	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat2x4<T, P>::col_type const & tmat2x4<T, P>::operator[](typename/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat2x4<T,P>::col_type const &
operator []	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x2<T, P>::col_type & tmat3x2<T, P>::operator[](typename tmat3/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x2<T,P>::col_type &
operator []	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x2<T, P>::col_type const & tmat3x2<T, P>::operator[](typename/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x2<T,P>::col_type const &
operator []	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::col_type & tmat3x3<T, P>::operator[](typename tmat3/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::col_type &
operator []	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x3<T, P>::col_type const & tmat3x3<T, P>::operator[](typename/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x3<T,P>::col_type const &
operator []	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x4<T, P>::col_type & tmat3x4<T, P>::operator[](typename tmat3/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x4<T,P>::col_type &
operator []	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat3x4<T, P>::col_type const & tmat3x4<T, P>::operator[](typename/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat3x4<T,P>::col_type const &
operator []	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x2<T, P>::col_type & tmat4x2<T, P>::operator[](typename tmat4/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x2<T,P>::col_type &
operator []	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x2<T, P>::col_type const & tmat4x2<T, P>::operator[](typename/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x2<T,P>::col_type const &
operator []	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x3<T, P>::col_type & tmat4x3<T, P>::operator[](typename tmat4/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x3<T,P>::col_type &
operator []	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x3<T, P>::col_type const & tmat4x3<T, P>::operator[](typename/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x3<T,P>::col_type const &
operator []	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::col_type & tmat4x4<T, P>::operator[](typename tmat4/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::col_type &
operator []	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER typename tmat4x4<T, P>::col_type const & tmat4x4<T, P>::operator[](typename/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER typename tmat4x4<T,P>::col_type const &
operator []	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER T & tvec1<T, P>::operator[](typename tvec1<T, P>::length_type i)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER T & tvec1<T, P>::operator[](typename tvec1<T, P>::size_type i)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER T const & tvec1<T, P>::operator[](typename tvec1<T, P>::length_type i) cons/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER T const & tvec1<T, P>::operator[](typename tvec1<T, P>::size_type i) const$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER T & tvec2<T, P>::operator[](typename tvec2<T, P>::length_type i)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER T & tvec2<T, P>::operator[](typename tvec2<T, P>::size_type i)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER T const & tvec2<T, P>::operator[](typename tvec2<T, P>::length_type i) cons/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER T const & tvec2<T, P>::operator[](typename tvec2<T, P>::size_type i) const$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER T & tvec3<T, P>::operator[](typename tvec3<T, P>::length_type i)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER T & tvec3<T, P>::operator[](typename tvec3<T, P>::size_type i)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER T const & tvec3<T, P>::operator[](typename tvec3<T, P>::length_type i) cons/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER T const & tvec3<T, P>::operator[](typename tvec3<T, P>::size_type i) const$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER T & tvec4<T, P>::operator[](typename tvec4<T, P>::length_type i)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER T & tvec4<T, P>::operator[](typename tvec4<T, P>::size_type i)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER T const & tvec4<T, P>::operator[](typename tvec4<T, P>::length_type i) cons/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER T const & tvec4<T, P>::operator[](typename tvec4<T, P>::size_type i) const$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER T & tquat<T, P>::operator[](typename tquat<T, P>::length_type i)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER T & tquat<T, P>::operator[](typename tquat<T, P>::size_type i)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER T const & tquat<T, P>::operator[](typename tquat<T, P>::length_type i) cons/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER T const & tquat<T, P>::operator[](typename tquat<T, P>::size_type i) const$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER T const &
operator []	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER typename tdualquat<T, P>::part_type & tdualquat<T, P>::operator[](typename /;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,P>::part_type &
operator []	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER typename tdualquat<T, P>::part_type const & tdualquat<T, P>::operator[](typ/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,P>::part_type const &
operator [] 	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::col_type const & base<vT, cT, rT, pT>::operator[]$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::col_type const &
operator [] 	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::col_type& base<vT, cT, rT, pT>::operator[]$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::col_type &
operator [] 	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type  operator[]  (size_t i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER value_type
operator [] 	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER value_type& operator[]  (size_t i)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER value_type &
operator [] 	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD & fmat4x4SIMD::operator[]$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
operator [] 	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD const & fmat4x4SIMD::operator[]$/;"	f	class:glm::detail::fmat4x4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD const &
operator ^	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator^(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator ^	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator^(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator ^	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator^(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator ^	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator^(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ^	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator^(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ^	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator^(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ^	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ^	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ^	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator^(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ^	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator^(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ^	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator^(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ^	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator^(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ^	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator^(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ^	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator^(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ^	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator^(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ^	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator^(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ^	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator^(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ^	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator^(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator ^=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator^=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator ^=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator^=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator ^=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator^=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator ^=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator^=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator ^=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator^=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator ^=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator^=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator ^=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator^=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator ^=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator^=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator ^=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator^=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator ^=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator^=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator ^=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator^=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator |	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator|(T const & scalar, tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator |	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator|(tvec1<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator |	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator|(tvec1<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator |	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator|(T const & scalar, tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator |	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator|(tvec1<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator |	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator|(tvec2<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator |	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec1<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator |	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec2<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator |	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator|(T const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator |	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator|(tvec1<T, P> const & scalar, tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator |	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator|(tvec3<T, P> const & v, T const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator |	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator|(tvec3<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator |	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator|(tvec3<T, P> const & v1, tvec3<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator |	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator|(T scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator |	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator|(tvec1<T, P> const & scalar, tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator |	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator|(tvec4<T, P> const & v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator |	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator|(tvec4<T, P> const & v, tvec1<T, P> const & scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator |	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator|(tvec4<T, P> const & v1, tvec4<T, P> const & v2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
operator |=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator|=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator |=	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> & tvec1<T, P>::operator|=(U const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P> &
operator |=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator|=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator |=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator|=(tvec2<U, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator |=	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> & tvec2<T, P>::operator|=(U scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P> &
operator |=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator|=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator |=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator|=(tvec3<U, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator |=	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> & tvec3<T, P>::operator|=(U scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P> &
operator |=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator|=(tvec1<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator |=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator|=(tvec4<U, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator |=	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> & tvec4<T, P>::operator|=(U scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P> &
operator ~	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P> operator~(tvec1<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec1<T,P>
operator ~	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> operator~(tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
operator ~	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> operator~(tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
operator ~	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> operator~(tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
option	nuklear/nuklear.h	/^    struct nk_style_toggle option;$/;"	m	struct:nk_style	typeref:struct:nk_style_toggle
order	glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	typeref:typename:order_type
order	glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order	glm/gtx/io.inl	/^	order::order(order_type a)$/;"	f	class:glm::io::order	typeref:typename:GLM_FUNC_QUALIFIER
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon84e4e886060a	typeref:typename:int[4]
order_type	glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
orientate2	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, defaultp> orientate2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,defaultp>
orientate3	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, defaultp> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,defaultp>
orientate3	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
orientate4	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> orientate4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
orientation	Camera.cpp	/^glm::mat4 Camera::orientation() const {$/;"	f	class:Camera	typeref:typename:glm::mat4
orientation	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> orientation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
orientedAngle	glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
originalHeight	Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture	typeref:typename:GLfloat
originalWidth	Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture	typeref:typename:GLfloat
ortho	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> ortho$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
orthonormalize	glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> orthonormalize(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
orthonormalize	glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> orthonormalize(tvec3<T, P> const & x, tvec3<T, P> const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
out	glm/detail/func_packing.inl	/^			double out;$/;"	m	union:glm::packDouble2x32::__anone26ffacf090c	typeref:typename:double	file:
out	glm/detail/func_packing.inl	/^			i16  out[2];$/;"	m	union:glm::unpackHalf2x16::__anone26ffacf0c0c	typeref:typename:i16[2]	file:
out	glm/detail/func_packing.inl	/^			i16  out[2];$/;"	m	union:glm::unpackSnorm2x16::__anone26ffacf040c	typeref:typename:i16[2]	file:
out	glm/detail/func_packing.inl	/^			i8   out[4];$/;"	m	union:glm::unpackSnorm4x8::__anone26ffacf080c	typeref:typename:i8[4]	file:
out	glm/detail/func_packing.inl	/^			u16  out[2];$/;"	m	union:glm::unpackUnorm2x16::__anone26ffacf020c	typeref:typename:u16[2]	file:
out	glm/detail/func_packing.inl	/^			u8   out[4];$/;"	m	union:glm::unpackUnorm4x8::__anone26ffacf060c	typeref:typename:u8[4]	file:
out	glm/detail/func_packing.inl	/^			uint   out[2];$/;"	m	union:glm::unpackDouble2x32::__anone26ffacf0a0c	typeref:typename:uint[2]	file:
out	glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packHalf2x16::__anone26ffacf0b0c	typeref:typename:uint	file:
out	glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm2x16::__anone26ffacf030c	typeref:typename:uint	file:
out	glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm4x8::__anone26ffacf070c	typeref:typename:uint	file:
out	glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm2x16::__anone26ffacf010c	typeref:typename:uint	file:
out	glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm4x8::__anone26ffacf050c	typeref:typename:uint	file:
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c0a	typeref:typename:stbi_uc ***
out	stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon84e4e886100a	typeref:typename:stbi_uc *
outerProduct	glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type outerPro/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<T,P,vecTypeA,vecTypeB>::type
outerProduct	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER detail::fmat4x4SIMD outerProduct$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fmat4x4SIMD
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec2, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec3, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec2>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec3>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/func_matrix.hpp	/^	struct outerProduct_trait<T, P, tvec4, tvec4>$/;"	s	namespace:glm::detail
outerProduct_trait	glm/detail/type_mat.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
overflow	glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float overflow()$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
overlay	nuklear/nuklear.h	/^    struct nk_command_buffer overlay;$/;"	m	struct:nk_context	typeref:struct:nk_command_buffer
oversample_h	nuklear/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config	typeref:typename:unsigned char
oversample_v	nuklear/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config	typeref:typename:unsigned char
p	glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe040a	typeref:typename:T
p	glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon0c12e1fe070c	typeref:typename:T
p	glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f040a	typeref:typename:T
p	glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon0c24fa7f070c	typeref:typename:T
P	glm/gtx/simd_vec4.hpp	/^		P = 2,$/;"	e	enum:glm::comp
pack	glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::i10i10i10i2	typeref:typename:uint32	file:
pack	glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u10u10u10u2	typeref:typename:uint32	file:
packDouble2x32	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER double packDouble2x32(uvec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
packed10bitToFloat	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed10bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed10ToFloat	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed10ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed11bitToFloat	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed11bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed11ToFloat	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed11ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed_chars	nuklear/nuklear.h	/^    struct nk_tt_packedchar *packed_chars;$/;"	m	struct:nk_font_baker	typeref:struct:nk_tt_packedchar *
packF2x11_1x10	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF2x11_1x10(vec3 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packHalf1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packHalf1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packHalf2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packHalf2x16(vec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packHalf4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packHalf4x16(glm::vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packI3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packI3x10_1x2(ivec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packSnorm1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm1x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packSnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packSnorm2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm2x16(vec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packSnorm2x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm2x8(vec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packSnorm3x10_1x2(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packSnorm4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packSnorm4x16(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packSnorm4x8	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm4x8(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packU3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packU3x10_1x2(uvec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x16(float s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm2x16(vec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUnorm2x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm2x8(vec2 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUnorm3x10_1x2(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUnorm4x16(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUnorm4x8	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm4x8(vec4 const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pack_info	nuklear/nuklear.h	/^    void *pack_info;$/;"	m	struct:nk_tt_pack_context	typeref:typename:void *
padding	nuklear/nuklear.h	/^    int   padding;$/;"	m	struct:nk_tt_pack_context	typeref:typename:int
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_chart	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_edit	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_progress	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_property	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_slider	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_tab	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_text	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_text	typeref:struct:nk_vec2
padding	nuklear/nuklear.h	/^    unsigned char padding[3];$/;"	m	struct:nk_font_config	typeref:typename:unsigned char[3]
padding	nuklear/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex	typeref:typename:unsigned char
padding1	nuklear/nuklear.h	/^    unsigned char padding1;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
pages	nuklear/nuklear.h	/^    struct nk_page *pages;$/;"	m	struct:nk_pool	typeref:struct:nk_page *
page_count	nuklear/nuklear.h	/^    unsigned int page_count;$/;"	m	struct:nk_pool	typeref:typename:unsigned int
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon84e4e886100a	typeref:typename:stbi_uc[256][4]
ParamInit	main.cpp	/^void ParamInit()$/;"	f	typeref:typename:void
param_type	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> const & param_type;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> const &
parent	nuklear/nuklear.h	/^    nk_size parent;$/;"	m	struct:nk_popup_buffer	typeref:typename:nk_size
parent	nuklear/nuklear.h	/^    struct nk_panel *parent;$/;"	m	struct:nk_panel	typeref:struct:nk_panel *
parent	nuklear/nuklear.h	/^    struct nk_window *parent;$/;"	m	struct:nk_window	typeref:struct:nk_window *
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
parts	glm/gtc/ulp.inl	/^	} parts;$/;"	m	union:__anon2dbcfbc3020c	typeref:struct:__anon2dbcfbc3020c::__anon2dbcfbc3030a	file:
part_type	glm/gtx/dual_quaternion.hpp	/^		typedef glm::tquat<T, P> part_type;$/;"	t	struct:glm::tdualquat	typeref:typename:glm::tquat<T,P>
paste	nuklear/nuklear.h	/^    nk_paste_f paste;$/;"	m	struct:nk_clipboard	typeref:typename:nk_paste_f
path_count	nuklear/nuklear.h	/^    unsigned int path_count;$/;"	m	struct:nk_draw_list	typeref:typename:unsigned int
path_offset	nuklear/nuklear.h	/^    unsigned int path_offset;$/;"	m	struct:nk_draw_list	typeref:typename:unsigned int
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec2<T, P> const & Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec2<T, P> const & Position, tvec2<T, P> const & rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec3<T, P> const & Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec3<T, P> const & Position, tvec3<T, P> const & rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec4<T, P> const & Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(tvec4<T, P> const & Position, tvec4<T, P> const & rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
permanent	nuklear/nuklear.h	/^    struct nk_allocator permanent;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_allocator
permute	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
permute	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> permute(tvec2<T, P> const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
permute	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> permute(tvec3<T, P> const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
permute	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> permute(tvec4<T, P> const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
perp	glm/gtx/perpendicular.inl	/^	GLM_FUNC_QUALIFIER vecType perp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType
perspective	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspective$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
perspectiveFov	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspectiveFov$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
perspectiveFovLH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspectiveFovLH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
perspectiveFovRH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspectiveFovRH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
perspectiveLH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspectiveLH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
perspectiveRH	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> perspectiveRH$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
pi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED pi = _mm_set_ps1(3.1415926535897932384626433832795f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
pickMatrix	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> pickMatrix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
pitch	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T pitch(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
pixel	nuklear/nuklear.h	/^    void *pixel;$/;"	m	struct:nk_font_atlas	typeref:typename:void *
pixelBuffer	Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap	typeref:typename:unsigned char *
pixels	nuklear/nuklear.h	/^    unsigned char *pixels;$/;"	m	struct:nk_tt_pack_context	typeref:typename:unsigned char *
pixels	nuklear/nuklear.h	/^   unsigned char *pixels;$/;"	m	struct:nk_tt__bitmap	typeref:typename:unsigned char *
pixel_snap	nuklear/nuklear.h	/^    unsigned char pixel_snap;$/;"	m	struct:nk_font_config	typeref:typename:unsigned char
pi_over_hundred_eighty	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED pi_over_hundred_eighty = _mm_set_ps1(0.01745329251994329576923/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
PMLInit	main.cpp	/^void PMLInit()$/;"	f	typeref:typename:void
PNG_TYPE	stb_image.h	/^#define PNG_TYPE(/;"	d
pointer	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * pointer;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> *
pointer_const	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> * const pointer_const;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> * const
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon	typeref:struct:nk_vec2i[1]
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_vec2i[1]
points	nuklear/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polyline	typeref:struct:nk_vec2i[1]
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon	typeref:typename:unsigned short
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon_filled	typeref:typename:unsigned short
point_count	nuklear/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polyline	typeref:typename:unsigned short
polar	glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> polar$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
pool	nuklear/nuklear.h	/^    struct nk_allocator pool;$/;"	m	struct:nk_buffer	typeref:struct:nk_allocator
pool	nuklear/nuklear.h	/^    void *pool;$/;"	m	struct:nk_context	typeref:typename:void *
popup	nuklear/nuklear.h	/^    struct nk_popup_state popup;$/;"	m	struct:nk_window	typeref:struct:nk_popup_state
popup_buffer	nuklear/nuklear.h	/^    struct nk_popup_buffer popup_buffer;$/;"	m	struct:nk_panel	typeref:struct:nk_popup_buffer
pos	nuklear/nuklear.h	/^    struct nk_vec2 pos;$/;"	m	struct:nk_mouse	typeref:struct:nk_vec2
position	Camera.cpp	/^const glm::vec3& Camera::position() const {$/;"	f	class:Camera	typeref:typename:const glm::vec3 &
position	glm/detail/dummy.cpp	/^	glm::vec4 position; \/\/ Ppli$/;"	m	struct:light	typeref:typename:glm::vec4	file:
position	glm/detail/dummy.cpp	/^	glm::vec4 position;$/;"	m	struct:intersection	typeref:typename:glm::vec4	file:
position	nuklear/nuklear.h	/^    struct nk_vec2 position;$/;"	m	struct:nk_draw_vertex	typeref:struct:nk_vec2
PositionDataF16	glm/detail/dummy.cpp	/^glm::uint const PositionDataF16[VertexCount] =$/;"	v	typeref:typename:glm::uint const[]
PositionDataF32	glm/detail/dummy.cpp	/^glm::vec2 const PositionDataF32[VertexCount] =$/;"	v	typeref:typename:glm::vec2 const[]
PositionDataI32	glm/detail/dummy.cpp	/^glm::i32vec2 const PositionDataI32[VertexCount] =$/;"	v	typeref:typename:glm::i32vec2 const[]
PositionDataI8	glm/detail/dummy.cpp	/^glm::i8vec2 const PositionDataI8[VertexCount] =$/;"	v	typeref:typename:glm::i8vec2 const[]
PositionSizeF16	glm/detail/dummy.cpp	/^std::size_t const PositionSizeF16 = VertexCount * sizeof(glm::uint);$/;"	v	typeref:typename:std::size_t const
PositionSizeF32	glm/detail/dummy.cpp	/^std::size_t const PositionSizeF32 = VertexCount * sizeof(glm::vec2);$/;"	v	typeref:typename:std::size_t const
PositionSizeI32	glm/detail/dummy.cpp	/^std::size_t const PositionSizeI32 = VertexCount * sizeof(glm::i32vec2);$/;"	v	typeref:typename:std::size_t const
PositionSizeI8	glm/detail/dummy.cpp	/^std::size_t const PositionSizeI8 = VertexCount * sizeof(glm::i8vec2);$/;"	v	typeref:typename:std::size_t const
pow	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> pow(vecType<T, P> const & base, vecType<T, P> const & exponent/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
pow	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int pow(int x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
pow	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint pow(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pow	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> pow(tquat<T, P> const & x, T const & y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
pow2	glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow2(genType const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow3	glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow3(genType const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow4	glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow4(genType const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoAbove(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> powerOfTwoAbove(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
powerOfTwoBelow	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoBelow(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoBelow	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> powerOfTwoBelow(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
powerOfTwoNearest	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoNearest(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoNearest	glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> powerOfTwoNearest(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
power_x	main.cpp	/^int power_x, power_y;$/;"	v	typeref:typename:int
power_y	main.cpp	/^int power_x, power_y;$/;"	v	typeref:typename:int
prec	glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x2	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x3	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat2x4	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x2	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x3	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat3x4	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x2	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x3	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tmat4x4	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_vec1.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec1	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_vec2.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec2	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_vec3.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec3	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/detail/type_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tvec4	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/gtc/quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tquat	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/gtx/dual_quaternion.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = P;$/;"	m	struct:glm::tdualquat	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/gtx/simd_mat4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = defaultp;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/gtx/simd_quat.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = defaultp;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR precision
prec	glm/gtx/simd_vec4.hpp	/^			static GLM_RELAXED_CONSTEXPR precision prec = defaultp;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR precision
precision	glm/detail/precision.hpp	/^	enum precision$/;"	g	namespace:glm
precision	glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
precision	glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision	glm/gtx/io.inl	/^	\/* explicit *\/ GLM_FUNC_QUALIFIER precision::precision(unsigned a)$/;"	f	class:glm::io::precision	typeref:typename:GLM_FUNC_QUALIFIER
precision_	glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
preferred_x	nuklear/nuklear.h	/^    float preferred_x;$/;"	m	struct:nk_text_edit	typeref:typename:float
prefix	glm/gtx/string_cast.inl	/^	struct prefix<bool>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<double>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<float>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<int16_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<int32_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<int64_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<int8_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<uint16_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<uint32_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<uint64_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix<uint8_t>$/;"	s	namespace:glm::detail	file:
prefix	glm/gtx/string_cast.inl	/^	struct prefix{};$/;"	s	namespace:glm::detail	file:
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon84e4e8860f0a	typeref:typename:stbi__int16
pressed	nuklear/nuklear.h	/^    struct nk_style_item pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
pressed_active	nuklear/nuklear.h	/^    struct nk_style_item pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_item
prev	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state	typeref:typename:int
prev	nuklear/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state	typeref:typename:int
prev	nuklear/nuklear.h	/^    struct nk_page_element *prev;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element *
prev	nuklear/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table **
prev	nuklear/nuklear.h	/^    struct nk_vec2 prev;$/;"	m	struct:nk_mouse	typeref:struct:nk_vec2
prev	nuklear/nuklear.h	/^    struct nk_window *prev;$/;"	m	struct:nk_window	typeref:struct:nk_window *
prev_first	nuklear/nuklear.h	/^   int prev_first;  \/*_ first char of previous row *\/$/;"	m	struct:nk_text_find	typeref:typename:int
prev_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double prev_float(double const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prev_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float prev_float(float const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prev_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T prev_float(T const & x, uint const & ulps)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prev_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> prev_float(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
prev_float	glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> prev_float(vecType<T, P> const & x, vecType<uint, P> const & u/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
prev_link	nuklear/nuklear.h	/^    struct nk_rp_node **prev_link;$/;"	m	struct:nk_rp__findresult	typeref:struct:nk_rp_node **
PrintInfo	main.cpp	/^void PrintInfo()$/;"	f	typeref:typename:void
profile	glm/detail/type_gentype.hpp	/^	enum profile$/;"	g	namespace:glm
prog	nuklear/nuklear_glfw_gl3.h	/^    GLuint prog;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
Program	Program.cpp	/^Program::Program(const std::vector<Shader>& shaders) :$/;"	f	class:Program
Program	Program.h	/^    class Program {$/;"	c	namespace:tdogl
progress	nuklear/nuklear.h	/^    struct nk_style_progress progress;$/;"	m	struct:nk_style	typeref:struct:nk_style_progress
proj	glm/gtx/projection.inl	/^	GLM_FUNC_QUALIFIER vecType proj(vecType const & x, vecType const & Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType
proj2D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> proj2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
proj3D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> proj3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
project	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> project$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
projection	Camera.cpp	/^glm::mat4 Camera::projection() const {$/;"	f	class:Camera	typeref:typename:glm::mat4
property	nuklear/nuklear.h	/^    struct nk_property_state property;$/;"	m	struct:nk_window	typeref:struct:nk_property_state
property	nuklear/nuklear.h	/^    struct nk_style_property property;$/;"	m	struct:nk_style	typeref:struct:nk_style_property
ptr	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory	typeref:typename:void *
ptr	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon9874a1ee020c	typeref:typename:void *
pure_col_type	glm/gtx/simd_mat4.hpp	/^		typedef tvec4<float, defaultp> pure_col_type;$/;"	t	namespace:glm::detail	typeref:typename:tvec4<float,defaultp>
pure_row_type	glm/gtx/simd_mat4.hpp	/^		typedef tvec4<float, defaultp> pure_row_type;$/;"	t	namespace:glm::detail	typeref:typename:tvec4<float,defaultp>
pure_transpose_type	glm/gtx/simd_mat4.hpp	/^		typedef tmat4x4<float, defaultp> pure_transpose_type;$/;"	t	namespace:glm::detail	typeref:typename:tmat4x4<float,defaultp>
pure_type	glm/gtx/simd_mat4.hpp	/^		typedef tmat4x4<float, defaultp> pure_type;$/;"	t	namespace:glm::detail	typeref:typename:tmat4x4<float,defaultp>
pure_type	glm/gtx/simd_quat.hpp	/^		typedef tquat<float, defaultp> pure_type;$/;"	t	namespace:glm::detail	typeref:typename:tquat<float,defaultp>
pure_type	glm/gtx/simd_vec4.hpp	/^		typedef tvec4<float, defaultp> pure_type;$/;"	t	namespace:glm::detail	typeref:typename:tvec4<float,defaultp>
q	glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f040a	typeref:typename:T
q	glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon0c24fa7f080c	typeref:typename:T
Q	glm/gtx/simd_vec4.hpp	/^		Q = 3$/;"	e	enum:glm::comp
quadraticAttenuation	glm/detail/dummy.cpp	/^	float quadraticAttenuation;\/\/ K2$/;"	m	struct:light	typeref:typename:float	file:
quarter_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType quarter_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
quat	glm/fwd.hpp	/^	typedef highp_quat			quat;$/;"	t	namespace:glm	typeref:typename:highp_quat
quat	glm/fwd.hpp	/^	typedef lowp_quat			quat;$/;"	t	namespace:glm	typeref:typename:lowp_quat
quat	glm/fwd.hpp	/^	typedef mediump_quat		quat;$/;"	t	namespace:glm	typeref:typename:mediump_quat
quatSIMD_cast	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD quatSIMD_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
quatSIMD_cast_impl	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD quatSIMD_cast_impl(const T m0[], const T m1[], const T m2[]/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
quat_cast	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> quat_cast(tmat3x3<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
quat_cast	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> quat_cast(tmat4x4<T, P> const & m4)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
quat_cast	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER quat quat_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER quat
query	nuklear/nuklear.h	/^    nk_query_font_glyph_f query;$/;"	m	struct:nk_user_font	typeref:typename:nk_query_font_glyph_f
qword	glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm	typeref:typename:detail::uint64
r	glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::tvec1::__anon0beeb0fc010c	typeref:typename:T
r	glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon0beeb0fc020c	typeref:typename:T
r	glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d030a	typeref:typename:T
r	glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon0c00c97d050c	typeref:typename:T
r	glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe030a	typeref:typename:T
r	glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon0c12e1fe050c	typeref:typename:T
r	glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f030a	typeref:typename:T
r	glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon0c24fa7f050c	typeref:typename:T
R	glm/gtx/simd_vec4.hpp	/^		R = 0,$/;"	e	enum:glm::comp
r	nuklear/nuklear.h	/^    struct nk_colorf {float r,g,b;} out = {0,0,0};$/;"	m	struct:nk_hsva_f::nk_colorf	typeref:typename:float
r	nuklear/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc	typeref:typename:unsigned short
r	nuklear/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc_filled	typeref:typename:unsigned short
r	nuklear/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color	typeref:typename:nk_byte
r0	main.cpp	/^float r0 = -6;$/;"	v	typeref:typename:float
radialGradient	glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T radialGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
radians	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType radians(genType degrees)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
radians	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vecType<T, P> radians(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vecType<T,P>
range	nuklear/nuklear.h	/^    const nk_rune *range;$/;"	m	struct:nk_font_config	typeref:typename:const nk_rune *
range	nuklear/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot	typeref:typename:float
ranges	nuklear/nuklear.h	/^    const nk_rune *ranges;$/;"	m	struct:nk_baked_font	typeref:typename:const nk_rune *
ranges	nuklear/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_baker	typeref:struct:nk_tt_pack_range *
ranges	nuklear/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_tt_pack_range *
range_count	nuklear/nuklear.h	/^    nk_rune range_count;$/;"	m	struct:nk_font_bake_data	typeref:typename:nk_rune
ratio	nuklear/nuklear.h	/^    const float *ratio;$/;"	m	struct:nk_row_layout	typeref:typename:const float *
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
raw_data	stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:void *
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  re/;"	m	struct:__anon84e4e886020a	typeref:typename:int (*)(void * user,char * data,int size)
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon84e4e886030a	typeref:typename:int
real	glm/gtx/dual_quaternion.hpp	/^		glm::tquat<T, P> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:glm::tquat<T,P>
rectD	main.cpp	/^float rectD;$/;"	v	typeref:typename:float
rects	nuklear/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_baker	typeref:struct:nk_rp_rect *
rects	nuklear/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_rp_rect *
RectsOverlap	Bitmap.cpp	/^inline bool RectsOverlap(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, u/;"	f	typeref:typename:bool
redo_char_point	nuklear/nuklear.h	/^   short redo_char_point;$/;"	m	struct:nk_text_undo_state	typeref:typename:short
redo_point	nuklear/nuklear.h	/^   short redo_point;$/;"	m	struct:nk_text_undo_state	typeref:typename:short
reference	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> & reference;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE> &
reflect	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType reflect(genType const & I, genType const & N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
reflect	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD reflect$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
reflect2D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> reflect2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
reflect3D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> reflect3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
refract	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType refract(genType const & I, genType const & N, genType const & eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
refract	glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> refract(vecType<T, P> const & I, vecType<T, P> const & N, T et/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
refract	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD refract$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
region	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image	typeref:typename:unsigned short[4]
Render	main.cpp	/^void Render()$/;"	f	typeref:typename:void
repeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER genType repeat(genType const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
repeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> repeat(tvec2<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
repeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> repeat(tvec3<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
repeat	glm/gtx/wrap.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> repeat(tvec4<T, P> const & Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon84e4e886080a	typeref:typename:resample_row_func
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	typeref:typename:stbi_uc *
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in0,stbi_uc * in1,int w,int hs)
resolution	main.cpp	/^float resolution = 20.0;\/* float resolution = 40.0; *\/$/;"	v	typeref:typename:float
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
return_type_scalar_multiplication	glm/gtx/scalar_multiplication.hpp	/^	using return_type_scalar_multiplication = typename std::enable_if<$/;"	t	namespace:glm	typeref:typename:std::enable_if<!std::is_same<T,float>::value && std::is_arithmetic<T>::value,Vec>::type
RGB2Grayscale	Bitmap.cpp	/^static void RGB2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
RGB2GrayscaleAlpha	Bitmap.cpp	/^static void RGB2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
RGB2RGBA	Bitmap.cpp	/^static void RGB2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
rgb2YCoCg	glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rgb2YCoCg$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rgb2YCoCgR	glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER tvec3<T, P> rgb2YCoCgR$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>	file:
rgb2YCoCgR	glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rgb2YCoCgR$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
RGBA2Grayscale	Bitmap.cpp	/^static void RGBA2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
RGBA2GrayscaleAlpha	Bitmap.cpp	/^static void RGBA2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
RGBA2RGB	Bitmap.cpp	/^static void RGBA2RGB(unsigned char* src, unsigned char* dest){$/;"	f	typeref:typename:void	file:
rgbColor	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rgbColor(const tvec3<T, P>& hsvColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
right	Camera.cpp	/^glm::vec3 Camera::right() const {$/;"	f	class:Camera	typeref:typename:glm::vec3
right	nuklear/nuklear.h	/^    struct nk_color right;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_color
rightHanded	glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool rightHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
roll	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T roll(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
root_five	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_five()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_half_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_ln_four	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_ln_four()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_three	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_three()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
rotate	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
rotate	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> rotate(tquat<T, P> const & q, T const & angle, tvec3<T, P> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
rotate	glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> rotate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
rotate	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rotate	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
rotate	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
rotate	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rotate	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
rotate	glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> rotate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
rotate90CounterClockwise	Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap	typeref:typename:void
rotateNormalizedAxis	glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
rotateNormalizedAxis	glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
rotateX	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rotateX	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
rotateY	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rotateY	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
rotateZ	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
rotateZ	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
rotate_slow	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> rotate_slow$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
rotation	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> rotation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
round	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD round$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_button	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_chart	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_combo	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_edit	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_progress	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_property	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_scrollbar	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_selectable	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_slider	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_tab	typeref:typename:float
rounding	nuklear/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_window	typeref:typename:float
rounding	nuklear/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect	typeref:typename:unsigned short
rounding	nuklear/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect_filled	typeref:typename:unsigned short
rounding_cursor	nuklear/nuklear.h	/^    float rounding_cursor;$/;"	m	struct:nk_style_scrollbar	typeref:typename:float
roundMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType roundMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundMultiple	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> roundMultiple(vecType<T, P> const & Source, vecType<T, P> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
roundPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genIUType roundPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
roundPowerOfTwo	glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> roundPowerOfTwo(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
row	glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
row	glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::row_type row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::row_type
row	nuklear/nuklear.h	/^    struct nk_row_layout row;$/;"	m	struct:nk_panel	typeref:struct:nk_row_layout
rowMajor2	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> rowMajor2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
rowMajor2	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P> rowMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat2x2<T,P>
rowMajor3	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> rowMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
rowMajor4	glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> rowMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
rows	glm/detail/type_mat2x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat2x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat2x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat2x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat2x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat2x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat3x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat3x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat3x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat3x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat3x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat3x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat4x2.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 2;$/;"	m	struct:glm::tmat4x2	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat4x3.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 3;$/;"	m	struct:glm::tmat4x3	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/detail/type_mat4x4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	m	struct:glm::tmat4x4	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
rows	glm/gtx/simd_mat4.hpp	/^			static GLM_RELAXED_CONSTEXPR length_t rows = 4;$/;"	v	namespace:glm::detail	typeref:typename:GLM_RELAXED_CONSTEXPR length_t
row_major	glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_padding	nuklear/nuklear.h	/^    float row_padding;$/;"	m	struct:nk_style_edit	typeref:typename:float
row_size	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::size_type base<vT, cT, rT, pT>::row_size()$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::size_type
row_type	glm/detail/type_mat2x2.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:tvec2<T,P>
row_type	glm/detail/type_mat2x3.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:tvec2<T,P>
row_type	glm/detail/type_mat2x3.inl	/^		return typename tmat2x3<T, P>::row_type($/;"	m	class:glm::operator *::tmat2x3<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat2x4.hpp	/^		typedef tvec2<T, P> row_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:tvec2<T,P>
row_type	glm/detail/type_mat2x4.inl	/^		return typename tmat2x4<T, P>::row_type($/;"	m	class:glm::operator *::tmat2x4<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat3x2.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:tvec3<T,P>
row_type	glm/detail/type_mat3x2.inl	/^		return typename tmat3x2<T, P>::row_type($/;"	m	class:glm::operator *::tmat3x2<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat3x3.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:tvec3<T,P>
row_type	glm/detail/type_mat3x3.inl	/^		return typename tmat3x3<T, P>::row_type($/;"	m	class:glm::operator *::tmat3x3<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat3x4.hpp	/^		typedef tvec3<T, P> row_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:tvec3<T,P>
row_type	glm/detail/type_mat3x4.inl	/^		return typename tmat3x4<T, P>::row_type($/;"	m	class:glm::operator *::tmat3x4<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat4x2.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:tvec4<T,P>
row_type	glm/detail/type_mat4x2.inl	/^		return typename tmat4x2<T, P>::row_type($/;"	m	class:glm::operator *::tmat4x2<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat4x3.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:tvec4<T,P>
row_type	glm/detail/type_mat4x3.inl	/^		return typename tmat4x3<T, P>::row_type($/;"	m	class:glm::operator *::tmat4x3<T, P>	typeref:typename:typename	file:
row_type	glm/detail/type_mat4x4.hpp	/^		typedef tvec4<T, P> row_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:tvec4<T,P>
row_type	glm/detail/type_mat4x4.inl	/^		return typename tmat4x4<T, P>::row_type($/;"	m	class:glm::operator *::tmat4x4<T, P>	typeref:typename:typename	file:
row_type	glm/gtx/simd_mat4.hpp	/^		typedef fvec4SIMD row_type;$/;"	t	namespace:glm::detail	typeref:typename:fvec4SIMD
RunCPUKernel	main.cpp	/^void RunCPUKernel()$/;"	f	typeref:typename:void
s	glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::tvec1::__anon0beeb0fc010c	typeref:typename:T
s	glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon0beeb0fc020c	typeref:typename:T
s	glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d040a	typeref:typename:T
s	glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon0c00c97d050c	typeref:typename:T
s	glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe040a	typeref:typename:T
s	glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon0c12e1fe050c	typeref:typename:T
s	glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f040a	typeref:typename:T
s	glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon0c24fa7f050c	typeref:typename:T
S	glm/gtx/simd_vec4.hpp	/^		S = 0,$/;"	e	enum:glm::comp
s	nuklear/nuklear.h	/^    union {struct nk_scroll *s; nk_uint *i;} value;$/;"	m	union:nk_group_begin::__anon9874a1ee100c	typeref:struct:nk_scroll *
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon84e4e886060a	typeref:typename:stbi__context *
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon84e4e8860c0a	typeref:typename:stbi__context *
s0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
s1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
saturate	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
saturate	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec2<T, P> saturate(const tvec2<T, P>& x/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
saturate	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec3<T, P> saturate(const tvec3<T, P>& x/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
saturate	glm/gtx/compatibility.hpp	/^	template <typename T, precision P> GLM_FUNC_QUALIFIER tvec4<T, P> saturate(const tvec4<T, P>& x/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
saturation	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> saturation(T const s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
saturation	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> saturation(const T s, const tvec3<T, P>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
saturation	glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P> saturation(const T s, const tvec4<T, P>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
scale	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> scale$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
scale	glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> scale($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
scale	glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> scale($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
scale	nuklear/nuklear.h	/^    float scale;$/;"	m	struct:nk_font	typeref:typename:float
scaleBias	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> scaleBias($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
scaler	nuklear/nuklear.h	/^    struct nk_style_item scaler;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_item
scaler_size	nuklear/nuklear.h	/^    struct nk_vec2 scaler_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
scale_slow	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> scale_slow$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
SCAN_header	stb_image.h	/^   SCAN_header$/;"	e	enum:__anon84e4e8860404
SCAN_load	stb_image.h	/^   SCAN_load=0,$/;"	e	enum:__anon84e4e8860404
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
SCAN_type	stb_image.h	/^   SCAN_type,$/;"	e	enum:__anon84e4e8860404
SCREEN_SIZE	main.cpp	/^const glm::vec2 SCREEN_SIZE(1080, 1080);$/;"	v	typeref:typename:const glm::vec2
scroll	nuklear/nuklear_glfw_gl3.h	/^    float scroll;$/;"	m	struct:nk_glfw	typeref:typename:float
scrollbar	nuklear/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_edit_state	typeref:struct:nk_scroll
scrollbar	nuklear/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_window	typeref:struct:nk_scroll
scrollbar	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollbar;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_scrollbar
scrollbar	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar;$/;"	m	struct:nk_text_edit	typeref:struct:nk_vec2
scrollbar_size	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_edit	typeref:struct:nk_vec2
scrollbar_size	nuklear/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
scrolled	nuklear/nuklear.h	/^    unsigned int scrolled;$/;"	m	struct:nk_window	typeref:typename:unsigned int
scrollh	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollh;$/;"	m	struct:nk_style	typeref:struct:nk_style_scrollbar
scrollv	nuklear/nuklear.h	/^    struct nk_style_scrollbar scrollv;$/;"	m	struct:nk_style	typeref:struct:nk_style_scrollbar
scroll_delta	nuklear/nuklear.h	/^    float scroll_delta;$/;"	m	struct:nk_mouse	typeref:typename:float
sec	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sec(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sec	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> sec(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
sech	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sech(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sech	glm/gtc/reciprocal.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> sech(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
selectable	nuklear/nuklear.h	/^    struct nk_style_selectable selectable;$/;"	m	struct:nk_style	typeref:struct:nk_style_selectable
selected_color	nuklear/nuklear.h	/^    struct nk_color selected_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_color
selected_hover	nuklear/nuklear.h	/^    struct nk_color selected_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
selected_normal	nuklear/nuklear.h	/^    struct nk_color selected_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
selected_text_hover	nuklear/nuklear.h	/^    struct nk_color selected_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
selected_text_normal	nuklear/nuklear.h	/^    struct nk_color selected_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
select_end	nuklear/nuklear.h	/^    int select_end;$/;"	m	struct:nk_text_edit	typeref:typename:int
select_start	nuklear/nuklear.h	/^    int select_start;$/;"	m	struct:nk_text_edit	typeref:typename:int
sel_end	nuklear/nuklear.h	/^    int sel_end;$/;"	m	struct:nk_edit_state	typeref:typename:int
sel_start	nuklear/nuklear.h	/^    int sel_start;$/;"	m	struct:nk_edit_state	typeref:typename:int
separator	glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_context	typeref:typename:unsigned int
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_edit_state	typeref:typename:unsigned int
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_property_state	typeref:typename:unsigned int
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_table	typeref:typename:unsigned int
seq	nuklear/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_window	typeref:typename:unsigned int
setFieldOfView	Camera.cpp	/^void Camera::setFieldOfView(float fieldOfView) {$/;"	f	class:Camera	typeref:typename:void
setNearAndFarPlanes	Camera.cpp	/^void Camera::setNearAndFarPlanes(float nearPlane, float farPlane) {$/;"	f	class:Camera	typeref:typename:void
setPixel	Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap	typeref:typename:void
setPosition	Camera.cpp	/^void Camera::setPosition(const glm::vec3& position) {$/;"	f	class:Camera	typeref:typename:void
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat2& m, GLboolean transpose) {$/;"	f	class:Program	typeref:typename:void
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat3& m, GLboolean transpose) {$/;"	f	class:Program	typeref:typename:void
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* name, const glm::mat4& m, GLboolean transpose) {$/;"	f	class:Program	typeref:typename:void
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* uniformName, const glm::vec3& v) {$/;"	f	class:Program	typeref:typename:void
setUniform	Program.cpp	/^void Program::setUniform(const GLchar* uniformName, const glm::vec4& v) {$/;"	f	class:Program	typeref:typename:void
setUniformMatrix2	Program.cpp	/^void Program::setUniformMatrix2(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean t/;"	f	class:Program	typeref:typename:void
setUniformMatrix3	Program.cpp	/^void Program::setUniformMatrix3(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean t/;"	f	class:Program	typeref:typename:void
setUniformMatrix4	Program.cpp	/^void Program::setUniformMatrix4(const GLchar* name, const GLfloat* v, GLsizei count, GLboolean t/;"	f	class:Program	typeref:typename:void
setViewportAspectRatio	Camera.cpp	/^void Camera::setViewportAspectRatio(float viewportAspectRatio) {$/;"	f	class:Camera	typeref:typename:void
Shader	Shader.cpp	/^Shader::Shader(const Shader& other) :$/;"	f	class:Shader
Shader	Shader.cpp	/^Shader::Shader(const std::string& shaderCode, GLenum shaderType) :$/;"	f	class:Shader
Shader	Shader.h	/^    class Shader { $/;"	c	namespace:tdogl
shaderFromFile	Shader.cpp	/^Shader Shader::shaderFromFile(const std::string& filePath, GLenum shaderType) {$/;"	f	class:Shader	typeref:typename:Shader
shape_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing shape_AA; \/* shape anti-aliasing flag can be turned off if you are ti/;"	m	struct:nk_convert_config	typeref:enum:nk_anti_aliasing
shape_AA	nuklear/nuklear.h	/^    enum nk_anti_aliasing shape_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_anti_aliasing
shearX	glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> shearX($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
shearX2D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> shearX2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
shearX3D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> shearX3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
shearY	glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> shearY($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
shearY2D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> shearY2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
shearY3D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> shearY3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
shearZ3D	glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> shearZ3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
shininess	glm/detail/dummy.cpp	/^	float shininess; \/\/ Srm$/;"	m	struct:material	typeref:typename:float	file:
shortMix	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> shortMix$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
show_buttons	nuklear/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_scrollbar	typeref:typename:int
show_buttons	nuklear/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_slider	typeref:typename:int
shuffle_mask	glm/gtx/simd_vec4.inl	/^struct shuffle_mask$/;"	s	namespace:glm::detail	file:
sigma0	main.cpp	/^float sigma0 = 0;$/;"	v	typeref:typename:float
sigma_M	main.cpp	/^float **Ez, **Hx, **Hy, **sigma_M, **epsilon_M, **mu_M;$/;"	v	typeref:typename:float ********
sign	glm/detail/intrinsic_common.inl	/^			const unsigned int mantissa:23, exp:8, sign:1;$/;"	m	struct:glm::detail::ieee754_QNAN::i	typeref:typename:const unsigned int:1	file:
sign	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD sign$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
sign16	glm/gtc/bitfield.inl	/^		union sign16$/;"	u	function:glm::bitfieldInterleave	file:
sign32	glm/gtc/bitfield.inl	/^		union sign32$/;"	u	function:glm::bitfieldInterleave	file:
sign64	glm/gtc/bitfield.inl	/^		union sign64$/;"	u	function:glm::bitfieldInterleave	file:
sign8	glm/gtc/bitfield.inl	/^		union sign8$/;"	u	function:glm::bitfieldInterleave	file:
simd	glm/detail/precision.hpp	/^		simd,$/;"	e	enum:glm::precision
simd	glm/detail/type_gentype.hpp	/^		simd$/;"	e	enum:glm::profile
simdMat4	glm/gtx/simd_mat4.hpp	/^	typedef detail::fmat4x4SIMD simdMat4;$/;"	t	namespace:glm	typeref:typename:detail::fmat4x4SIMD
simdQuat	glm/gtx/simd_quat.hpp	/^	typedef glm::detail::fquatSIMD simdQuat;$/;"	t	namespace:glm	typeref:typename:glm::detail::fquatSIMD
simdVec4	glm/gtx/simd_vec4.hpp	/^	typedef glm::detail::fvec4SIMD simdVec4;$/;"	t	namespace:glm	typeref:typename:glm::detail::fvec4SIMD
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<double, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<float, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<int, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<int64, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<uint64, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^		struct simd_data<unsigned int, simd>$/;"	s	namespace:glm::detail
simd_data	glm/detail/type_vec4.hpp	/^	struct simd_data$/;"	s	namespace:glm::detail
simplex	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(glm::tvec2<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(tvec3<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(tvec4<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
sin	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> sin(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
single_line	nuklear/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_edit_state	typeref:typename:unsigned char
single_line	nuklear/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_text_edit	typeref:typename:unsigned char
sinh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> sinh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
sint	glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm	typeref:typename:signed int
size	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x2<T, P>::size_type tmat2x2<T, P>::size() const$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x2<T,P>::size_type
size	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x3<T, P>::size_type tmat2x3<T, P>::size() const$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x3<T,P>::size_type
size	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x4<T, P>::size_type tmat2x4<T, P>::size() const$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat2x4<T,P>::size_type
size	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x2<T, P>::size_type tmat3x2<T, P>::size() const$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x2<T,P>::size_type
size	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x3<T, P>::size_type tmat3x3<T, P>::size() const$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x3<T,P>::size_type
size	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x4<T, P>::size_type tmat3x4<T, P>::size() const$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat3x4<T,P>::size_type
size	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x2<T, P>::size_type tmat4x2<T, P>::size() const$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x2<T,P>::size_type
size	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x3<T, P>::size_type tmat4x3<T, P>::size() const$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x3<T,P>::size_type
size	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x4<T, P>::size_type tmat4x4<T, P>::size() const$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tmat4x4<T,P>::size_type
size	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec1<T, P>::size_type tvec1<T, P>::size() const$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec1<T,P>::size_type
size	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec2<T, P>::size_type tvec2<T, P>::size() const$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec2<T,P>::size_type
size	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec3<T, P>::size_type tvec3<T, P>::size() const$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec3<T,P>::size_type
size	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec4<T, P>::size_type tvec4<T, P>::size() const$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tvec4<T,P>::size_type
size	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tquat<T, P>::size_type tquat<T, P>::size() const$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tquat<T,P>::size_type
size	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tdualquat<T, P>::size_type tdualquat<T, P>::size() c/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename tdualquat<T,P>::size_type
size	nuklear/nuklear.h	/^    float size;$/;"	m	struct:nk_font_config	typeref:typename:float
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_buffer	typeref:typename:nk_size
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_memory_status	typeref:typename:nk_size
size	nuklear/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_pool	typeref:typename:nk_size
size	nuklear/nuklear.h	/^    unsigned size;$/;"	m	struct:nk_page	typeref:typename:unsigned
size	nuklear/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_vec2
size	nuklear/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory	typeref:typename:nk_size
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon84e4e886050a	typeref:typename:stbi_uc[257]
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon84e4e886090a	typeref:typename:stbi_uc[288]
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860e0a	typeref:typename:stbi_uc
size1	glm/gtx/std_based_type.hpp	/^	typedef tvec1<std::size_t, defaultp>		size1;$/;"	t	namespace:glm	typeref:typename:tvec1<std::size_t,defaultp>
size1_t	glm/gtx/std_based_type.hpp	/^	typedef tvec1<std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm	typeref:typename:tvec1<std::size_t,defaultp>
size2	glm/gtx/std_based_type.hpp	/^	typedef tvec2<std::size_t, defaultp>		size2;$/;"	t	namespace:glm	typeref:typename:tvec2<std::size_t,defaultp>
size2_t	glm/gtx/std_based_type.hpp	/^	typedef tvec2<std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm	typeref:typename:tvec2<std::size_t,defaultp>
size3	glm/gtx/std_based_type.hpp	/^	typedef tvec3<std::size_t, defaultp>		size3;$/;"	t	namespace:glm	typeref:typename:tvec3<std::size_t,defaultp>
size3_t	glm/gtx/std_based_type.hpp	/^	typedef tvec3<std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm	typeref:typename:tvec3<std::size_t,defaultp>
size4	glm/gtx/std_based_type.hpp	/^	typedef tvec4<std::size_t, defaultp>		size4;$/;"	t	namespace:glm	typeref:typename:tvec4<std::size_t,defaultp>
size4_t	glm/gtx/std_based_type.hpp	/^	typedef tvec4<std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm	typeref:typename:tvec4<std::size_t,defaultp>
sizeType	glm/detail/type_gentype.hpp	/^	typedef std::size_t sizeType;$/;"	t	namespace:glm	typeref:typename:std::size_t
size_type	glm/detail/type_gentype.hpp	/^		typedef sizeType size_type;$/;"	t	struct:glm::detail::genType	typeref:typename:sizeType
size_type	glm/detail/type_mat2x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:size_t
size_type	glm/detail/type_mat2x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:size_t
size_type	glm/detail/type_mat2x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:size_t
size_type	glm/detail/type_mat3x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:size_t
size_type	glm/detail/type_mat3x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:size_t
size_type	glm/detail/type_mat3x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:size_t
size_type	glm/detail/type_mat4x2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:size_t
size_type	glm/detail/type_mat4x3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:size_t
size_type	glm/detail/type_mat4x4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:size_t
size_type	glm/detail/type_vec1.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec1	typeref:typename:size_t
size_type	glm/detail/type_vec2.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec2	typeref:typename:size_t
size_type	glm/detail/type_vec3.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec3	typeref:typename:size_t
size_type	glm/detail/type_vec4.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tvec4	typeref:typename:size_t
size_type	glm/gtc/quaternion.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tquat	typeref:typename:size_t
size_type	glm/gtx/dual_quaternion.hpp	/^			typedef size_t size_type;$/;"	t	struct:glm::tdualquat	typeref:typename:size_t
size_type	glm/gtx/simd_mat4.hpp	/^		typedef std::size_t size_type;$/;"	t	namespace:glm::detail	typeref:typename:std::size_t
size_type	glm/gtx/simd_quat.hpp	/^		typedef std::size_t size_type;$/;"	t	namespace:glm::detail	typeref:typename:std::size_t
size_type	glm/gtx/simd_vec4.hpp	/^		typedef std::size_t size_type;$/;"	t	namespace:glm::detail	typeref:typename:std::size_t
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget/;"	m	struct:__anon84e4e886020a	typeref:typename:void (*)(void * user,int n)
slerp	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> slerp(tquat<T, P> const & x,	tquat<T, P> const & y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
slerp	glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> slerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
slerp	glm/gtx/simd_quat.inl	/^GLM_FUNC_QUALIFIER detail::fquatSIMD slerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fquatSIMD
slider	nuklear/nuklear.h	/^    struct nk_style_slider slider;$/;"	m	struct:nk_style	typeref:struct:nk_style_slider
slot	nuklear/nuklear.h	/^    int slot;$/;"	m	struct:nk_chart	typeref:typename:int
slots	nuklear/nuklear.h	/^    struct nk_chart_slot slots[NK_CHART_MAX_SLOT];$/;"	m	struct:nk_chart	typeref:struct:nk_chart_slot[]
smoothstep	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD smoothstep$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
space	glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
spacing	nuklear/nuklear.h	/^    float spacing;$/;"	m	struct:nk_style_toggle	typeref:typename:float
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_font_config	typeref:struct:nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_combo	typeref:struct:nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_slider	typeref:struct:nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_tab	typeref:struct:nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window	typeref:struct:nk_vec2
spacing	nuklear/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_vec2
spc	nuklear/nuklear.h	/^    struct nk_tt_pack_context spc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_tt_pack_context
specular	glm/detail/dummy.cpp	/^	glm::vec4 specular; \/\/ Scli$/;"	m	struct:light	typeref:typename:glm::vec4	file:
specular	glm/detail/dummy.cpp	/^	glm::vec4 specular; \/\/ Scm$/;"	m	struct:material	typeref:typename:glm::vec4	file:
sphericalRand	glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, defaultp> sphericalRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,defaultp>
spotCosCutoff	glm/detail/dummy.cpp	/^	float spotCosCutoff; \/\/ Derived: cos(Crli)$/;"	m	struct:light	typeref:typename:float	file:
spotCutoff	glm/detail/dummy.cpp	/^	float spotCutoff; \/\/ Crli$/;"	m	struct:light	typeref:typename:float	file:
spotDirection	glm/detail/dummy.cpp	/^	glm::vec3 spotDirection; \/\/ Sdli$/;"	m	struct:light	typeref:typename:glm::vec3	file:
spotExponent	glm/detail/dummy.cpp	/^	float spotExponent; \/\/ Srli$/;"	m	struct:light	typeref:typename:float	file:
sqrt	glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> sqrt(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
sqrt	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int sqrt(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
sqrt	glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint sqrt(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
sqrt	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD sqrt(detail::fvec4SIMD const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
squad	glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P> squad$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tquat<T,P>
sse_abs_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_abs_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_add_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_add_ps(__m128 const in1[4], __m128 const in2[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_ceil_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_ceil_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_clp_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_clp_ps(__m128 v, __m128 minVal, __m128 maxVal)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_comp_mul_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER matType sse_comp_mul_ps$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER matType
sse_detd_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER __m128 sse_detd_ps$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_det_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER __m128 sse_det_ps$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_dot_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_dot_ps(__m128 v1, __m128 v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_dot_ss	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_dot_ss(__m128 v1, __m128 v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_dst_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_dst_ps(__m128 p0, __m128 p1)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_ffd_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_ffd_ps(__m128 N, __m128 I, __m128 Nref)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_flr_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_flr_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_frc_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_frc_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_inverse_fast_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_inverse_fast_ps(__m128 const in[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_inverse_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_inverse_ps(__m128 const in[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_len_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_len_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_mix_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_mix_ps(__m128 v1, __m128 v2, __m128 a)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_mod_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_mod_ps(__m128 x, __m128 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_mul_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_mul_ps(__m128 const in1[4], __m128 const in2[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_mul_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER __m128 sse_mul_ps(__m128 const m[4], __m128 v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_mul_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER __m128 sse_mul_ps(__m128 v, __m128 const m[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_nrm_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_nrm_ps(__m128 v)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_outer_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_outer_ps(__m128 const & c, __m128 const & r, __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_rde_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_rde_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_rfa_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_rfa_ps(__m128 I, __m128 N, __m128 eta)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_rfe_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_rfe_ps(__m128 I, __m128 N)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_rnd_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_rnd_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_sgn_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_sgn_ps(__m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_slow_det_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER __m128 sse_slow_det_ps(__m128 const in[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_sqrt_wip_ss	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_sqrt_wip_ss(__m128 const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_ssp_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_ssp_ps(__m128 edge0, __m128 edge1, __m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_stp_ps	glm/detail/intrinsic_common.inl	/^GLM_FUNC_QUALIFIER __m128 sse_stp_ps(__m128 edge, __m128 x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
sse_sub_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_sub_ps(__m128 const in1[4], __m128 const in2[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_transpose_ps	glm/detail/intrinsic_matrix.inl	/^GLM_FUNC_QUALIFIER void sse_transpose_ps(__m128 const in[4], __m128 out[4])$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER void
sse_xpd_ps	glm/detail/intrinsic_geometric.inl	/^GLM_FUNC_QUALIFIER __m128 sse_xpd_ps(__m128 v1, __m128 v2)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER __m128
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
state	nuklear/nuklear.h	/^    int state;$/;"	m	struct:nk_property_state	typeref:typename:int
state_	glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:state_type &
state_saver	glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<char>
state_type	glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::basic_ios<CTy,CTr>
STBIDEF	stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	stb_image.h	/^#define STBI_ASSERT(/;"	d
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	typeref:typename:STBIDEF void
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon84e4e8860104
stbi_dequantize_t	stb_image.h	/^typedef stbi_uc stbi_dequantize_t;$/;"	t	typeref:typename:stbi_uc
stbi_dequantize_t	stb_image.h	/^typedef unsigned short stbi_dequantize_t;$/;"	t	typeref:typename:unsigned short
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	typeref:typename:STBIDEF const char *
STBI_FAILURE_USERMSG	Bitmap.cpp	/^#define STBI_FAILURE_USERMSG$/;"	d	file:
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon84e4e8860104
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon84e4e8860104
STBI_HAS_LROTL	stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
stbi_hdr_to_ldr_gamma	stb_image.h	/^void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	typeref:typename:void
stbi_hdr_to_ldr_scale	stb_image.h	/^void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	typeref:typename:void
stbi_idct_8x8	stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequ/;"	t	typeref:typename:void (*)(stbi_uc * out,int out_stride,short data[64],unsigned short * dequantize)
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	typeref:typename:STBIDEF void
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int/;"	f	typeref:typename:STBIDEF int
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_inline	stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	stb_image.h	/^   #define stbi_inline$/;"	d
stbi_install_idct	stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func)$/;"	f	typeref:typename:STBIDEF void
stbi_install_YCbCr_to_RGB	stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f	typeref:typename:STBIDEF void
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon84e4e886020a
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_memory	stb_image.h	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:int
stbi_ldr_to_hdr_gamma	stb_image.h	/^void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	typeref:typename:void
stbi_ldr_to_hdr_scale	stb_image.h	/^void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	typeref:typename:void
stbi_load	stb_image.h	/^STBIDEF unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF unsigned char *
stbi_loadf	stb_image.h	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi_loadf_from_callbacks	stb_image.h	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int /;"	f	typeref:typename:float *
stbi_loadf_from_file	stb_image.h	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi_loadf_from_memory	stb_image.h	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req/;"	f	typeref:typename:float *
stbi_loadf_main	stb_image.h	/^float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi_load_from_callbacks	stb_image.h	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int */;"	f	typeref:typename:unsigned char *
stbi_load_from_file	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF unsigned char *
stbi_load_from_memory	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int/;"	f	typeref:typename:STBIDEF unsigned char *
stbi_load_main	stb_image.h	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi_lrot	stb_image.h	/^   #define stbi_lrot(/;"	d
STBI_NOTUSED	stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon84e4e8860104
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon84e4e8860104
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	typeref:typename:STBIDEF void
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t	typeref:typename:unsigned char
STBI_VERSION	stb_image.h	/^#define STBI_VERSION /;"	d
stbi_YCbCr_to_RGB_run	stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stb/;"	t	typeref:typename:void (*)(stbi_uc * output,stbi_uc const * y,stbi_uc const * cb,stbi_uc const * cr,int count,int step)
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, i/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int init/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int i/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	typeref:typename:stbi_inline int
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	typeref:typename:int
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	typeref:typename:stbi_inline int
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	typeref:typename:stbi_inline int
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,3276/;"	v	typeref:typename:stbi__uint32[17]
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	typeref:typename:int
STBI__BYTECAST	stb_image.h	/^#define STBI__BYTECAST(/;"	d
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	typeref:typename:int
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	typeref:typename:stbi_uc
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon84e4e886030a
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:unsigned char *
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	typeref:typename:void
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, i/;"	f	typeref:typename:int
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_/;"	f	typeref:typename:int
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	typeref:typename:void
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v	typeref:typename:int
stbi__div16	stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	stb_image.h	/^#define stbi__div4(/;"	d
stbi__DNL	stb_image.h	/^#define stbi__DNL(/;"	d
stbi__do_png	stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	typeref:typename:int
stbi__EOI	stb_image.h	/^#define stbi__EOI(/;"	d
stbi__err	stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f	typeref:typename:int
stbi__errpf	stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	typeref:typename:int
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__f2f	stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	typeref:typename:void
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f	typeref:typename:void
stbi__float2int	stb_image.h	/^#define stbi__float2int(/;"	d
stbi__fopen	stb_image.h	/^FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	typeref:typename:FILE *
stbi__fsh	stb_image.h	/^#define stbi__fsh(/;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d04
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon84e4e8860d04
STBI__F_none	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d04
STBI__F_paeth	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d04
STBI__F_paeth_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon84e4e8860d04
STBI__F_sub	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d04
STBI__F_up	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d04
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	typeref:typename:int
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	typeref:typename:stbi__pngchunk
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_uc
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon84e4e886100a
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	typeref:typename:int
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon84e4e8860f0a
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, i/;"	f	typeref:typename:void
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v	typeref:typename:const char *
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
STBI__HDR_BUFLEN	stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	typeref:typename:void
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	typeref:typename:char *
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	typeref:typename:int
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	typeref:typename:stbi_uc *
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	typeref:typename:int
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon84e4e886050a
STBI__IDCT_1D	stb_image.h	/^#define STBI__IDCT_1D(/;"	d
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *de/;"	f	typeref:typename:void
stbi__idct_installed	stb_image.h	/^static stbi_idct_8x8 stbi__idct_installed = stbi__idct_block;$/;"	v	typeref:typename:stbi_idct_8x8
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__init_zdefaults	stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	typeref:typename:void
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t	typeref:typename:signed short
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t	typeref:typename:int16_t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t	typeref:typename:signed int
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t	typeref:typename:int32_t
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon84e4e886060a
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huff/;"	f	typeref:typename:int
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v	typeref:typename:stbi_uc[]
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_load	stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	typeref:typename:float *
stbi__malloc	stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	typeref:typename:void *
STBI__MARKER_none	stb_image.h	/^#define STBI__MARKER_none /;"	d
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	typeref:typename:void
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	typeref:typename:int
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	typeref:typename:int
stbi__parse_uncomperssed_block	stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	typeref:typename:int
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	typeref:typename:int
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *re/;"	f	typeref:typename:stbi_uc *
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon84e4e8860e0a
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon84e4e8860c0a
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon84e4e8860b0a
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_load	stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	typeref:typename:stbi_uc *
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	typeref:typename:int
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	typeref:typename:stbi_uc *
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	typeref:typename:void
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon84e4e886080a
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, i/;"	f	typeref:typename:stbi_uc *
STBI__RESTART	stb_image.h	/^#define STBI__RESTART(/;"	d
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	typeref:typename:void
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	typeref:typename:int
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	typeref:typename:void
stbi__SOF	stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOI	stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	stb_image.h	/^#define stbi__SOS(/;"	d
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	typeref:typename:void
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	typeref:typename:void
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	typeref:typename:void
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v	typeref:typename:stbi_io_callbacks
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	typeref:typename:int
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	typeref:typename:int
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	typeref:typename:void
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t	typeref:typename:uint16_t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t	typeref:typename:unsigned short
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t	typeref:typename:uint32_t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t	typeref:typename:unsigned int
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v	typeref:typename:int
stbi__YCbCr_installed	stb_image.h	/^static stbi_YCbCr_to_RGB_run stbi__YCbCr_installed = stbi__YCbCr_to_RGB_row;$/;"	v	typeref:typename:stbi_YCbCr_to_RGB_run
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stb/;"	f	typeref:typename:void
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon84e4e8860a0a
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	typeref:typename:int
stbi__zdefault_distance	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	typeref:typename:stbi_uc[288][32]
stbi__zdefault_length	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	typeref:typename:stbi_uc[288]
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	typeref:typename:int[32]
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v	typeref:typename:int[32]
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	typeref:typename:int
STBI__ZFAST_BITS	stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon84e4e886090a
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:stbi_inline int
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v	typeref:typename:int[31]
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]= $/;"	v	typeref:typename:int[31]
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	typeref:typename:stbi_inline unsigned int
stbtt__close_shape	nuklear/nuklear.h	/^stbtt__close_shape(struct nk_tt_vertex *vertices, int num_vertices, int was_off,$/;"	f	typeref:typename:NK_INTERN int
STB_IMAGE_IMPLEMENTATION	Bitmap.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
std	glm/gtx/hash.hpp	/^namespace std$/;"	n
std	glm/gtx/hash.inl	/^namespace std$/;"	n	file:
step	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD step$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
step	main.cpp	/^float step;$/;"	v	typeref:typename:float
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
stopUsing	Program.cpp	/^void Program::stopUsing() const {$/;"	f	class:Program	typeref:typename:void
streamsize_type	glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::streamsize
stride	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap	typeref:typename:int
stride_in_bytes	nuklear/nuklear.h	/^    int   stride_in_bytes;$/;"	m	struct:nk_tt_pack_context	typeref:typename:int
string	nuklear/nuklear.h	/^    char string[1];$/;"	m	struct:nk_command_text	typeref:typename:char[1]
string	nuklear/nuklear.h	/^    struct nk_str string;$/;"	m	struct:nk_text_edit	typeref:struct:nk_str
Stub	glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
style	nuklear/nuklear.h	/^    struct nk_style style;$/;"	m	struct:nk_context	typeref:struct:nk_style
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon84e4e8860f0a	typeref:typename:stbi_uc
swizzle	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD fvec4SIMD::swizzle() const$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD
swizzle	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER fvec4SIMD& fvec4SIMD::swizzle()$/;"	f	class:glm::detail::fvec4SIMD	typeref:typename:GLM_FUNC_QUALIFIER fvec4SIMD &
sy	nuklear/nuklear.h	/^    float sy;$/;"	m	struct:nk_tt__active_edge	typeref:typename:float
sym	nuklear/nuklear.h	/^    struct nk_rect sym = {0,0,0,0};$/;"	s	function:nk_tree_base
symbol_active	nuklear/nuklear.h	/^    struct nk_color symbol_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
symbol_hover	nuklear/nuklear.h	/^    struct nk_color symbol_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
symbol_normal	nuklear/nuklear.h	/^    struct nk_color symbol_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_color
sym_active	nuklear/nuklear.h	/^    enum nk_symbol_type sym_active;$/;"	m	struct:nk_style_combo	typeref:enum:nk_symbol_type
sym_hover	nuklear/nuklear.h	/^    enum nk_symbol_type sym_hover;$/;"	m	struct:nk_style_combo	typeref:enum:nk_symbol_type
sym_left	nuklear/nuklear.h	/^    enum nk_symbol_type sym_left;$/;"	m	struct:nk_style_property	typeref:enum:nk_symbol_type
sym_maximize	nuklear/nuklear.h	/^    enum nk_symbol_type sym_maximize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_symbol_type
sym_minimize	nuklear/nuklear.h	/^    enum nk_symbol_type sym_minimize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_symbol_type
sym_normal	nuklear/nuklear.h	/^    enum nk_symbol_type sym_normal;$/;"	m	struct:nk_style_combo	typeref:enum:nk_symbol_type
sym_right	nuklear/nuklear.h	/^    enum nk_symbol_type sym_right;$/;"	m	struct:nk_style_property	typeref:enum:nk_symbol_type
t	glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d040a	typeref:typename:T
t	glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon0c00c97d060c	typeref:typename:T
t	glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe040a	typeref:typename:T
t	glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon0c12e1fe060c	typeref:typename:T
t	glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f040a	typeref:typename:T
t	glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon0c24fa7f060c	typeref:typename:T
T	glm/gtx/simd_vec4.hpp	/^		T = 1,$/;"	e	enum:glm::comp
T	main.cpp	/^float T = 0.0;$/;"	v	typeref:typename:float
t0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
t1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
tab	nuklear/nuklear.h	/^    struct nk_style_tab tab;$/;"	m	struct:nk_style	typeref:struct:nk_style_tab
tables	nuklear/nuklear.h	/^    struct nk_table *tables;$/;"	m	struct:nk_window	typeref:struct:nk_table *
table_count	nuklear/nuklear.h	/^    unsigned short table_count;$/;"	m	struct:nk_window	typeref:typename:unsigned short
table_size	nuklear/nuklear.h	/^    unsigned short table_size;$/;"	m	struct:nk_window	typeref:typename:unsigned short
tab_maximize_button	nuklear/nuklear.h	/^    struct nk_style_button tab_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_button
tab_minimize_button	nuklear/nuklear.h	/^    struct nk_style_button tab_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_button
tan	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> tan(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
tanh	glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> tanh(vecType<T, P> const & v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
taylorCos	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> taylorCos(vecType<T, P> const & x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
taylorInvSqrt	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const & r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
taylorInvSqrt	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec2<T, P> taylorInvSqrt(tvec2<T, P> const & r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec2<T,P>
taylorInvSqrt	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec3<T, P> taylorInvSqrt(tvec3<T, P> const & r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
taylorInvSqrt	glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER tvec4<T, P> taylorInvSqrt(tvec4<T, P> const & r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER tvec4<T,P>
tbl	nuklear/nuklear.h	/^    struct nk_table tbl;$/;"	m	union:nk_page_data	typeref:struct:nk_table
tdogl	Bitmap.h	/^namespace tdogl {$/;"	n
tdogl	Camera.h	/^namespace tdogl {$/;"	n
tdogl	Program.h	/^namespace tdogl {$/;"	n
tdogl	Shader.h	/^namespace tdogl {$/;"	n
tdogl	Texture.h	/^namespace tdogl {$/;"	n
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/detail/glm.cpp	/^template struct tdualquat<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tdualquat	glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
tdualquat	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat()$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^		GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tdualquat<T, P> const & d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(ctor)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tdualquat<T, Q> const & d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tdualquat<U, Q> const & q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tmat2x4<T, P> const & m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tmat3x4<T, P> const & m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tquat<T, P> const & q, tvec3<T, P> const& p)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tquat<T, P> const & r)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
tdualquat	glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, P>::tdualquat(tquat<T, P> const & r, tquat<T, P> const & d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER
temporary	nuklear/nuklear.h	/^    struct nk_allocator temporary;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_allocator
tex	main.cpp	/^GLuint tex;$/;"	v	typeref:typename:GLuint
text	nuklear/nuklear.h	/^    char text[NK_INPUT_MAX];$/;"	m	struct:nk_keyboard	typeref:typename:char[]
text	nuklear/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_style_tab	typeref:struct:nk_color
text	nuklear/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_text	typeref:struct:nk_color
text	nuklear/nuklear.h	/^    struct nk_style_text text;$/;"	m	struct:nk_style	typeref:struct:nk_style_text
text	nuklear/nuklear_glfw_gl3.h	/^    unsigned int text[NK_GLFW_TEXT_MAX];$/;"	m	struct:nk_glfw	typeref:typename:unsigned int[]
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_draw_command	typeref:typename:nk_handle
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_font	typeref:typename:nk_handle
texture	nuklear/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_user_font	typeref:typename:nk_handle
texture	nuklear/nuklear.h	/^    nk_handle texture;\/* texture handle to a texture with a white pixel *\/$/;"	m	struct:nk_draw_null_texture	typeref:typename:nk_handle
Texture	Texture.cpp	/^Texture::Texture(const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture
Texture	Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
TextureFormatForBitmapFormat	Texture.cpp	/^static GLenum TextureFormatForBitmapFormat(Bitmap::Format format)$/;"	f	typeref:typename:GLenum	file:
TextureInit	main.cpp	/^void TextureInit()$/;"	f	typeref:typename:void
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_button	typeref:struct:nk_color
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
text_active	nuklear/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_color
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_button	typeref:typename:nk_flags
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_selectable	typeref:typename:nk_flags
text_alignment	nuklear/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_toggle	typeref:typename:nk_flags
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_button	typeref:struct:nk_color
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_background	nuklear/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_color
text_edit	nuklear/nuklear.h	/^    struct nk_text_edit text_edit;$/;"	m	struct:nk_context	typeref:struct:nk_text_edit
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_hover	nuklear/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_color
text_hover_active	nuklear/nuklear.h	/^    struct nk_color text_hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_len	nuklear/nuklear.h	/^    int text_len;$/;"	m	struct:nk_keyboard	typeref:typename:int
text_len	nuklear/nuklear_glfw_gl3.h	/^    int text_len;$/;"	m	struct:nk_glfw	typeref:typename:int
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_normal	nuklear/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_color
text_normal_active	nuklear/nuklear.h	/^    struct nk_color text_normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_pressed	nuklear/nuklear.h	/^    struct nk_color text_pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
text_pressed_active	nuklear/nuklear.h	/^    struct nk_color text_pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_color
tex_height	nuklear/nuklear.h	/^    int tex_height;$/;"	m	struct:nk_font_atlas	typeref:typename:int
tex_width	nuklear/nuklear.h	/^    int tex_width;$/;"	m	struct:nk_font_atlas	typeref:typename:int
third	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType third()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
three	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED three = _mm_set_ps1(3.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
three_over_two_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType three_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/glm.cpp	/^template struct tmat2x2<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x2	glm/detail/type_mat2x2.hpp	/^	struct tmat2x2$/;"	s	namespace:glm
tmat2x2	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2()$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^		GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(col_type const & v0, col_type const & v1)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(ctor)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(T const & s)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat2x2<T, Q> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat2x2<U, Q> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x2	glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER tmat2x2<T, P>::tmat2x2(tvec2<V1, P> const & v1, tvec2<V2, P> const & v2)$/;"	f	class:glm::tmat2x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/glm.cpp	/^template struct tmat2x3<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x3	glm/detail/type_mat2x3.hpp	/^	struct tmat2x3$/;"	s	namespace:glm
tmat2x3	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3()$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^		GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(col_type const & v0, col_type const & v1)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(ctor)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(T const & s)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat2x3<T, Q> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat2x3<U, Q> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x3	glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER tmat2x3<T, P>::tmat2x3(tvec3<V1, P> const & v1, tvec3<V2, P> const & v2)$/;"	f	class:glm::tmat2x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/glm.cpp	/^template struct tmat2x4<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat2x4	glm/detail/type_mat2x4.hpp	/^	struct tmat2x4$/;"	s	namespace:glm
tmat2x4	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4()$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^		GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(col_type const & v0, col_type const & v1)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(ctor)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(T const & s)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat2x4<T, Q> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat2x4<U, Q> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat2x4	glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER tmat2x4<T, P>::tmat2x4(tvec4<V1, P> const & v1, tvec4<V2, P> const & v2)$/;"	f	class:glm::tmat2x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/glm.cpp	/^template struct tmat3x2<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x2	glm/detail/type_mat3x2.hpp	/^	struct tmat3x2$/;"	s	namespace:glm
tmat3x2	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2()$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^		GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(ctor)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(T const & s)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat3x2<T, Q> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat3x2<U, Q> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x2	glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER tmat3x2<T, P>::tmat3x2(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat3x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/glm.cpp	/^template struct tmat3x3<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x3	glm/detail/type_mat3x3.hpp	/^	struct tmat3x3$/;"	s	namespace:glm
tmat3x3	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3()$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^		GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(ctor)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(T const & s)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat3x3<T, Q> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat3x3<U, Q> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x3	glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P>::tmat3x3(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat3x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/glm.cpp	/^template struct tmat3x4<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat3x4	glm/detail/type_mat3x4.hpp	/^	struct tmat3x4$/;"	s	namespace:glm
tmat3x4	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4()$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^		GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(ctor)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(T const & s)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat3x4<T, Q> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat3x4<U, Q> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat3x4	glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER tmat3x4<T, P>::tmat3x4(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat3x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/glm.cpp	/^template struct tmat4x2<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x2	glm/detail/type_mat4x2.hpp	/^	struct tmat4x2$/;"	s	namespace:glm
tmat4x2	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2()$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^		GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(ctor)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(T const & s)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat4x2<T, Q> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat4x2<U, Q> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x2	glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER tmat4x2<T, P>::tmat4x2(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat4x2	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/glm.cpp	/^template struct tmat4x3<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x3	glm/detail/type_mat4x3.hpp	/^	struct tmat4x3$/;"	s	namespace:glm
tmat4x3	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3()$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^		GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(ctor)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(T const & s)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat4x3<T, Q> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat4x3<U, Q> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x3	glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER tmat4x3<T, P>::tmat4x3(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat4x3	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/glm.cpp	/^template struct tmat4x4<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tmat4x4	glm/detail/type_mat4x4.hpp	/^	struct tmat4x4$/;"	s	namespace:glm
tmat4x4	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4()$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^		GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat4x4<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(ctor)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(T const & s)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat2x2<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat2x3<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat2x4<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat3x2<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat3x3<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat3x4<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat4x2<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat4x3<T, P> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
tmat4x4	glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P>::tmat4x4(tmat4x4<T, Q> const & m)$/;"	f	class:glm::tmat4x4	typeref:typename:GLM_FUNC_QUALIFIER
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon84e4e886060a	typeref:typename:int
toFloat16	glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER hdata toFloat16(float const & f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER hdata
toFloat32	glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float toFloat32(hdata value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
toMat3	glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tmat3x3<T, P> toMat3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL tmat3x3<T,P>
toMat4	glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tmat4x4<T, P> toMat4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL tmat4x4<T,P>
tooltip_border	nuklear/nuklear.h	/^    float tooltip_border;$/;"	m	struct:nk_style_window	typeref:typename:float
tooltip_border_color	nuklear/nuklear.h	/^    struct nk_color tooltip_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_color
top	nuklear/nuklear.h	/^    struct nk_color top;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_color
toQuat	glm/gtx/quaternion.hpp	/^	GLM_FUNC_DECL tquat<T, P> toQuat($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL tquat<T,P>
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_vec2
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_vec2
touch_padding	nuklear/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_vec2
to_string	glm/gtx/string_cast.inl	/^GLM_FUNC_QUALIFIER std::string to_string(matType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::string
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
tquat	glm/detail/glm.cpp	/^template struct tquat<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/detail/glm.cpp	/^template struct tquat<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/detail/glm.cpp	/^template struct tquat<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/detail/glm.cpp	/^template struct tquat<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/detail/glm.cpp	/^template struct tquat<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/detail/glm.cpp	/^template struct tquat<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tquat	glm/gtc/quaternion.hpp	/^	struct tquat$/;"	s	namespace:glm
tquat	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER tquat<T, P>::tquat()$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^		GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tquat<T, P> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(ctor)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(T const & s, tvec3<T, P> const & v)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(T const & w, T const & x, T const & y, T const & z)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tmat3x3<T, P> const & m)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tmat4x4<T, P> const & m)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tquat<T, Q> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tquat<U, Q> const & q)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tvec3<T, P> const & eulerAngle)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
tquat	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER tquat<T, P>::tquat(tvec3<T, P> const & u, tvec3<T, P> const & v)$/;"	f	class:glm::tquat	typeref:typename:GLM_FUNC_QUALIFIER
translate	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> translate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
translate	glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER tmat3x3<T, P> translate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat3x3<T,P>
translate	glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, P> translate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,P>
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
transpose	glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename matType<T, P>::transpose_type transpose(matType<T, P> const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename matType<T,P>::transpose_type
transpose	glm/gtx/simd_mat4.inl	/^GLM_FUNC_QUALIFIER detail::fmat4x4SIMD transpose(detail::fmat4x4SIMD const & m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fmat4x4SIMD
transpose_type	glm/detail/type_mat2x2.hpp	/^		typedef tmat2x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:tmat2x2<T,P>
transpose_type	glm/detail/type_mat2x3.hpp	/^		typedef tmat3x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:tmat3x2<T,P>
transpose_type	glm/detail/type_mat2x4.hpp	/^		typedef tmat4x2<T, P> transpose_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:tmat4x2<T,P>
transpose_type	glm/detail/type_mat3x2.hpp	/^		typedef tmat2x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:tmat2x3<T,P>
transpose_type	glm/detail/type_mat3x3.hpp	/^		typedef tmat3x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:tmat3x3<T,P>
transpose_type	glm/detail/type_mat3x4.hpp	/^		typedef tmat4x3<T, P> transpose_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:tmat4x3<T,P>
transpose_type	glm/detail/type_mat4x2.hpp	/^		typedef tmat2x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:tmat2x4<T,P>
transpose_type	glm/detail/type_mat4x3.hpp	/^		typedef tmat3x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:tmat3x4<T,P>
transpose_type	glm/detail/type_mat4x4.hpp	/^		typedef tmat4x4<T, P> transpose_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:tmat4x4<T,P>
transpose_type	glm/gtx/simd_mat4.hpp	/^		typedef fmat4x4SIMD transpose_type;$/;"	t	namespace:glm::detail	typeref:typename:fmat4x4SIMD
tree_depth	nuklear/nuklear.h	/^    int tree_depth;$/;"	m	struct:nk_row_layout	typeref:typename:int
tri	nuklear/nuklear.h	/^    struct nk_rect tri = {0,0,0,0};$/;"	s	function:nk_do_button_text_symbol
triangleNormal	glm/gtx/normal.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> triangleNormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
trunc	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER detail::fvec4SIMD trunc$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER detail::fvec4SIMD
ttf_blob	nuklear/nuklear.h	/^    void *ttf_blob;$/;"	m	struct:nk_font_config	typeref:typename:void *
ttf_data_owned_by_atlas	nuklear/nuklear.h	/^    unsigned char ttf_data_owned_by_atlas;$/;"	m	struct:nk_font_config	typeref:typename:unsigned char
ttf_size	nuklear/nuklear.h	/^    nk_size ttf_size;$/;"	m	struct:nk_font_config	typeref:typename:nk_size
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/glm.cpp	/^template struct tvec1<uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec1	glm/detail/type_vec1.hpp	/^			GLM_FUNC_DECL tvec1(detail::_swizzle<1, T, P, tvec1<T, P>, E0, -1,-2,-3> const & that)$/;"	f	struct:glm::tvec1	typeref:typename:GLM_FUNC_DECL
tvec1	glm/detail/type_vec1.hpp	/^	struct tvec1$/;"	s	namespace:glm
tvec1	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1()$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^		GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec1<T, P> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER  tvec1<T, P>::tvec1(T const & scalar)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(ctor)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec1<T, Q> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec1<U, Q> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec2<U, Q> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec3<U, Q> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec1	glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER tvec1<T, P>::tvec1(tvec4<U, Q> const & v)$/;"	f	class:glm::tvec1	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/glm.cpp	/^template struct tvec2<uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec2	glm/detail/type_vec2.hpp	/^			GLM_FUNC_DECL tvec2(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1,-1,-2> const & that)$/;"	f	struct:glm::tvec2	typeref:typename:GLM_FUNC_DECL
tvec2	glm/detail/type_vec2.hpp	/^	struct tvec2$/;"	s	namespace:glm
tvec2	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2()$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^		GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec2<T, P> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(A const & a, B const & b)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(ctor)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(T const & s1, T const & s2)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(T const & scalar)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec1<A, P> const & a, tvec1<B, P> const & b)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec2<T, Q> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec2<U, Q> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec3<U, Q> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec2	glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER tvec2<T, P>::tvec2(tvec4<U, Q> const & v)$/;"	f	class:glm::tvec2	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/glm.cpp	/^template struct tvec3<uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec3	glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, T const/;"	f	struct:glm::tvec3	typeref:typename:GLM_FUNC_DECL
tvec3	glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const & that)$/;"	f	struct:glm::tvec3	typeref:typename:GLM_FUNC_DECL
tvec3	glm/detail/type_vec3.hpp	/^			GLM_FUNC_DECL tvec3(T const & scalar, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> /;"	f	struct:glm::tvec3	typeref:typename:GLM_FUNC_DECL
tvec3	glm/detail/type_vec3.hpp	/^	struct tvec3$/;"	s	namespace:glm
tvec3	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3()$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^		GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec3<T, P> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(A const & a, B const & b, C const & c) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(A const & a, tvec2<B, Q> const & b) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(ctor)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(T const & a, T const & b, T const & c)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(T const & scalar)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec1<A, P> const & a, tvec1<B, P> const & b, tvec1<C, P>/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec1<A, Q> const & a, tvec2<B, Q> const & b) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec2<A, Q> const & a, B const & b) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec2<A, Q> const & a, tvec1<B, Q> const & b) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec3<T, Q> const & v)$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec3<U, Q> const & v) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec3	glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P>::tvec3(tvec4<U, Q> const & v) :$/;"	f	class:glm::tvec3	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<float64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<int8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint16, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint16, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint16, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint32, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint32, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint32, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint64, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint64, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint64, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint8, highp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint8, lowp>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/glm.cpp	/^template struct tvec4<uint8, mediump>;$/;"	v	namespace:glm	typeref:typename:struct
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, detail:/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const & v, T const/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const & v, T const/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(detail::_swizzle<4, T, P, tvec4<T, P>, E0, E1, E2, E3> const & that)$/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, -1, -2> const/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, detail::_swizzle<3, T, P, tvec3<T, P>, E0, E1, E2, -1> const/;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^			GLM_FUNC_DECL tvec4(T const & x, T const & y, detail::_swizzle<2, T, P, tvec2<T, P>, E0, E1, /;"	f	struct:glm::tvec4	typeref:typename:GLM_FUNC_DECL
tvec4	glm/detail/type_vec4.hpp	/^	struct tvec4$/;"	s	namespace:glm
tvec4	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4()$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^		GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec4<T, P> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(A a, B b, C c, D d) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(A a, tvec3<B, Q> const & b) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(A s1, B s2, tvec2<C, Q> const & v) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(A s1, tvec2<B, Q> const & v, C s2) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(ctor)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(T a, T b, T c, T d)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(T scalar)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec1<A, P> const & a, tvec1<B, P> const & b, tvec1<C, P>/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec1<B, Q> const & b, tvec2<C, Q>/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec2<B, Q> const & b, tvec1<C, Q>/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec3<B, Q> const & b) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec2<A, Q> const & a, B b, C c) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec2<A, Q> const & a, tvec1<B, Q> const & b, tvec1<C, Q>/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec2<A, Q> const & a, tvec2<B, Q> const & b) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec3<A, Q> const & a, B b) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec3<A, Q> const & a, tvec1<B, Q> const & b) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec4<T, Q> const & v)$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER tvec4<T, P>::tvec4(tvec4<U, Q> const & v) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4_sse2.inl	/^		GLM_FUNC_QUALIFIER tvec4<float, simd>::tvec4()$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4_sse2.inl	/^	GLM_FUNC_QUALIFIER tvec4<float, simd>::tvec4(float a, float b, float c, float d) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tvec4	glm/detail/type_vec4_sse2.inl	/^	GLM_FUNC_QUALIFIER tvec4<float, simd>::tvec4(float s) :$/;"	f	class:glm::tvec4	typeref:typename:GLM_FUNC_QUALIFIER
tweakedInfinitePerspective	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> tweakedInfinitePerspective$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
two	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED two = _mm_set_ps1(2.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
two_over_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_over_root_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_pi	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_thirds	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_thirds()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
type	glm/detail/func_matrix.hpp	/^		typedef tmat2x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat2x2<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat2x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat2x3<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat2x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat2x4<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat3x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat3x2<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat3x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat3x3<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat3x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat3x4<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat4x2<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat4x2<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat4x3<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat4x3<T,P>
type	glm/detail/func_matrix.hpp	/^		typedef tmat4x4<T, P> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:tmat4x4<T,P>
type	glm/detail/type_gentype.hpp	/^		typedef TYPE<VALTYPE> type;$/;"	t	struct:glm::detail::genType	typeref:typename:TYPE<VALTYPE>
type	glm/detail/type_int.hpp	/^			typedef char type;$/;"	t	struct:glm::detail::make_signed	typeref:typename:char
type	glm/detail/type_int.hpp	/^			typedef int type;$/;"	t	struct:glm::detail::make_signed	typeref:typename:int
type	glm/detail/type_int.hpp	/^			typedef long long type;$/;"	t	struct:glm::detail::make_signed	typeref:typename:long long
type	glm/detail/type_int.hpp	/^			typedef long type;$/;"	t	struct:glm::detail::make_signed	typeref:typename:long
type	glm/detail/type_int.hpp	/^			typedef short type;$/;"	t	struct:glm::detail::make_signed	typeref:typename:short
type	glm/detail/type_int.hpp	/^			typedef unsigned char type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned char
type	glm/detail/type_int.hpp	/^			typedef unsigned int type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned int
type	glm/detail/type_int.hpp	/^			typedef unsigned long long type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned long long
type	glm/detail/type_int.hpp	/^			typedef unsigned long type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned long
type	glm/detail/type_int.hpp	/^			typedef unsigned short type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned short
type	glm/detail/type_mat2x2.hpp	/^		typedef tmat2x2<T, P> type;$/;"	t	struct:glm::tmat2x2	typeref:typename:tmat2x2<T,P>
type	glm/detail/type_mat2x3.hpp	/^		typedef tmat2x3<T, P> type;$/;"	t	struct:glm::tmat2x3	typeref:typename:tmat2x3<T,P>
type	glm/detail/type_mat2x4.hpp	/^		typedef tmat2x4<T, P> type;$/;"	t	struct:glm::tmat2x4	typeref:typename:tmat2x4<T,P>
type	glm/detail/type_mat3x2.hpp	/^		typedef tmat3x2<T, P> type;$/;"	t	struct:glm::tmat3x2	typeref:typename:tmat3x2<T,P>
type	glm/detail/type_mat3x3.hpp	/^		typedef tmat3x3<T, P> type;$/;"	t	struct:glm::tmat3x3	typeref:typename:tmat3x3<T,P>
type	glm/detail/type_mat3x4.hpp	/^		typedef tmat3x4<T, P> type;$/;"	t	struct:glm::tmat3x4	typeref:typename:tmat3x4<T,P>
type	glm/detail/type_mat4x2.hpp	/^		typedef tmat4x2<T, P> type;$/;"	t	struct:glm::tmat4x2	typeref:typename:tmat4x2<T,P>
type	glm/detail/type_mat4x3.hpp	/^		typedef tmat4x3<T, P> type;$/;"	t	struct:glm::tmat4x3	typeref:typename:tmat4x3<T,P>
type	glm/detail/type_mat4x4.hpp	/^		typedef tmat4x4<T, P> type;$/;"	t	struct:glm::tmat4x4	typeref:typename:tmat4x4<T,P>
type	glm/detail/type_vec1.hpp	/^		typedef tvec1<T, P> type;$/;"	t	struct:glm::tvec1	typeref:typename:tvec1<T,P>
type	glm/detail/type_vec2.hpp	/^		typedef tvec2<T, P> type;$/;"	t	struct:glm::tvec2	typeref:typename:tvec2<T,P>
type	glm/detail/type_vec3.hpp	/^		typedef tvec3<T, P> type;$/;"	t	struct:glm::tvec3	typeref:typename:tvec3<T,P>
type	glm/detail/type_vec4.hpp	/^			typedef __m128 type;$/;"	t	struct:glm::detail::simd_data	typeref:typename:__m128
type	glm/detail/type_vec4.hpp	/^			typedef __m128i type;$/;"	t	struct:glm::detail::simd_data	typeref:typename:__m128i
type	glm/detail/type_vec4.hpp	/^			typedef __m256d type;$/;"	t	struct:glm::detail::simd_data	typeref:typename:__m256d
type	glm/detail/type_vec4.hpp	/^			typedef __m256i type;$/;"	t	struct:glm::detail::simd_data	typeref:typename:__m256i
type	glm/detail/type_vec4.hpp	/^		typedef T type[4];$/;"	t	struct:glm::detail::simd_data	typeref:typename:T[4]
type	glm/detail/type_vec4.hpp	/^		typedef tvec4<T, P> type;$/;"	t	struct:glm::tvec4	typeref:typename:tvec4<T,P>
type	glm/gtc/quaternion.hpp	/^		typedef tquat<T, P> type;$/;"	t	struct:glm::tquat	typeref:typename:tquat<T,P>
type	glm/gtx/simd_mat4.hpp	/^		typedef fmat4x4SIMD type;$/;"	t	namespace:glm::detail	typeref:typename:fmat4x4SIMD
type	glm/gtx/simd_quat.hpp	/^		typedef fquatSIMD type;$/;"	t	namespace:glm::detail	typeref:typename:fquatSIMD
type	glm/gtx/simd_vec4.hpp	/^		typedef fvec4SIMD type;$/;"	t	namespace:glm::detail	typeref:typename:fvec4SIMD
type	nuklear/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_buffer	typeref:enum:nk_allocation_type
type	nuklear/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_pool	typeref:enum:nk_allocation_type
type	nuklear/nuklear.h	/^    enum nk_chart_type type;$/;"	m	struct:nk_chart_slot	typeref:enum:nk_chart_type
type	nuklear/nuklear.h	/^    enum nk_command_type type;$/;"	m	struct:nk_command	typeref:enum:nk_command_type
type	nuklear/nuklear.h	/^    enum nk_style_item_type type;$/;"	m	struct:nk_style_item	typeref:enum:nk_style_item_type
type	nuklear/nuklear.h	/^    enum nk_window_flags type;$/;"	m	struct:nk_popup_state	typeref:enum:nk_window_flags
type	nuklear/nuklear.h	/^    int type;$/;"	m	struct:nk_row_layout	typeref:typename:int
type	nuklear/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex	typeref:typename:unsigned char
type	nuklear/nuklear.h	/^    unsigned int type;$/;"	m	struct:nk_memory_status	typeref:typename:unsigned int
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860e0a	typeref:typename:stbi_uc
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon84e4e8860b0a	typeref:typename:stbi__uint32
u	glm/gtc/bitfield.inl	/^			uint16 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint16	file:
u	glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint32	file:
u	glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:uint32	file:
u	glm/gtc/bitfield.inl	/^			uint64 u;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:uint64	file:
u	glm/gtc/bitfield.inl	/^			uint8 u;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:uint8	file:
u0	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph	typeref:typename:float
u1	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph	typeref:typename:float
u10u10u10u2	glm/gtc/packing.inl	/^	union u10u10u10u2$/;"	u	namespace:glm::detail	file:
u16	glm/fwd.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
u16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
u16vec1	glm/fwd.hpp	/^	typedef highp_u16vec1			u16vec1;$/;"	t	namespace:glm	typeref:typename:highp_u16vec1
u16vec1	glm/fwd.hpp	/^	typedef lowp_u16vec1			u16vec1;$/;"	t	namespace:glm	typeref:typename:lowp_u16vec1
u16vec1	glm/fwd.hpp	/^	typedef mediump_u16vec1			u16vec1;$/;"	t	namespace:glm	typeref:typename:mediump_u16vec1
u16vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<u16, defaultp> u16vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u16,defaultp>
u16vec1	glm/gtx/number_precision.hpp	/^	typedef u16			u16vec1;    \/\/!< \\brief 16bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u16
u16vec2	glm/fwd.hpp	/^	typedef highp_u16vec2			u16vec2;$/;"	t	namespace:glm	typeref:typename:highp_u16vec2
u16vec2	glm/fwd.hpp	/^	typedef lowp_u16vec2			u16vec2;$/;"	t	namespace:glm	typeref:typename:lowp_u16vec2
u16vec2	glm/fwd.hpp	/^	typedef mediump_u16vec2			u16vec2;$/;"	t	namespace:glm	typeref:typename:mediump_u16vec2
u16vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<u16, defaultp> u16vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u16,defaultp>
u16vec3	glm/fwd.hpp	/^	typedef highp_u16vec3			u16vec3;$/;"	t	namespace:glm	typeref:typename:highp_u16vec3
u16vec3	glm/fwd.hpp	/^	typedef lowp_u16vec3			u16vec3;$/;"	t	namespace:glm	typeref:typename:lowp_u16vec3
u16vec3	glm/fwd.hpp	/^	typedef mediump_u16vec3			u16vec3;$/;"	t	namespace:glm	typeref:typename:mediump_u16vec3
u16vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<u16, defaultp> u16vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u16,defaultp>
u16vec4	glm/fwd.hpp	/^	typedef highp_u16vec4			u16vec4;$/;"	t	namespace:glm	typeref:typename:highp_u16vec4
u16vec4	glm/fwd.hpp	/^	typedef lowp_u16vec4			u16vec4;$/;"	t	namespace:glm	typeref:typename:lowp_u16vec4
u16vec4	glm/fwd.hpp	/^	typedef mediump_u16vec4			u16vec4;$/;"	t	namespace:glm	typeref:typename:mediump_u16vec4
u16vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<u16, defaultp> u16vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u16,defaultp>
u32	glm/fwd.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
u32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
u32vec1	glm/fwd.hpp	/^	typedef highp_u32vec1			u32vec1;$/;"	t	namespace:glm	typeref:typename:highp_u32vec1
u32vec1	glm/fwd.hpp	/^	typedef lowp_u32vec1			u32vec1;$/;"	t	namespace:glm	typeref:typename:lowp_u32vec1
u32vec1	glm/fwd.hpp	/^	typedef mediump_u32vec1			u32vec1;$/;"	t	namespace:glm	typeref:typename:mediump_u32vec1
u32vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<u32, defaultp> u32vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u32,defaultp>
u32vec1	glm/gtx/number_precision.hpp	/^	typedef u32			u32vec1;    \/\/!< \\brief 32bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u32
u32vec2	glm/fwd.hpp	/^	typedef highp_u32vec2			u32vec2;$/;"	t	namespace:glm	typeref:typename:highp_u32vec2
u32vec2	glm/fwd.hpp	/^	typedef lowp_u32vec2			u32vec2;$/;"	t	namespace:glm	typeref:typename:lowp_u32vec2
u32vec2	glm/fwd.hpp	/^	typedef mediump_u32vec2			u32vec2;$/;"	t	namespace:glm	typeref:typename:mediump_u32vec2
u32vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<u32, defaultp> u32vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u32,defaultp>
u32vec3	glm/fwd.hpp	/^	typedef highp_u32vec3			u32vec3;$/;"	t	namespace:glm	typeref:typename:highp_u32vec3
u32vec3	glm/fwd.hpp	/^	typedef lowp_u32vec3			u32vec3;$/;"	t	namespace:glm	typeref:typename:lowp_u32vec3
u32vec3	glm/fwd.hpp	/^	typedef mediump_u32vec3			u32vec3;$/;"	t	namespace:glm	typeref:typename:mediump_u32vec3
u32vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<u32, defaultp> u32vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u32,defaultp>
u32vec4	glm/fwd.hpp	/^	typedef highp_u32vec4			u32vec4;$/;"	t	namespace:glm	typeref:typename:highp_u32vec4
u32vec4	glm/fwd.hpp	/^	typedef lowp_u32vec4			u32vec4;$/;"	t	namespace:glm	typeref:typename:lowp_u32vec4
u32vec4	glm/fwd.hpp	/^	typedef mediump_u32vec4			u32vec4;$/;"	t	namespace:glm	typeref:typename:mediump_u32vec4
u32vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<u32, defaultp> u32vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u32,defaultp>
u64	glm/fwd.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
u64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
u64vec1	glm/fwd.hpp	/^	typedef highp_u64vec1			u64vec1;$/;"	t	namespace:glm	typeref:typename:highp_u64vec1
u64vec1	glm/fwd.hpp	/^	typedef lowp_u64vec1			u64vec1;$/;"	t	namespace:glm	typeref:typename:lowp_u64vec1
u64vec1	glm/fwd.hpp	/^	typedef mediump_u64vec1			u64vec1;$/;"	t	namespace:glm	typeref:typename:mediump_u64vec1
u64vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<u64, defaultp> u64vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u64,defaultp>
u64vec1	glm/gtx/number_precision.hpp	/^	typedef u64			u64vec1;    \/\/!< \\brief 64bit unsigned integer scalar. (from GLM_GTX_number_pr/;"	t	namespace:glm::gtx	typeref:typename:u64
u64vec2	glm/fwd.hpp	/^	typedef highp_u64vec2			u64vec2;$/;"	t	namespace:glm	typeref:typename:highp_u64vec2
u64vec2	glm/fwd.hpp	/^	typedef lowp_u64vec2			u64vec2;$/;"	t	namespace:glm	typeref:typename:lowp_u64vec2
u64vec2	glm/fwd.hpp	/^	typedef mediump_u64vec2			u64vec2;$/;"	t	namespace:glm	typeref:typename:mediump_u64vec2
u64vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<u64, defaultp> u64vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u64,defaultp>
u64vec3	glm/fwd.hpp	/^	typedef highp_u64vec3			u64vec3;$/;"	t	namespace:glm	typeref:typename:highp_u64vec3
u64vec3	glm/fwd.hpp	/^	typedef lowp_u64vec3			u64vec3;$/;"	t	namespace:glm	typeref:typename:lowp_u64vec3
u64vec3	glm/fwd.hpp	/^	typedef mediump_u64vec3			u64vec3;$/;"	t	namespace:glm	typeref:typename:mediump_u64vec3
u64vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<u64, defaultp> u64vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u64,defaultp>
u64vec4	glm/fwd.hpp	/^	typedef highp_u64vec4			u64vec4;$/;"	t	namespace:glm	typeref:typename:highp_u64vec4
u64vec4	glm/fwd.hpp	/^	typedef lowp_u64vec4			u64vec4;$/;"	t	namespace:glm	typeref:typename:lowp_u64vec4
u64vec4	glm/fwd.hpp	/^	typedef mediump_u64vec4			u64vec4;$/;"	t	namespace:glm	typeref:typename:mediump_u64vec4
u64vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<u64, defaultp> u64vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u64,defaultp>
u8	glm/fwd.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
u8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
u8vec1	glm/fwd.hpp	/^	typedef highp_u8vec1			u8vec1;$/;"	t	namespace:glm	typeref:typename:highp_u8vec1
u8vec1	glm/fwd.hpp	/^	typedef lowp_u8vec1				u8vec1;$/;"	t	namespace:glm	typeref:typename:lowp_u8vec1
u8vec1	glm/fwd.hpp	/^	typedef mediump_u8vec1			u8vec1;$/;"	t	namespace:glm	typeref:typename:mediump_u8vec1
u8vec1	glm/gtc/type_precision.hpp	/^	typedef tvec1<u8, defaultp> u8vec1;$/;"	t	namespace:glm	typeref:typename:tvec1<u8,defaultp>
u8vec1	glm/gtx/number_precision.hpp	/^	typedef u8			u8vec1;		\/\/!< \\brief 8bit unsigned integer scalar. (from GLM_GTX_number_precisi/;"	t	namespace:glm::gtx	typeref:typename:u8
u8vec2	glm/fwd.hpp	/^	typedef highp_u8vec2			u8vec2;$/;"	t	namespace:glm	typeref:typename:highp_u8vec2
u8vec2	glm/fwd.hpp	/^	typedef lowp_u8vec2				u8vec2;$/;"	t	namespace:glm	typeref:typename:lowp_u8vec2
u8vec2	glm/fwd.hpp	/^	typedef mediump_u8vec2			u8vec2;$/;"	t	namespace:glm	typeref:typename:mediump_u8vec2
u8vec2	glm/gtc/type_precision.hpp	/^	typedef tvec2<u8, defaultp> u8vec2;$/;"	t	namespace:glm	typeref:typename:tvec2<u8,defaultp>
u8vec3	glm/fwd.hpp	/^	typedef highp_u8vec3			u8vec3;$/;"	t	namespace:glm	typeref:typename:highp_u8vec3
u8vec3	glm/fwd.hpp	/^	typedef lowp_u8vec3				u8vec3;$/;"	t	namespace:glm	typeref:typename:lowp_u8vec3
u8vec3	glm/fwd.hpp	/^	typedef mediump_u8vec3			u8vec3;$/;"	t	namespace:glm	typeref:typename:mediump_u8vec3
u8vec3	glm/gtc/type_precision.hpp	/^	typedef tvec3<u8, defaultp> u8vec3;$/;"	t	namespace:glm	typeref:typename:tvec3<u8,defaultp>
u8vec4	glm/fwd.hpp	/^	typedef highp_u8vec4			u8vec4;$/;"	t	namespace:glm	typeref:typename:highp_u8vec4
u8vec4	glm/fwd.hpp	/^	typedef lowp_u8vec4				u8vec4;$/;"	t	namespace:glm	typeref:typename:lowp_u8vec4
u8vec4	glm/fwd.hpp	/^	typedef mediump_u8vec4			u8vec4;	$/;"	t	namespace:glm	typeref:typename:mediump_u8vec4
u8vec4	glm/gtc/type_precision.hpp	/^	typedef tvec4<u8, defaultp> u8vec4;$/;"	t	namespace:glm	typeref:typename:tvec4<u8,defaultp>
uaddCarry	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint uaddCarry(uint const & x, uint const & y, uint & Carry)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uaddCarry	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<uint, P> uaddCarry(vecType<uint, P> const & x, vecType<uint, P> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint,P>
uif32	glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32() :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(float f_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(uint32 i_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	glm/detail/type_half.inl	/^	union uif32$/;"	u	namespace:glm::detail	file:
uint	glm/detail/type_int.hpp	/^	typedef unsigned int				uint;$/;"	t	namespace:glm	typeref:typename:unsigned int
uint16	glm/detail/type_int.hpp	/^		typedef std::uint16_t				uint16;$/;"	t	namespace:glm::detail	typeref:typename:std::uint16_t
uint16	glm/detail/type_int.hpp	/^	typedef detail::uint16					uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16	glm/fwd.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16_t	glm/fwd.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint32	glm/detail/type_int.hpp	/^		typedef std::uint32_t				uint32;$/;"	t	namespace:glm::detail	typeref:typename:std::uint32_t
uint32	glm/detail/type_int.hpp	/^	typedef detail::uint32					uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32	glm/fwd.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32_t	glm/fwd.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint64	glm/detail/type_int.hpp	/^		typedef std::uint64_t				uint64;$/;"	t	namespace:glm::detail	typeref:typename:std::uint64_t
uint64	glm/detail/type_int.hpp	/^	typedef detail::uint64					uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64	glm/fwd.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64_t	glm/fwd.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint8	glm/detail/type_int.hpp	/^		typedef std::uint8_t				uint8;$/;"	t	namespace:glm::detail	typeref:typename:std::uint8_t
uint8	glm/detail/type_int.hpp	/^	typedef detail::uint8					uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8	glm/fwd.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8_t	glm/fwd.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8_t	glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint_t	glm/detail/type_int.hpp	/^	typedef highp_uint					uint_t;$/;"	t	namespace:glm	typeref:typename:highp_uint
uint_t	glm/detail/type_int.hpp	/^	typedef lowp_uint					uint_t;$/;"	t	namespace:glm	typeref:typename:lowp_uint
uint_t	glm/detail/type_int.hpp	/^	typedef mediump_uint				uint_t;$/;"	t	namespace:glm	typeref:typename:mediump_uint
umat2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:highp_umat2
umat2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2								umat2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2
umat2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2							umat2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:highp_umat2x2
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x2
umat2x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x2							umat2x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x2
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:highp_umat2x3
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x3
umat2x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x3							umat2x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x3
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:highp_umat2x4
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat2x4
umat2x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat2x4							umat2x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat2x4
umat3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:highp_umat3
umat3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3								umat3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3
umat3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3							umat3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:highp_umat3x2
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x2
umat3x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x2							umat3x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x2
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:highp_umat3x3
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x3
umat3x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x3							umat3x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x3
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:highp_umat3x4
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat3x4
umat3x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat3x4							umat3x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat3x4
umat4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:highp_umat4
umat4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4								umat4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4
umat4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4							umat4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:highp_umat4x2
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x2
umat4x2	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x2							umat4x2;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x2
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:highp_umat4x3
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x3
umat4x3	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x3							umat4x3;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x3
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef highp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:highp_umat4x4
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef lowp_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:lowp_umat4x4
umat4x4	glm/gtc/matrix_integer.hpp	/^	typedef mediump_umat4x4							umat4x4;$/;"	t	namespace:glm	typeref:typename:mediump_umat4x4
umulExtended	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(uint const & x, uint const & y, uint & msb, uint & lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
umulExtended	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(vecType<uint, P> const & x, vecType<uint, P> const & y, ve/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
undo	nuklear/nuklear.h	/^    struct nk_text_undo_state undo;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_undo_state
undo_char	nuklear/nuklear.h	/^   nk_rune undo_char[NK_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:nk_text_undo_state	typeref:typename:nk_rune[]
undo_char_point	nuklear/nuklear.h	/^   short undo_char_point;$/;"	m	struct:nk_text_undo_state	typeref:typename:short
undo_point	nuklear/nuklear.h	/^   short undo_point;$/;"	m	struct:nk_text_undo_state	typeref:typename:short
undo_rec	nuklear/nuklear.h	/^   struct nk_text_undo_record undo_rec[NK_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:nk_text_undo_state	typeref:struct:nk_text_undo_record[]
unformatted	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr>& unformatted(std::basic_ios<CTy,CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
ungrab	nuklear/nuklear.h	/^    unsigned char ungrab;$/;"	m	struct:nk_mouse	typeref:typename:unsigned char
uniform	Program.cpp	/^GLint Program::uniform(const GLchar* uniformName) const {$/;"	f	class:Program	typeref:typename:GLint
uniform_proj	nuklear/nuklear_glfw_gl3.h	/^    GLint uniform_proj;$/;"	m	struct:nk_glfw_device	typeref:typename:GLint
uniform_tex	nuklear/nuklear_glfw_gl3.h	/^    GLint uniform_tex;$/;"	m	struct:nk_glfw_device	typeref:typename:GLint
uninitialize	glm/detail/setup.hpp	/^	enum ctor{uninitialize};$/;"	e	enum:glm::ctor
unpackDouble2x32	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uvec2 unpackDouble2x32(double v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec2
unpackF2x11_1x10	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF2x11_1x10(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackHalf1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackHalf1x16(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackHalf2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackHalf2x16(uint v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackHalf4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackHalf4x16(uint64 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackI3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER ivec4 unpackI3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER ivec4
unpackSnorm1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm1x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm2x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x8	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackSnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackU3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uvec4 unpackU3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec4
unpackUnorm1x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm1x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm2x16	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x8	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm3x10_1x2	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x16	glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x8	glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unProject	glm/gtc/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> unProject$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
up	Camera.cpp	/^glm::vec3 Camera::up() const {$/;"	f	class:Camera	typeref:typename:glm::vec3
Update	main.cpp	/^void Update(float secondsElapsed)$/;"	f	typeref:typename:void
use	Program.cpp	/^void Program::use() const {$/;"	f	class:Program	typeref:typename:void
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_allocator	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_clipboard	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command_buffer	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_context	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_command	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_list	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_button	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_progress	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_property	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_scrollbar	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_selectable	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_slider	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_toggle	typeref:typename:nk_handle
userdata	nuklear/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_user_font	typeref:typename:nk_handle
use_clipping	nuklear/nuklear.h	/^    int use_clipping;$/;"	m	struct:nk_command_buffer	typeref:typename:int
usubBorrow	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint usubBorrow(uint const & x, uint const & y, uint & Borrow)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
usubBorrow	glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vecType<uint, P> usubBorrow(vecType<uint, P> const & x, vecType<uint, P> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<uint,P>
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv; \/* coordinates to a white pixel in the texture  *\/$/;"	m	struct:nk_draw_null_texture	typeref:struct:nk_vec2
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv;$/;"	m	struct:nk_draw_vertex	typeref:struct:nk_vec2
uv	nuklear/nuklear.h	/^    struct nk_vec2 uv[2];$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_vec2[2]
uvec1	glm/gtc/vec1.hpp	/^	typedef highp_uvec1			uvec1;$/;"	t	namespace:glm	typeref:typename:highp_uvec1
uvec1	glm/gtc/vec1.hpp	/^	typedef lowp_uvec1			uvec1;$/;"	t	namespace:glm	typeref:typename:lowp_uvec1
uvec1	glm/gtc/vec1.hpp	/^	typedef mediump_uvec1		uvec1;$/;"	t	namespace:glm	typeref:typename:mediump_uvec1
uvec2	glm/detail/type_vec.hpp	/^	typedef highp_uvec2			uvec2;$/;"	t	namespace:glm	typeref:typename:highp_uvec2
uvec2	glm/detail/type_vec.hpp	/^	typedef lowp_uvec2			uvec2;$/;"	t	namespace:glm	typeref:typename:lowp_uvec2
uvec2	glm/detail/type_vec.hpp	/^	typedef mediump_uvec2		uvec2;$/;"	t	namespace:glm	typeref:typename:mediump_uvec2
uvec3	glm/detail/type_vec.hpp	/^	typedef highp_uvec3			uvec3;$/;"	t	namespace:glm	typeref:typename:highp_uvec3
uvec3	glm/detail/type_vec.hpp	/^	typedef lowp_uvec3			uvec3;$/;"	t	namespace:glm	typeref:typename:lowp_uvec3
uvec3	glm/detail/type_vec.hpp	/^	typedef mediump_uvec3		uvec3;$/;"	t	namespace:glm	typeref:typename:mediump_uvec3
uvec4	glm/detail/type_vec.hpp	/^	typedef highp_uvec4			uvec4;$/;"	t	namespace:glm	typeref:typename:highp_uvec4
uvec4	glm/detail/type_vec.hpp	/^	typedef lowp_uvec4			uvec4;$/;"	t	namespace:glm	typeref:typename:lowp_uvec4
uvec4	glm/detail/type_vec.hpp	/^	typedef mediump_uvec4		uvec4;$/;"	t	namespace:glm	typeref:typename:mediump_uvec4
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
v0	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph	typeref:typename:float
v1	nuklear/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph	typeref:typename:float
v3Scale	glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER void v3Scale(tvec3<T, P> & v, T desiredLength)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t	typeref:typename:unsigned char[sizeof (stbi__uint32)==4?1:-1]
value	glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x2	typeref:typename:col_type[2]
value	glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x3	typeref:typename:col_type[2]
value	glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::tmat2x4	typeref:typename:col_type[2]
value	glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x2	typeref:typename:col_type[3]
value	glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x3	typeref:typename:col_type[3]
value	glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::tmat3x4	typeref:typename:col_type[3]
value	glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x2	typeref:typename:col_type[4]
value	glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x3	typeref:typename:col_type[4]
value	glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::tmat4x4	typeref:typename:col_type[4]
value	glm/gtc/ulp.inl	/^	double value;$/;"	m	union:__anon2dbcfbc3020c	typeref:typename:double	file:
value	glm/gtc/ulp.inl	/^	float value;$/;"	m	union:__anon2dbcfbc3010c	typeref:typename:float	file:
value	glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	typeref:typename:CTy[3]
value	glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	typeref:typename:order_type
value	glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	typeref:typename:unsigned
value	glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	typeref:typename:unsigned
value	glm/gtx/simd_vec4.inl	/^	enum{value = Value};$/;"	e	enum:glm::detail::shuffle_mask::__anona9631fc50104	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%d";};$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%f";};$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%lld";};$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "b";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "d";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i16";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i64";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i8";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u16";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u64";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u8";};$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	nuklear/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon9874a1ee0504
value	nuklear/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	e	enum:nk_helper::__anon9874a1ee0304
value	nuklear/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	e	enum:nk_helper::__anon9874a1ee0404
value	stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon84e4e886090a	typeref:typename:stbi__uint16[288]
values	nuklear/nuklear.h	/^    nk_uint values[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table	typeref:typename:nk_uint[]
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon84e4e886050a	typeref:typename:stbi_uc[256]
value_address	glm/detail/type_gentype.hpp	/^		value_const_pointer value_address() const{return value_pointer(this);}$/;"	f	struct:glm::detail::genType	typeref:typename:value_const_pointer
value_address	glm/detail/type_gentype.hpp	/^		value_pointer value_address(){return value_pointer(this);}$/;"	f	struct:glm::detail::genType	typeref:typename:value_pointer
value_const_pointer	glm/detail/type_gentype.hpp	/^		typedef VALTYPE const * value_const_pointer;$/;"	t	struct:glm::detail::genType	typeref:typename:VALTYPE const *
value_pointer	glm/detail/type_gentype.hpp	/^		typedef VALTYPE * value_pointer;$/;"	t	struct:glm::detail::genType	typeref:typename:VALTYPE *
value_ptr	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T * value_ptr$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T * value_ptr(tmat4x3<T, P> & mat)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_reference	glm/detail/type_gentype.hpp	/^		typedef VALTYPE & value_reference;$/;"	t	struct:glm::detail::genType	typeref:typename:VALTYPE &
value_size	glm/detail/type_gentype.inl	/^typename base<vT, cT, rT, pT>::size_type base<vT, cT, rT, pT>::value_size()$/;"	f	class:glm::detail::base	typeref:typename:base<vT,cT,rT,pT>::size_type
value_type	glm/detail/type_gentype.hpp	/^		typedef VALTYPE value_type;$/;"	t	struct:glm::detail::genType	typeref:typename:VALTYPE
value_type	glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x2	typeref:typename:T
value_type	glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x3	typeref:typename:T
value_type	glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat2x4	typeref:typename:T
value_type	glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x2	typeref:typename:T
value_type	glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x3	typeref:typename:T
value_type	glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat3x4	typeref:typename:T
value_type	glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x2	typeref:typename:T
value_type	glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x3	typeref:typename:T
value_type	glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tmat4x4	typeref:typename:T
value_type	glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec1	typeref:typename:T
value_type	glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec2	typeref:typename:T
value_type	glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec3	typeref:typename:T
value_type	glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tvec4	typeref:typename:T
value_type	glm/detail/_swizzle.hpp	/^		typedef T       value_type;$/;"	t	struct:glm::detail::_swizzle_base0	typeref:typename:T
value_type	glm/detail/_swizzle.hpp	/^		typedef ValueType       value_type;$/;"	t	struct:glm::detail::_swizzle_base2	typeref:typename:ValueType
value_type	glm/detail/_swizzle.hpp	/^		typedef ValueType value_type;$/;"	t	struct:glm::detail::_swizzle_base2	typeref:typename:ValueType
value_type	glm/gtc/quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tquat	typeref:typename:T
value_type	glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	typeref:typename:T
value_type	glm/gtx/intersect.inl	/^		if (position.y < typename genType::value_type(0) || position.y > typename genType::value_type(/;"	m	class:glm::intersectLineTriangle::genType	typeref:typename:position.y<typename genType::value_type (0)||position.y> typename	file:
value_type	glm/gtx/intersect.inl	/^		if (position.z < typename genType::value_type(0) || position.y + position.z > typename genType/;"	m	class:glm::intersectLineTriangle::genType	typeref:typename:position.z<typename genType::value_type (0)||position.y+position.z> typename	file:
value_type	glm/gtx/simd_mat4.hpp	/^		typedef float value_type;$/;"	t	namespace:glm::detail	typeref:typename:float
value_type	glm/gtx/simd_quat.hpp	/^		typedef float value_type;$/;"	t	namespace:glm::detail	typeref:typename:float
value_type	glm/gtx/simd_vec4.hpp	/^		typedef float value_type;$/;"	t	namespace:glm::detail	typeref:typename:float
vao	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
vbo	nuklear/nuklear_glfw_gl3.h	/^    GLuint vbo, vao, ebo;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
vec1	glm/gtc/vec1.hpp	/^	typedef highp_vec1				vec1;$/;"	t	namespace:glm	typeref:typename:highp_vec1
vec1	glm/gtc/vec1.hpp	/^	typedef lowp_vec1				vec1;$/;"	t	namespace:glm	typeref:typename:lowp_vec1
vec1	glm/gtc/vec1.hpp	/^	typedef mediump_vec1			vec1;$/;"	t	namespace:glm	typeref:typename:mediump_vec1
vec2	glm/detail/type_vec.hpp	/^	typedef highp_vec2			vec2;$/;"	t	namespace:glm	typeref:typename:highp_vec2
vec2	glm/detail/type_vec.hpp	/^	typedef lowp_vec2			vec2;$/;"	t	namespace:glm	typeref:typename:lowp_vec2
vec2	glm/detail/type_vec.hpp	/^	typedef mediump_vec2		vec2;$/;"	t	namespace:glm	typeref:typename:mediump_vec2
vec3	glm/detail/type_vec.hpp	/^	typedef highp_vec3			vec3;$/;"	t	namespace:glm	typeref:typename:highp_vec3
vec3	glm/detail/type_vec.hpp	/^	typedef lowp_vec3			vec3;$/;"	t	namespace:glm	typeref:typename:lowp_vec3
vec3	glm/detail/type_vec.hpp	/^	typedef mediump_vec3		vec3;$/;"	t	namespace:glm	typeref:typename:mediump_vec3
vec4	glm/detail/type_vec.hpp	/^	typedef highp_vec4			vec4;$/;"	t	namespace:glm	typeref:typename:highp_vec4
vec4	glm/detail/type_vec.hpp	/^	typedef lowp_vec4			vec4;$/;"	t	namespace:glm	typeref:typename:lowp_vec4
vec4	glm/detail/type_vec.hpp	/^	typedef mediump_vec4		vec4;$/;"	t	namespace:glm	typeref:typename:mediump_vec4
vec4_cast	glm/gtx/simd_vec4.inl	/^GLM_FUNC_QUALIFIER vec4 vec4_cast$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
vec_type	glm/detail/_swizzle.hpp	/^		typedef VecType         vec_type;        $/;"	t	struct:glm::detail::_swizzle_base2	typeref:typename:VecType
vec_type	glm/detail/_swizzle.hpp	/^		typedef VecType vec_type;$/;"	t	struct:glm::detail::_swizzle_base2	typeref:typename:VecType
VertexCount	glm/detail/dummy.cpp	/^std::size_t const VertexCount = 4;$/;"	v	typeref:typename:std::size_t const
vertex_count	nuklear/nuklear.h	/^    unsigned int vertex_count;$/;"	m	struct:nk_draw_list	typeref:typename:unsigned int
vertices	nuklear/nuklear.h	/^    struct nk_buffer *vertices;$/;"	m	struct:nk_draw_list	typeref:struct:nk_buffer *
vert_shdr	nuklear/nuklear_glfw_gl3.h	/^    GLuint vert_shdr;$/;"	m	struct:nk_glfw_device	typeref:typename:GLuint
view	Camera.cpp	/^glm::mat4 Camera::view() const {$/;"	f	class:Camera	typeref:typename:glm::mat4
viewportAspectRatio	Camera.cpp	/^float Camera::viewportAspectRatio() const {$/;"	f	class:Camera	typeref:typename:float
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon84e4e886080a	typeref:typename:int
v_oversample	nuklear/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range	typeref:typename:unsigned char
v_oversample	nuklear/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context	typeref:typename:unsigned int
w	glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f020a	typeref:typename:T
w	glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	m	union:glm::tvec4::__anon0c24fa7f080c	typeref:typename:T
w	glm/gtc/packing.inl	/^			int w : 2;$/;"	m	struct:glm::detail::i10i10i10i2::__anon1165e74f020a	typeref:typename:int:2	file:
w	glm/gtc/packing.inl	/^			uint w : 2;$/;"	m	struct:glm::detail::u10u10u10u2::__anon1165e74f010a	typeref:typename:uint:2	file:
w	glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat	typeref:typename:T
w	glm/gtx/simd_quat.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anondb998e73010c::__anondb998e73020a	typeref:typename:float
w	glm/gtx/simd_vec4.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anona9631bca010c::__anona9631bca020a	typeref:typename:float
W	glm/gtx/simd_vec4.hpp	/^		W = 3,$/;"	e	enum:glm::comp
w	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart	typeref:typename:float
w	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state	typeref:typename:float
w	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
w	nuklear/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect	typeref:typename:nk_rp_coord
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap	typeref:typename:int
w	nuklear/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image	typeref:typename:unsigned short
w	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect	typeref:typename:float
w	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti	typeref:typename:short
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon84e4e886100a	typeref:typename:int
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
was_packed	nuklear/nuklear.h	/^    int was_packed;$/;"	m	struct:nk_rp_rect	typeref:typename:int
wformat_saver	glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<wchar_t>
where	nuklear/nuklear.h	/^   int where;$/;"	m	struct:nk_text_undo_record	typeref:typename:int
white	nuklear/nuklear.h	/^    NK_STORAGE const struct nk_color white = {255, 255, 255, 255};$/;"	s	function:nk_draw_color_picker
width	Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap	typeref:typename:unsigned int
width	glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
width	glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width	glm/gtx/io.inl	/^	\/* explicit *\/ GLM_FUNC_QUALIFIER width::width(unsigned a)$/;"	f	class:glm::io::width	typeref:typename:GLM_FUNC_QUALIFIER
width	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_panel	typeref:typename:float
width	nuklear/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph	typeref:typename:float
width	nuklear/nuklear.h	/^    int   width;$/;"	m	struct:nk_tt_pack_context	typeref:typename:int
width	nuklear/nuklear.h	/^    int width;$/;"	m	struct:nk_rp_context	typeref:typename:int
width	nuklear/nuklear.h	/^    nk_text_width_f width;$/;"	m	struct:nk_user_font	typeref:typename:nk_text_width_f
width	nuklear/nuklear_glfw_gl3.h	/^    int width, height;$/;"	m	struct:nk_glfw	typeref:typename:int
width_	glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
win	nuklear/nuklear.h	/^    struct nk_page_element win[1];$/;"	m	struct:nk_page	typeref:struct:nk_page_element[1]
win	nuklear/nuklear.h	/^    struct nk_window *win;$/;"	m	struct:nk_popup_state	typeref:struct:nk_window *
win	nuklear/nuklear.h	/^    struct nk_window win;$/;"	m	union:nk_page_data	typeref:struct:nk_window
win	nuklear/nuklear_glfw_gl3.h	/^    GLFWwindow *win;$/;"	m	struct:nk_glfw	typeref:typename:GLFWwindow *
window	nuklear/nuklear.h	/^    struct nk_style_window window;$/;"	m	struct:nk_style	typeref:struct:nk_style_window
WINDOW_POS	main.cpp	/^const glm::vec2 WINDOW_POS(128, 128);$/;"	v	typeref:typename:const glm::vec2
word	glm/gtc/ulp.inl	/^	unsigned int word;$/;"	m	union:__anon2dbcfbc3010c	typeref:typename:unsigned int	file:
word	glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm	typeref:typename:detail::uint16
wrapAngle	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T wrapAngle(T angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
wrapAngle	glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vecType<T, P> wrapAngle(vecType<T, P> const & x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vecType<T,P>
wstate_saver	glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<wchar_t>
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon84e4e886080a	typeref:typename:int
x	glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::tvec1::__anon0beeb0fc010c	typeref:typename:T
x	glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec1::__anon0beeb0fc020c	typeref:typename:T
x	glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d020a	typeref:typename:T
x	glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::tvec2::__anon0c00c97d050c	typeref:typename:T
x	glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe020a	typeref:typename:T
x	glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec3::__anon0c12e1fe050c	typeref:typename:T
x	glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f020a	typeref:typename:T
x	glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	m	union:glm::tvec4::__anon0c24fa7f050c	typeref:typename:T
x	glm/gtc/packing.inl	/^			int x : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon1165e74f020a	typeref:typename:int:10	file:
x	glm/gtc/packing.inl	/^			uint x : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon1165e74f010a	typeref:typename:uint:10	file:
x	glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat	typeref:typename:T
x	glm/gtx/simd_quat.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anondb998e73010c::__anondb998e73020a	typeref:typename:float
x	glm/gtx/simd_vec4.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anona9631bca010c::__anona9631bca020a	typeref:typename:float
X	glm/gtx/simd_vec4.hpp	/^		X = 0,$/;"	e	enum:glm::comp
x	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart	typeref:typename:float
x	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state	typeref:typename:float
x	nuklear/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult	typeref:typename:int
x	nuklear/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node	typeref:typename:nk_rp_coord
x	nuklear/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect	typeref:typename:nk_rp_coord
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor	typeref:typename:short
x	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text	typeref:typename:short
x	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex	typeref:typename:short
x	nuklear/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find	typeref:typename:float
x	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect	typeref:typename:float
x	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti	typeref:typename:short
x	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	m	struct:nk_scroll	typeref:typename:unsigned short
x	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point	typeref:typename:float
x	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2	typeref:typename:float
x	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i	typeref:typename:short
x	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big	typeref:typename:T
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
x0	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
x0	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge	typeref:typename:float
x0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
x0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:unsigned short
x0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar	typeref:typename:unsigned short
x0	nuklear/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row	typeref:typename:float
x1	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
x1	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge	typeref:typename:float
x1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
x1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:unsigned short
x1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar	typeref:typename:unsigned short
x1	nuklear/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row	typeref:typename:float
xadvance	nuklear/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_font_glyph	typeref:typename:float
xadvance	nuklear/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_user_font_glyph	typeref:typename:float
xadvance	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:float
xadvance	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar	typeref:typename:float
xoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:float
xoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar	typeref:typename:float
xoff2	nuklear/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar	typeref:typename:float
y	glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	m	struct:glm::tvec2::__anon0c00c97d010c::__anon0c00c97d020a	typeref:typename:T
y	glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	m	union:glm::tvec2::__anon0c00c97d060c	typeref:typename:T
y	glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe020a	typeref:typename:T
y	glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec3::__anon0c12e1fe060c	typeref:typename:T
y	glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f020a	typeref:typename:T
y	glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	m	union:glm::tvec4::__anon0c24fa7f060c	typeref:typename:T
y	glm/gtc/packing.inl	/^			int y : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon1165e74f020a	typeref:typename:int:10	file:
y	glm/gtc/packing.inl	/^			uint y : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon1165e74f010a	typeref:typename:uint:10	file:
y	glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat	typeref:typename:T
y	glm/gtx/simd_quat.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anondb998e73010c::__anondb998e73020a	typeref:typename:float
y	glm/gtx/simd_vec4.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anona9631bca010c::__anona9631bca020a	typeref:typename:float
Y	glm/gtx/simd_vec4.hpp	/^		Y = 1,$/;"	e	enum:glm::comp
y	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart	typeref:typename:float
y	nuklear/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state	typeref:typename:float
y	nuklear/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult	typeref:typename:int
y	nuklear/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node	typeref:typename:nk_rp_coord
y	nuklear/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect	typeref:typename:nk_rp_coord
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor	typeref:typename:short
y	nuklear/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text	typeref:typename:short
y	nuklear/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex	typeref:typename:short
y	nuklear/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find	typeref:typename:float
y	nuklear/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect	typeref:typename:float
y	nuklear/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti	typeref:typename:short
y	nuklear/nuklear.h	/^struct nk_scroll {unsigned short x, y;};$/;"	m	struct:nk_scroll	typeref:typename:unsigned short
y	nuklear/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point	typeref:typename:float
y	nuklear/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2	typeref:typename:float
y	nuklear/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i	typeref:typename:short
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e886060a::__anon84e4e886070a	typeref:typename:int
y0	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
y0	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge	typeref:typename:float
y0	nuklear/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
y0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:unsigned short
y0	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar	typeref:typename:unsigned short
y1	nuklear/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph	typeref:typename:float
y1	nuklear/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge	typeref:typename:float
y1	nuklear/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad	typeref:typename:float
y1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:unsigned short
y1	nuklear/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar	typeref:typename:unsigned short
yaw	glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T yaw(tquat<T, P> const & q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
yawPitchRoll	glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER tmat4x4<T, defaultp> yawPitchRoll$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tmat4x4<T,defaultp>
YCoCg2rgb	glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> YCoCg2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
YCoCgR2rgb	glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER tvec3<T, P> YCoCgR2rgb$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>	file:
YCoCgR2rgb	glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER tvec3<T, P> YCoCgR2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tvec3<T,P>
ymax	nuklear/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row	typeref:typename:float
ymin	nuklear/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row	typeref:typename:float
yoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar	typeref:typename:float
yoff	nuklear/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar	typeref:typename:float
yoff2	nuklear/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar	typeref:typename:float
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon84e4e886080a	typeref:typename:int
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon84e4e886080a	typeref:typename:int
z	glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	m	struct:glm::tvec3::__anon0c12e1fe010c::__anon0c12e1fe020a	typeref:typename:T
z	glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec3::__anon0c12e1fe070c	typeref:typename:T
z	glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	m	struct:glm::tvec4::__anon0c24fa7f010c::__anon0c24fa7f020a	typeref:typename:T
z	glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	m	union:glm::tvec4::__anon0c24fa7f070c	typeref:typename:T
z	glm/gtc/packing.inl	/^			int z : 10;$/;"	m	struct:glm::detail::i10i10i10i2::__anon1165e74f020a	typeref:typename:int:10	file:
z	glm/gtc/packing.inl	/^			uint z : 10;$/;"	m	struct:glm::detail::u10u10u10u2::__anon1165e74f010a	typeref:typename:uint:10	file:
z	glm/gtc/quaternion.hpp	/^		T x, y, z, w;$/;"	m	struct:glm::tquat	typeref:typename:T
z	glm/gtx/simd_quat.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anondb998e73010c::__anondb998e73020a	typeref:typename:float
z	glm/gtx/simd_vec4.hpp	/^			struct {float x, y, z, w;};$/;"	m	struct:glm::detail::__anona9631bca010c::__anona9631bca020a	typeref:typename:float
Z	glm/gtx/simd_vec4.hpp	/^		Z = 2,$/;"	e	enum:glm::comp
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:stbi_uc *
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:stbi_uc **
zero	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED zero = _mm_setzero_ps();$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
zero	glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType zero()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:char *
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:char *
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:char *
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:stbi__zhuffman
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:int
z_flag	main.cpp	/^bool z_flag = false;$/;"	v	typeref:typename:bool
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon84e4e8860a0a	typeref:typename:stbi__zhuffman
_apply_op	glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(const VecType& that, T op)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
_buffer	glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	typeref:typename:char[1]
_epi32_0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_0 = _mm_set_ps1(0);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_1 = _mm_set_ps1(1);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_127	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_127 = _mm_set_ps1(127);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_2 = _mm_set_ps1(2);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_3 = _mm_set_ps1(3);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_4	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_4 = _mm_set_ps1(4);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_5	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_5 = _mm_set_ps1(5);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_6	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_6 = _mm_set_ps1(6);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_7	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_7 = _mm_set_ps1(7);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_8	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_8 = _mm_set_ps1(8);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_9	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_9 = _mm_set_ps1(9);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_epi32_sign_mask	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _epi32_sign_mask = _mm_castsi128_ps(_mm_set1_epi32(static_cast/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_farPlane	Camera.h	/^        float _farPlane;$/;"	m	class:tdogl::Camera	typeref:typename:float
_fieldOfView	Camera.h	/^        float _fieldOfView;$/;"	m	class:tdogl::Camera	typeref:typename:float
_format	Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap	typeref:typename:Format
_GLM_SWIZZLE2_2_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE2_2_MEMBERS(/;"	d
_GLM_SWIZZLE2_3_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE2_3_MEMBERS(/;"	d
_GLM_SWIZZLE2_4_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE2_4_MEMBERS(/;"	d
_GLM_SWIZZLE3_2_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE3_2_MEMBERS(/;"	d
_GLM_SWIZZLE3_3_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE3_3_MEMBERS(/;"	d
_GLM_SWIZZLE3_4_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE3_4_MEMBERS(/;"	d
_GLM_SWIZZLE4_2_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE4_2_MEMBERS(/;"	d
_GLM_SWIZZLE4_3_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE4_3_MEMBERS(/;"	d
_GLM_SWIZZLE4_4_MEMBERS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE4_4_MEMBERS(/;"	d
_GLM_SWIZZLE_FUNCTION_1_ARGS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_FUNCTION_1_ARGS(/;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_FUNCTION_2_ARGS(/;"	d
_GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR(/;"	d
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
_GLM_SWIZZLE_TEMPLATE1	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_TEMPLATE1 /;"	d
_GLM_SWIZZLE_TEMPLATE2	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_TEMPLATE2 /;"	d
_GLM_SWIZZLE_TYPE1	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_TYPE1 /;"	d
_GLM_SWIZZLE_TYPE2	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_TYPE2 /;"	d
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	glm/detail/_swizzle.hpp	/^#define _GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
_height	Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap	typeref:typename:unsigned
_horizontalAngle	Camera.h	/^        float _horizontalAngle;$/;"	m	class:tdogl::Camera	typeref:typename:float
_m128_deg_ps	glm/detail/intrinsic_matrix.inl	/^static const __m128 GLM_VAR_USED _m128_deg_ps = _mm_set_ps1(180.f \/ 3.1415926535897932384626433/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_m128_rad_ps	glm/detail/intrinsic_matrix.inl	/^static const __m128 GLM_VAR_USED _m128_rad_ps = _mm_set_ps1(3.141592653589793238462643383279f \//;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_mm_bit_interleave_si128	glm/detail/intrinsic_integer.inl	/^	inline __m128i _mm_bit_interleave_si128(__m128i x)$/;"	f	namespace:glm::detail	typeref:typename:__m128i
_mm_bit_interleave_si128	glm/detail/intrinsic_integer.inl	/^	inline __m128i _mm_bit_interleave_si128(__m128i x, __m128i y)$/;"	f	namespace:glm::detail	typeref:typename:__m128i
_nearPlane	Camera.h	/^        float _nearPlane;$/;"	m	class:tdogl::Camera	typeref:typename:float
_object	Program.h	/^        GLuint _object;$/;"	m	class:tdogl::Program	typeref:typename:GLuint
_object	Shader.h	/^        GLuint _object;$/;"	m	class:tdogl::Shader	typeref:typename:GLuint
_object	Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture	typeref:typename:GLuint
_originalHeight	Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture	typeref:typename:GLfloat
_originalWidth	Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture	typeref:typename:GLfloat
_pixels	Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap	typeref:typename:unsigned char *
_position	Camera.h	/^        glm::vec3 _position;$/;"	m	class:tdogl::Camera	typeref:typename:glm::vec3
_ps_0p5	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_0p5 = _mm_set_ps1(0.5f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_0_0_0_1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_0_0_0_1 = _mm_set_ps(0.0f, 0.0f, 0.0f, 1.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_0_0_1_0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_0_0_1_0 = _mm_set_ps(0.0f, 0.0f, 1.0f, 0.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_0_1_0_0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_0_1_0_0 = _mm_set_ps(0.0f, 1.0f, 0.0f, 0.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_1 = _mm_set_ps1(1.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_127	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_127 = _mm_set_ps1(127.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_1_0_0_0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_1_0_0_0 = _mm_set_ps(1.0f, 0.0f, 0.0f, 0.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_1_3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_1_3 = _mm_set_ps1(0.33333333333333333333333333333333f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_2 = _mm_set_ps1(2.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_255	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_255 = _mm_set_ps1(255.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_2pow23	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_2pow23 = _mm_set_ps1(8388608.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_2_pi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_2_pi = _mm_set_ps1(0.63661977236758134307553505349006f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_3 = _mm_set_ps1(3.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_4_pi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_4_pi = _mm_set_ps1(1.2732395447351626861510701069801f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_s0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_s0 = _mm_set_ps1(0.12797564625607904396e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_s1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_s1 = _mm_set_ps1(0.21972168858277355914e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_s2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_s2 = _mm_set_ps1(0.68193064729268275701e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_s3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_s3 = _mm_set_ps1(0.28205206687035841409e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_t0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_t0 = _mm_set_ps1(-0.91646118527267623468e-1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_t1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_t1 = _mm_set_ps1(-0.13956945682312098640e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_t2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_t2 = _mm_set_ps1(-0.94393926122725531747e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_atan_t3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_atan_t3 = _mm_set_ps1(0.12888383034157279340e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_hi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_hi = _mm_set_ps1(127.4999961853f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_lo	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_lo = _mm_set_ps1(-127.4999961853f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_p0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_p0 = _mm_set_ps1(2.30933477057345225087e-2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_p1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_p1 = _mm_set_ps1(2.02020656693165307700e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_p2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_p2 = _mm_set_ps1(1.51390680115615096133e3f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_q0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_q0 = _mm_set_ps1(2.33184211722314911771e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp2_q1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp2_q1 = _mm_set_ps1(4.36821166879210612817e3f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_c1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_c1 = _mm_set_ps1(6.93145751953125e-1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_c2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_c2 = _mm_set_ps1(1.42860682030941723212e-6f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_hi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_hi = _mm_set_ps1(88.3762626647949f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_lo	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_lo = _mm_set_ps1(-88.3762626647949f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_p0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_p0 = _mm_set_ps1(1.26177193074810590878e-4f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_p1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_p1 = _mm_set_ps1(3.02994407707441961300e-2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_q0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_q0 = _mm_set_ps1(3.00198505138664455042e-6f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_q1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_q1 = _mm_set_ps1(2.52448340349684104192e-3f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_q2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_q2 = _mm_set_ps1(2.27265548208155028766e-1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_q3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_q3 = _mm_set_ps1(2.00000000000000000009e0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_exp_rln2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_exp_rln2 = _mm_set_ps1(1.4426950408889634073599f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log2_c0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log2_c0 = _mm_set_ps1(1.44269504088896340735992f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_c0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_c0 = _mm_set_ps1(0.693147180559945f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_p0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_p0 = _mm_set_ps1(-7.89580278884799154124e-1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_p1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_p1 = _mm_set_ps1(1.63866645699558079767e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_p2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_p2 = _mm_set_ps1(-6.41409952958715622951e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_q0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_q0 = _mm_set_ps1(-3.56722798256324312549e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_q1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_q1 = _mm_set_ps1(3.12093766372244180303e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_log_q2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_log_q2 = _mm_set_ps1(-7.69691943550460008604e2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_m1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_m1 = _mm_set_ps1(-1.0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_pi	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_pi = _mm_set_ps1(3.1415926535897932384626433832795f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_pi2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_pi2 = _mm_set_ps1(6.283185307179586476925286766560f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_pi_2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_pi_2 = _mm_set_ps1(1.5707963267948966192313216916398f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_pi_4	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_pi_4 = _mm_set_ps1(0.78539816339744830961566084581988f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_sincos_p0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_sincos_p0 = _mm_set_ps1(0.15707963267948963959e1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_sincos_p1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_sincos_p1 = _mm_set_ps1(-0.64596409750621907082e0f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_sincos_p2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_sincos_p2 = _mm_set_ps1(0.7969262624561800806e-1f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_sincos_p3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_sincos_p3 = _mm_set_ps1(-0.468175413106023168e-2f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_p0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_p0 = _mm_set_ps1(-1.79565251976484877988e7f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_p1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_p1 = _mm_set_ps1(1.15351664838587416140e6f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_p2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_p2 = _mm_set_ps1(-1.30936939181383777646e4f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_poleval	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_poleval = _mm_set_ps1(3.68935e19f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_q0	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_q0 = _mm_set_ps1(-5.38695755929454629881e7f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_q1	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_q1 = _mm_set_ps1(2.50083801823357915839e7f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_q2	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_q2 = _mm_set_ps1(-1.32089234440210967447e6f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_ps_tan_q3	glm/detail/intrinsic_common.inl	/^	static const __m128 GLM_VAR_USED _ps_tan_q3 = _mm_set_ps1(1.36812963470692954678e4f);$/;"	v	namespace:glm::detail	typeref:typename:const __m128 GLM_VAR_USED	file:
_refCount	Shader.h	/^        unsigned* _refCount;$/;"	m	class:tdogl::Shader	typeref:typename:unsigned *
_release	Shader.cpp	/^void Shader::_release() {$/;"	f	class:Shader	typeref:typename:void
_retain	Shader.cpp	/^void Shader::_retain() {$/;"	f	class:Shader	typeref:typename:void
_set	Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap	typeref:typename:void
_swizzle	glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<ValueType, P, VecType, N, E0, E1, E2, E3, (E0==E1||E0==/;"	s	namespace:glm::detail
_swizzle_base0	glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,-1,-2,2> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,E2,-1,3> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail
_swizzle_base1	glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<T, P, V,E0,E1,E2,E3,4> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail
_swizzle_base2	glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<ValueType, P, VecType,E0,E1,E2,E3,N>$/;"	s	namespace:glm::detail
_swizzle_base2	glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<ValueType, P, VecType,N,E0,E1,E2,E3,1> : public _swizzle_base1<ValueType,/;"	s	namespace:glm::detail
_TDOGL_PROGRAM_ATTRIB_N_UNIFORM_SETTERS	Program.h	/^#define _TDOGL_PROGRAM_ATTRIB_N_UNIFORM_SETTERS(/;"	d
_USE_MATH_DEFINES	Camera.cpp	/^#define _USE_MATH_DEFINES$/;"	d	file:
_verticalAngle	Camera.h	/^        float _verticalAngle;$/;"	m	class:tdogl::Camera	typeref:typename:float
_viewportAspectRatio	Camera.h	/^        float _viewportAspectRatio;$/;"	m	class:tdogl::Camera	typeref:typename:float
_width	Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap	typeref:typename:unsigned
__anon0beeb0fc010c	glm/detail/type_vec1.hpp	/^			{$/;"	u	struct:glm::tvec1
__anon0beeb0fc020c	glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::tvec1
__anon0c00c97d010c	glm/detail/type_vec2.hpp	/^			{$/;"	u	struct:glm::tvec2
__anon0c00c97d020a	glm/detail/type_vec2.hpp	/^				struct{ T x, y; };$/;"	s	union:glm::tvec2::__anon0c00c97d010c
__anon0c00c97d030a	glm/detail/type_vec2.hpp	/^				struct{ T r, g; };$/;"	s	union:glm::tvec2::__anon0c00c97d010c
__anon0c00c97d040a	glm/detail/type_vec2.hpp	/^				struct{ T s, t; };$/;"	s	union:glm::tvec2::__anon0c00c97d010c
__anon0c00c97d050c	glm/detail/type_vec2.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::tvec2
__anon0c00c97d060c	glm/detail/type_vec2.hpp	/^			union {T y, g, t;};$/;"	u	struct:glm::tvec2
__anon0c12e1fe010c	glm/detail/type_vec3.hpp	/^			{$/;"	u	struct:glm::tvec3
__anon0c12e1fe020a	glm/detail/type_vec3.hpp	/^				struct{ T x, y, z; };$/;"	s	union:glm::tvec3::__anon0c12e1fe010c
__anon0c12e1fe030a	glm/detail/type_vec3.hpp	/^				struct{ T r, g, b; };$/;"	s	union:glm::tvec3::__anon0c12e1fe010c
__anon0c12e1fe040a	glm/detail/type_vec3.hpp	/^				struct{ T s, t, p; };$/;"	s	union:glm::tvec3::__anon0c12e1fe010c
__anon0c12e1fe050c	glm/detail/type_vec3.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::tvec3
__anon0c12e1fe060c	glm/detail/type_vec3.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::tvec3
__anon0c12e1fe070c	glm/detail/type_vec3.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::tvec3
__anon0c24fa7f010c	glm/detail/type_vec4.hpp	/^			{$/;"	u	struct:glm::tvec4
__anon0c24fa7f020a	glm/detail/type_vec4.hpp	/^				struct { T x, y, z, w;};$/;"	s	union:glm::tvec4::__anon0c24fa7f010c
__anon0c24fa7f030a	glm/detail/type_vec4.hpp	/^				struct { T r, g, b, a; };$/;"	s	union:glm::tvec4::__anon0c24fa7f010c
__anon0c24fa7f040a	glm/detail/type_vec4.hpp	/^				struct { T s, t, p, q; };$/;"	s	union:glm::tvec4::__anon0c24fa7f010c
__anon0c24fa7f050c	glm/detail/type_vec4.hpp	/^			union { T x, r, s; };$/;"	u	struct:glm::tvec4
__anon0c24fa7f060c	glm/detail/type_vec4.hpp	/^			union { T y, g, t; };$/;"	u	struct:glm::tvec4
__anon0c24fa7f070c	glm/detail/type_vec4.hpp	/^			union { T z, b, p; };$/;"	u	struct:glm::tvec4
__anon0c24fa7f080c	glm/detail/type_vec4.hpp	/^			union { T w, a, q; };$/;"	u	struct:glm::tvec4
__anon1165e74f010a	glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::u10u10u10u2	file:
__anon1165e74f020a	glm/gtc/packing.inl	/^		{$/;"	s	union:glm::detail::i10i10i10i2	file:
__anon2dbcfbc3010c	glm/gtc/ulp.inl	/^{$/;"	u	file:
__anon2dbcfbc3020c	glm/gtc/ulp.inl	/^{$/;"	u	file:
__anon2dbcfbc3030a	glm/gtc/ulp.inl	/^	{$/;"	s	union:__anon2dbcfbc3020c	file:
__anon84e4e8860104	stb_image.h	/^{$/;"	g
__anon84e4e886020a	stb_image.h	/^{$/;"	s
__anon84e4e886030a	stb_image.h	/^{$/;"	s
__anon84e4e8860404	stb_image.h	/^{$/;"	g
__anon84e4e886050a	stb_image.h	/^{$/;"	s
__anon84e4e886060a	stb_image.h	/^{$/;"	s
__anon84e4e886070a	stb_image.h	/^   {$/;"	s	struct:__anon84e4e886060a
__anon84e4e886080a	stb_image.h	/^{$/;"	s
__anon84e4e886090a	stb_image.h	/^{$/;"	s
__anon84e4e8860a0a	stb_image.h	/^{$/;"	s
__anon84e4e8860b0a	stb_image.h	/^{$/;"	s
__anon84e4e8860c0a	stb_image.h	/^{$/;"	s
__anon84e4e8860d04	stb_image.h	/^enum {$/;"	g
__anon84e4e8860e0a	stb_image.h	/^{$/;"	s
__anon84e4e8860f0a	stb_image.h	/^{$/;"	s
__anon84e4e886100a	stb_image.h	/^{$/;"	s
__anon9874a1ee0104	nuklear/nuklear.h	/^enum {nk_false, nk_true};$/;"	g
__anon9874a1ee020c	nuklear/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	u
__anon9874a1ee0304	nuklear/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	g	struct:nk_helper
__anon9874a1ee0404	nuklear/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	g	struct:nk_helper
__anon9874a1ee0504	nuklear/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	g	struct:nk_alignof
__anon9874a1ee060c	nuklear/nuklear.h	/^    union {nk_uint i; float f;} conv = {0};$/;"	u	function:nk_inv_sqrt
__anon9874a1ee070c	nuklear/nuklear.h	/^    union {const nk_uint *i; const nk_byte *b;} conv = {0};$/;"	u	function:nk_murmur_hash
__anon9874a1ee0804	nuklear/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	g
__anon9874a1ee0904	nuklear/nuklear.h	/^enum {$/;"	g
__anon9874a1ee0a04	nuklear/nuklear.h	/^enum { \/* platformID *\/$/;"	g
__anon9874a1ee0b04	nuklear/nuklear.h	/^enum { \/* encodingID for NK_TT_PLATFORM_ID_UNICODE *\/$/;"	g
__anon9874a1ee0c04	nuklear/nuklear.h	/^enum { \/* encodingID for NK_TT_PLATFORM_ID_MICROSOFT *\/$/;"	g
__anon9874a1ee0d04	nuklear/nuklear.h	/^enum { \/* encodingID for NK_TT_PLATFORM_ID_MAC; same as Script Manager codes *\/$/;"	g
__anon9874a1ee0e04	nuklear/nuklear.h	/^enum { \/* languageID for NK_TT_PLATFORM_ID_MICROSOFT; same as LCID... *\/$/;"	g
__anon9874a1ee0f04	nuklear/nuklear.h	/^enum { \/* languageID for NK_TT_PLATFORM_ID_MAC *\/$/;"	g
__anon9874a1ee100c	nuklear/nuklear.h	/^    union {struct nk_scroll *s; nk_uint *i;} value;$/;"	u	function:nk_group_begin
__anona9631bca010c	glm/gtx/simd_vec4.hpp	/^		{$/;"	u	namespace:glm::detail
__anona9631bca020a	glm/gtx/simd_vec4.hpp	/^			struct {float x, y, z, w;};$/;"	s	union:glm::detail::__anona9631bca010c
__anona9631fc50104	glm/gtx/simd_vec4.inl	/^	enum{value = Value};$/;"	g	struct:glm::detail::shuffle_mask	file:
__anondb998e73010c	glm/gtx/simd_quat.hpp	/^		{$/;"	u	namespace:glm::detail
__anondb998e73020a	glm/gtx/simd_quat.hpp	/^			struct {float x, y, z, w;};$/;"	s	union:glm::detail::__anondb998e73010c
__anone26ffacf010c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm2x16	file:
__anone26ffacf020c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm2x16	file:
__anone26ffacf030c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm2x16	file:
__anone26ffacf040c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm2x16	file:
__anone26ffacf050c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm4x8	file:
__anone26ffacf060c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm4x8	file:
__anone26ffacf070c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm4x8	file:
__anone26ffacf080c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm4x8	file:
__anone26ffacf090c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packDouble2x32	file:
__anone26ffacf0a0c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackDouble2x32	file:
__anone26ffacf0b0c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packHalf2x16	file:
__anone26ffacf0c0c	glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackHalf2x16	file:
__has_feature	glm/detail/setup.hpp	/^#	define __has_feature(/;"	d
~basic_format_saver	glm/gtx/io.inl	/^	basic_format_saver<CTy,CTr>::~basic_format_saver()$/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
~basic_state_saver	glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy,CTr>::~basic_state_saver()$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
~Bitmap	Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap
~Program	Program.cpp	/^Program::~Program() {$/;"	f	class:Program
~Shader	Shader.cpp	/^Shader::~Shader() {$/;"	f	class:Shader
~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture
